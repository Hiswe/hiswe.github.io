<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hiswepedia</title>
  
  
  <link href="https://hiswe.github.io/atom.xml" rel="self"/>
  
  <link href="https://hiswe.github.io/"/>
  <updated>2021-04-25T10:07:36.830Z</updated>
  <id>https://hiswe.github.io/</id>
  
  <author>
    <name>Hiswe Halya</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Les bases du web</title>
    <link href="https://hiswe.github.io/fr/2021/03-basic-web-understanding/"/>
    <id>https://hiswe.github.io/fr/2021/03-basic-web-understanding/</id>
    <published>2021-04-24T14:54:00.000Z</published>
    <updated>2021-04-25T10:07:36.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Le but de cet article est de vous fournir une compréhension de base de ce qui permet de voir un site Web en tapant une adresse dans son navigateur.<br>C’est une simplification de ce qui se passe dans la réalité, mais l’idée globale est ici 🙂 </p><span id="more"></span><h2 id="Terminologie"><a href="#Terminologie" class="headerlink" title="Terminologie"></a>Terminologie</h2><h3 id="Internet"><a href="#Internet" class="headerlink" title="Internet"></a>Internet</h3><p>C’est une manière de faire <strong>parler des appareils électroniques entre eux</strong>. </p><p><a href="https://fr.wikipedia.org/wiki/Internet">En lire plus sur internet</a></p><h3 id="De-nombreux-appareils"><a href="#De-nombreux-appareils" class="headerlink" title="De nombreux appareils"></a>De nombreux appareils</h3><p>Même si ce sont tous des ordinateurs, nous pouvons différencier deux types d’appareils:</p><h4 id="Le-client"><a href="#Le-client" class="headerlink" title="Le client"></a>Le client</h4><figure class="image-container">  <img src="/fr/2021/03-basic-web-understanding/computer-and-phone.svg" class="" width="350" height="200" title="un ordinateur &amp; un téléphone " alt="un ordinateur &amp; un téléphone">   <figcaption class="image-container__caption">clients: Vos appareils électroniques de tout les jours !</figcaption></figure><p>C’est <strong>votre appareil</strong> (ordinateur ou smartphone…). </p><a href="https://fr.wikipedia.org/wiki/Client_(informatique)" title="" target="">un article complete à propos des clients</a><p>Il peut avoir un ou plusieurs <strong>navigateurs internets installés</strong> pour accéder facilement à internet.</p><h4 id="Le-serveur"><a href="#Le-serveur" class="headerlink" title="Le serveur"></a>Le serveur</h4><figure class="image-container">  <img src="/fr/2021/03-basic-web-understanding/server.svg" class="" width="220" height="160" title="un serveur">   <figcaption class="image-container__caption">serveur: Ceux qui sont toujours là pour vous aider ! (ils ne dorment jamais 😶)</figcaption></figure><p>C’est un <strong>ordinateur</strong> spécialisé pour <strong>répondre à des requêtes</strong>.<br>Il a des logiciels dédiés qui sont lancés pour lui permettre de remplir cette fonction.<br>Ce sont plutôt les entreprises qui en possèdent.</p><a href="https://fr.wikipedia.org/wiki/Serveur_informatique" title="" target="">Un article complet sur les serveurs</a><p>Petite remarque : Internet consiste à faire en sorte que les ordinateurs se parlent entre eux.<br>Vous pouvez donc transformer votre propre ordinateur en serveur si vous le souhaitez en installant des logiciels spécifiques !</p><h3 id="Le-navigateur"><a href="#Le-navigateur" class="headerlink" title="Le navigateur"></a>Le navigateur</h3><figure class="image-container">  <img src="/fr/2021/03-basic-web-understanding/browser.svg" class="" width="200" height="130" title="un navigateur internet " alt="un navigateur internet">   <figcaption class="image-container__caption">Le navigateur: rends le web facile depuis les années 1990</figcaption></figure><p>Un <a href="https://fr.wikipedia.org/wiki/Navigateur_web">navigateur</a>: C’est le logiciel que vous utilisez pour accéder à des pages internent.  </p><p>Voici quelques navigateurs connus:</p><ul><li><a href="https://www.google.com/chrome/browser/desktop/index.html">Google Chrome</a></li><li><a href="https://www.mozilla.org/en-US/firefox/new/">Firefox</a></li><li><a href="https://www.microsoft.com/en-us/windows/microsoft-edge">Microsoft Edge</a></li><li><a href="https://support.apple.com/downloads/safari">Apple Safari</a></li></ul><p>Il va tout faire pour que vous ayez une belle représentation visuelle de ce que vous avez demandé.<br>Ui, ça semble évidente mais c’est une des choses principale des ordinateurs : comment avec des <a href="https://fr.wikipedia.org/wiki/Bit">bits</a> vous pouvez avoir un affichage interactif ✨ </p><h2 id="Comment-ca-fonctionne"><a href="#Comment-ca-fonctionne" class="headerlink" title="Comment ça fonctionne"></a>Comment ça fonctionne</h2><figure class="image-container">  <img src="/fr/2021/03-basic-web-understanding/browser-ask-server.svg" class="" width="525" height="200" title="un navigateur demandant une ressource à un server " alt="un navigateur demandant une ressource à un server">   <figcaption class="image-container__caption">“Hey serveur! T'es là ?”</figcaption></figure><p>Quand vous tapez une adresse dans le navigateur, le navigateur demandera au serveur ce qui se trouve à cet endroit. Si le serveur le trouve il vous le donnera en retour !.</p><p>La plupart du temps, vous souhaitez obtenir une page Web, mais cela peut être n’importe quoi: une image, de la musique, une vidéo, des documents pdf…</p><h3 id="Acceder-a-une-page-internet"><a href="#Acceder-a-une-page-internet" class="headerlink" title="Accéder à une page internet"></a>Accéder à une page internet</h3><figure class="image-container">  <img src="/fr/2021/03-basic-web-understanding/server-give-html.svg" class="" width="525" height="200" title="le serveur donne un fichier HTML " alt="le serveur donne un fichier HTML">   <figcaption class="image-container__caption">C'est le HTML que tu m'as demandé !</figcaption></figure><p>Une <strong>page internet</strong> est juste un <strong>fichier de texte !</strong><br>On les appelle des  <strong>fichiers html.</strong><br>Si vous voulez plus de détail <a href="https://fr.wikipedia.org/wiki/Hypertext_Markup_Language">il  y a beaucoup plus de détails ici</a></p><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>Donc le HTML est juste un fichier texte, mais un type de fichier spécifique.</p><p>C’est : </p><ul><li>Tout le contenu que vous voulez écrire mais formatter d’une manière très spécifique. </li><li>Toutes les autres informations supplémentaires nécessaire pour que celà s’affiche de manière plus belle.</li></ul><h3 id="CSS-Javascript-JS-et-les-autres-ressources"><a href="#CSS-Javascript-JS-et-les-autres-ressources" class="headerlink" title="CSS, Javascript (JS) et les autres ressources"></a>CSS, Javascript (JS) et les autres ressources</h3><figure class="image-container">  <img src="/fr/2021/03-basic-web-understanding/server-give-css-and-js.svg" class="" width="525" height="200" title="le serveur transmettant des fichiers CSS &amp; JS " alt="le serveur transmettant des fichiers CSS &amp; JS">   <figcaption class="image-container__caption">Vous avex aussi besoin de CSS et de JS</figcaption></figure><p>Dans les informations supplémentaires on va retrouver une liste de fichiers supplémentaires à demander au serveur.<br>En plus des images/vidéos, il y a aussi deux domaines précis où l’on a besoin de plus d’informations : </p><ul><li>pour avoir une <strong>jolie présentation</strong> : ce sera donné par les informations contenue dans les fichiers textes de type  <strong>CSS</strong></li><li>pour avoir un contenu <strong>interactif</strong> : ce sera donné par les informations contenue dans les fichiers textes de type <strong>Javascript</strong> (on abrège souvent en JS)</li></ul><h3 id="La-magie-du-navigateur"><a href="#La-magie-du-navigateur" class="headerlink" title="La magie du navigateur"></a>La magie du navigateur</h3><figure class="image-container">  <img src="/fr/2021/03-basic-web-understanding/webbrowser-rendering.svg" class="" width="480" height="400" title="le navigateur rendant une page internet " alt="le navigateur rendant une page internet">   <figcaption class="image-container__caption">Wow ! Ça c'est de la page web !</figcaption></figure><p>Et donc, avec l’ensemble de ces fichiers textes (HTML, CSS &amp; JS), le navigateur jouera de sa magie et offrira à vous et aux autres utilisateurs un bel affichage intéractif des informations que vous voulez voir ! </p><h2 id="Pour-resumer"><a href="#Pour-resumer" class="headerlink" title="Pour résumer"></a>Pour résumer</h2><figure class="image-container">  <img src="/fr/2021/03-basic-web-understanding/browser-love.svg" class="" width="260" height="140" title="le navigateur entouré d" alt="amour ">   <figcaption class="image-container__caption">Love! Love! Love!</figcaption></figure><p><strong>Aimez votre navigateur !</strong>  (et gardez le à jour 😎)</p><p>Vous savez maintenant : </p><ul><li>qu’un site internet est un ensemble de fichiers texte</li><li>ils vous sont fournis par le serveur</li><li>le fichier principal d’une page web est un fichier HTML</li></ul><p>Vous pouvez retrouver plus de détail à propos du HTML dans cet article : <a href="/en/2018/04-html-basic-part-1/" title="html basic (part 1)">html basic (part 1)</a> </p>]]></content>
    
    
    <summary type="html">Apprendre comment on affiche une belle page internet après avoir tapé une adresse dans son navigateur</summary>
    
    
    
    <category term="web" scheme="https://hiswe.github.io/categories/web/"/>
    
    
    <category term="beginner" scheme="https://hiswe.github.io/tags/beginner/"/>
    
  </entry>
  
  <entry>
    <title>Vectorize simple drawings images</title>
    <link href="https://hiswe.github.io/en/2020/15-vectorize-a-simple-drawing/"/>
    <id>https://hiswe.github.io/en/2020/15-vectorize-a-simple-drawing/</id>
    <published>2020-04-16T15:13:06.000Z</published>
    <updated>2021-04-25T10:07:36.819Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This will simply show you a little step-by-step to transform a sketch into a vector image!</p><p>Even if the example will use <a href="https://affinity.serif.com/designer/" title="" target="">Affinity Designer</a>, the process could be applied with any vector software.</p><span id="more"></span><h2 id="Before-we-begin"><a href="#Before-we-begin" class="headerlink" title="(Before we begin)"></a>(Before we begin)</h2><p>If you don’t know anything about vector creation, you should read those two articles:</p><ul><li><a href="/en/2016/01-vector-basics/" title="Vector basics">Vector basics</a>:  explain what is a `vector` drawing </li><li><a href="/en/2016/02-vector-creation-basics/" title="Creating vector images">Creating vector images</a>: and some basic vector software usage</li></ul><h2 id="Drawing-the-shapes"><a href="#Drawing-the-shapes" class="headerlink" title="Drawing the shapes"></a>Drawing the shapes</h2><p>The following image will be our starting point:</p><figure class="image-container">  <img src="/en/2020/15-vectorize-a-simple-drawing/source.png" class="" width="450" height="450" title="A hand drawn tiny cat " alt="A hand drawn tiny cat">  <figcaption class="image-container__caption">Meow ©Alessandra</figcaption></figure><h3 id="Shape-thinking"><a href="#Shape-thinking" class="headerlink" title="Shape thinking"></a>Shape thinking</h3><p>To be efficient (aka. lazy), you need to <strong>think about shapes</strong> (that’s all what vector illustration is about).  </p><p>And we can use the specificity of shapes:</p><ul><li>they can be  <strong>closed</strong>:<br>this will be good for the body, the tail, the nose &amp; the belly</li><li>the can be <strong>open</strong>:<br>this will be for everything else, including the legs.</li></ul><h3 id="Comfortable-line-style"><a href="#Comfortable-line-style" class="headerlink" title="Comfortable line style"></a>Comfortable line style</h3><p>To keep easy the tracing part, we will use a basic style: </p><ul><li>pick a <strong>stroke color:</strong> usually I go with a pink #ff0078 to contrast with the line art </li><li>a <strong>stroke size:</strong> usually a little thinner than the sketch’s pen</li><li><strong>remove any fill:</strong> so we won’t cover any part of our sketch</li></ul><figure class="image-container">  <img src="/en/2020/15-vectorize-a-simple-drawing/base-style-appearance.png" class="" width="326" height="96" title="base style with stroke and no fill " alt="base style with stroke and no fill">  <figcaption class="image-container__caption">The appearance should look like this</figcaption></figure><h3 id="Drawing-time"><a href="#Drawing-time" class="headerlink" title="Drawing time"></a>Drawing time</h3><p>And now you can draw with the <strong>pen tool</strong>. (keyboard shortcut is the <code>p</code> key)</p><ul><li>keep the number of points as low as possible. It will be easier to edit afterwards.</li><li>don’t try to be too precise because…</li><li>…you will go over your path with the <strong>white arrow</strong> to adjust them if necessary</li></ul><h3 id="Edit-with-the-Node-Tool-white-arrow"><a href="#Edit-with-the-Node-Tool-white-arrow" class="headerlink" title="Edit with the Node Tool (white arrow)"></a>Edit with the Node Tool (white arrow)</h3><p>It’s very easy to use the pen tool to make some shapes.<br>You can try to be as accurate as you want in the first attempt or, you can be quick &amp; dirty.<br>Afterwards you can refine with the white arrow tool (aka. Node Tool).</p><div class="video-wrapper">  <video src="/en/2020/15-vectorize-a-simple-drawing/path-editing.mp4" controls muted></div><p>With the Node tool you can:</p><ul><li>convert any point to sharp/smooth (inside the top context bar).<br>I often use that to “reset” a point if I’ve made some edit that I don’t like.</li><li>adjust all handlers (keep <code>alt</code> pressed if you want to break the handler)</li><li>add (or remove) some points</li></ul><p>And then:</p><figure class="image-container">  <img src="/en/2020/15-vectorize-a-simple-drawing/lineart-big.svg" class="" width="900" height="450" title="A hand drawn tiny cat with vector lines " alt="A hand drawn tiny cat with vector lines">  <figcaption class="image-container__caption">I'm traced</figcaption></figure><p>TADDAAAA! ✨</p><p>N.B. The pen tool can also be used as a Node tool with shortcuts! But it won’t be covered here. 🤫</p><h3 id="Straight-to-curved-path"><a href="#Straight-to-curved-path" class="headerlink" title="Straight to curved path"></a>Straight to curved path</h3><p>One thing that I really like, is that Affinity make it easy to convert straight path to curves.</p><p>In order to do that you will:</p><ul><li>activate the <code>Node Tool</code> (the shortcut is the <code>a</code> key)</li><li>select your path</li><li>go hover your straigth section</li><li>drag &amp; drop when your satisfied.</li></ul><div class="video-wrapper">  <video src="/en/2020/15-vectorize-a-simple-drawing/white-arrow-curve-path.mp4" controls muted></div><h2 id="Ordering-shapes-amp-coloring"><a href="#Ordering-shapes-amp-coloring" class="headerlink" title="Ordering shapes &amp; coloring"></a>Ordering shapes &amp; coloring</h2><p>While tracing without fill, it’s hard to notice which shape is above the other.<br>By adding some basic colors, you will see where the overlaps are.</p><figure class="image-container">  <img src="/en/2020/15-vectorize-a-simple-drawing/basic-color.svg" class="" width="450" height="450" title="the vector drawing with some parts missing " alt="the vector drawing with some parts missing">  <figcaption class="image-container__caption">Ow noes! Me missing things!</figcaption></figure><h3 id="Layer-panel"><a href="#Layer-panel" class="headerlink" title="Layer panel"></a>Layer panel</h3><p>All ordering can be done inside <em>the layer panel</em> (on the right).<br>You will have to drag &amp; drop to re-organize.</p><div class="video-wrapper">  <video src="/en/2020/15-vectorize-a-simple-drawing/ordering-grouping.mp4" controls muted></div><p>In the video you can notice may things. </p><p>You can <strong>rename things by double clicking on them.</strong><br>When you drag, there is <strong>2 positions of the drop-zone</strong>:</p><ol><li>takes <strong>all the width: <em>this is moving</em></strong></li><li><strong>begin after a path preview: <em>this nesting</em></strong></li></ol><p>More on this on the next Section 🔜</p><p>The end result could be something like that:</p><figure class="image-container">  <img src="/en/2020/15-vectorize-a-simple-drawing/layer-panel.png" class="" width="330" height="300" title="a well organized layer panel " alt="a well organized layer panel">  <figcaption class="image-container__caption">A very well organized layer panel 🌈</figcaption></figure><h3 id="Groups-amp-Path"><a href="#Groups-amp-Path" class="headerlink" title="Groups &amp; Path"></a>Groups &amp; Path</h3><p>If you look closely in the layer panel you will see that, next to the path names, there is between parenthesis more information.</p><p>It’s the <strong>type of thing</strong></p><p>And so you see that you can put a path inside:</p><ul><li>another <strong>path</strong></li><li>or a <strong>group</strong></li></ul><p><strong>This can be done when dragging if the dropzone begin after the preview.</strong></p><p><strong><em>If a path is inside another one it will be cut to fit his parent</em></strong>.<br>Grouping is just to be well organized, and move things together with ease. </p><p>And so with with all this mighty knowledge we can:</p><ul><li>group all the part of the face</li><li>put the the belly inside the body, to make sure it doesn’t spill out outside</li><li>and so on!</li></ul><figure class="image-container">  <img src="/en/2020/15-vectorize-a-simple-drawing/grouping-reordering.svg" class="" width="450" height="450" title="A flat colored decent cat " alt="A flat colored decent cat">  <figcaption class="image-container__caption">Flat but OK!</figcaption></figure><h3 id="“X-Ray”-outline-mode"><a href="#“X-Ray”-outline-mode" class="headerlink" title="“X-Ray” outline mode"></a>“X-Ray” outline mode</h3><p>Sometimes you might feel overwhelm by the paths, and just loose the sight of them! 👀<br>It’s where the outline view mode can spark you some joy.</p><p>This will help figure out if you’re missing some path…<br>…and will help you select anything easily!</p><figure class="image-container">  <img src="/en/2020/15-vectorize-a-simple-drawing/outline-mode-toggle.png" class="" width="435" height="204" title="the menu to get the outline mode " alt="the menu to get the outline mode">  <figcaption class="image-container__caption">Outline mode with cmd + Y</figcaption></figure><p>Learning the shortcut (<code>cmd + Y</code>) will help you going back and forth those 2 view modes.</p><figure class="image-container">  <img src="/en/2020/15-vectorize-a-simple-drawing/outline-view.png" class="" width="379" height="379" title="the cat in outline view " alt="the cat in outline view">  <figcaption class="image-container__caption">The cat in outline: Ugly but useful</figcaption></figure><h2 id="Refining"><a href="#Refining" class="headerlink" title="Refining"></a>Refining</h2><p>And now if you want, you can add stuff:  </p><ul><li>keep your path in order</li><li><strong>to make some easy inner shadows, create path inside other paths!</strong><br>you even have a shortcut in top-right to place your next path inside another!<img src="/en/2020/15-vectorize-a-simple-drawing/insert-inside.png" class="" width="171" height="68" title="Insert inside shortcut " alt="Insert inside shortcut"></li></ul><p>And so this can be your final result 😽</p><figure class="image-container">  <img src="/en/2020/15-vectorize-a-simple-drawing/color-tweaking.svg" class="" width="450" height="450" title="A refined colored cat " alt="A refined colored cat">  <figcaption class="image-container__caption">The Mighty Meow</figcaption></figure><h2 id="Wrapping-up"><a href="#Wrapping-up" class="headerlink" title="Wrapping up"></a>Wrapping up</h2><p>Vectorizing a sketch can be pretty satisfying and can be achieved in a few small steps:</p><ul><li>trace your sketch</li><li>refine paths the Node Tool</li><li>fill them with colors</li><li>reorganize the paths<ul><li>with groups</li><li>or path inside path</li></ul></li><li>and add more stuff until your statisfied!</li></ul><p>And a list of shortcuts:</p><ul><li><code>p</code> Pen Tool</li><li><code>a</code> Node Tool</li><li><code>cmd + G</code> Group</li><li><code>shift + cmd + G</code> Un-group</li><li><code>cmd + Y</code> Toggle outline mode</li></ul>]]></content>
    
    
    <summary type="html">Learn how vectorize a sketch</summary>
    
    
    
    <category term="drawing" scheme="https://hiswe.github.io/categories/drawing/"/>
    
    
    <category term="affinity designer" scheme="https://hiswe.github.io/tags/affinity-designer/"/>
    
    <category term="vector" scheme="https://hiswe.github.io/tags/vector/"/>
    
    <category term="beginner" scheme="https://hiswe.github.io/tags/beginner/"/>
    
  </entry>
  
  <entry>
    <title>State of PWA with Parcel, February 2019</title>
    <link href="https://hiswe.github.io/en/2019/14-state-of-pwa-with-parcel-february-2019/"/>
    <id>https://hiswe.github.io/en/2019/14-state-of-pwa-with-parcel-february-2019/</id>
    <published>2019-02-24T16:09:11.000Z</published>
    <updated>2021-04-25T10:07:36.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In the mid 2018 I have played with Parcel to build a <a href="https://vuejs.org/">VueJs</a> <a href="https://en.wikipedia.org/wiki/Progressive_Web_Apps">Progressive Web Application</a> (PWA).<br>Back then it was kind of quirky to do so.<br>Reworking on it, I can tell how it compares with <a href="https://webpack.js.org/">Webpack</a> and how Parcel improve its PWA experience.</p><span id="more"></span><h2 id="Reminders"><a href="#Reminders" class="headerlink" title="Reminders"></a>Reminders</h2><p>If you’re already familiar with the title, you can skip this part 🥳.</p><h3 id="Progressive-Web-Application-PWA"><a href="#Progressive-Web-Application-PWA" class="headerlink" title="Progressive Web Application (PWA)"></a>Progressive Web Application (PWA)</h3><p>To be very very short a PWA is a website that use a certain set of web technologies in order to be used like a regular iOS/Android application.</p><p>To dig a little more into it:</p><ul><li>it’s not restricted to mobile device</li><li>it’s not restricted to any framework, it just needs to use web technologies</li><li>it allows offline support</li><li>it allows notifications</li><li>and many other things…</li></ul><p>It needs:</p><ul><li>that you’re hosting your website in HTTPS</li><li>a browser that supports the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API">Service Worker API</a></li><li>a <a href="https://developer.mozilla.org/en-US/docs/Web/Manifest">webmanifest file</a>: a JSON file that provides information about your web-application</li><li>a <a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API">service worker</a>: a JavaScript file that uses the SW API to do stuff (yeah “stuff”, coz you can do many many things)</li></ul><p>You can write the latter in your preferred text editor, but…</p><h3 id="…workbox"><a href="#…workbox" class="headerlink" title="…workbox"></a>…workbox</h3><p>is a <a href="https://developers.google.com/web/tools/workbox/">tool developed &amp; maintained by Google</a> to help you write the service worker file.</p><p>Even if you can come up with your own SW file, I personally prefer to use tools that streamline my process and prevents me for doing silly errors.</p><p>If you haven’t yet, try it. Documentation is good and the tool is easy to use.<br>And mostly: Workbox really helps.</p><h3 id="Parcel-1-11-0"><a href="#Parcel-1-11-0" class="headerlink" title="Parcel 1.11.0"></a>Parcel 1.11.0</h3><p>It’s the <em>Blazing fast, zero configuration web application bundler.</em><br>It helps people to compile things in web technologies (HTML, CSS &amp; JS)</p><p>It means to be a simpler alternative to webpack (that has the same purpose, and whose main critic is to be hard to configure).</p><p>You can check <a href="/en/2018/11-parcel-with-vue/" title="this post about Parcel">this post about Parcel</a> if you want more information. (Yeah, self promotion 😎)</p><h2 id="How-was-it-with-Parcel-in-the-mid-2018"><a href="#How-was-it-with-Parcel-in-the-mid-2018" class="headerlink" title="How was it with Parcel in the mid-2018"></a>How was it with Parcel in the mid-2018</h2><p>The main principle of Parcel is that it will parse your application entry point, follow any file path within it, and compile/optimize/hash them.<br>It can be almost anything (see the <a href="https://en.parceljs.org/getting_started.html">asset types</a> in the doc!), so HTML, CSS, JS, images, JSON… ANYTHING!</p><p>So this is good &amp; fine, but it can be a problems as Parcel tends to be too greedy (being too greedy is bad).</p><p>To have a PWA we need to (in order):</p><p><em><strong>1.</strong>_ have some application icons<br>_<strong>2.</strong>_ have a <code>manifest.webmanifest</code> file<br>_<strong>3.</strong></em> build our HTML/JS/CSS/assets<br>  • our HTML should reference the manifest with a <code>&lt;link rel=&quot;manifest&quot; href=&quot;/manifest.webmanifest&quot;&gt;</code><br>  • our future service worker should be called in our JS file</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-string">`serviceWorker`</span> <span class="hljs-keyword">in</span> navigator) &#123;<br>  <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">`load`</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    navigator.serviceWorker.register(<span class="hljs-string">`/my-application-service-worker.js`</span>)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p><em><strong>4.</strong>_ build our service worker with Workbox that will cache any of the assets needed for the application<br>_<strong>5.</strong></em> …and that’s it 🎉</p><p>But at this time Parcel would have:</p><ul><li>followed our manifest link and converted it to a js file 😨</li><li>followed our service worker’s registration and breaks because it doesn’t exist yet 😰</li><li>and so 😱</li></ul><p>In order to avoid that you would have to:</p><ul><li>avoid your HTML file as an entry point (so compile only the JS/CSS)</li><li>come with another simplified HTML file to use the Parcel dev server</li><li>generate the service worker with <a href="https://developers.google.com/web/tools/workbox/guides/generate-service-worker/workbox-build">workbox-build</a></li><li>create a different production HTML that:<ul><li>reference the manifest file</li><li>have a script tag that install our service worker (this way it won’t be parsed by Parcel)</li></ul></li></ul><h2 id="manifest-webmanifest"><a href="#manifest-webmanifest" class="headerlink" title="manifest.webmanifest"></a>manifest.webmanifest</h2><h3 id="with-webpack"><a href="#with-webpack" class="headerlink" title="with webpack"></a>with webpack</h3><p>In the Webpack lore it exists the <a href="https://www.npmjs.com/package/webpack-pwa-manifest">webpack-pwa-manifest</a> plugin which will take care of:</p><ul><li>creating icons</li><li>creating the manifest file</li><li>injecting it into the HTML</li><li>take care of old proprietary tags in iOS if needed</li></ul><p>and this is AWESOOOOME.</p><h3 id="with-Parcel"><a href="#with-Parcel" class="headerlink" title="with Parcel"></a>with Parcel</h3><p>It now supports NOT to parse/modify your manifest file, which was a real bummer in previous versions.</p><p>Coming up with your own manifest file is not a problem per se. It’s just a small JSON file that won’t change a lot over time.<br>As for the icons, I’ve found the <a href="https://www.npmjs.com/package/node-image-resizer">node-image-resizer</a> that will help you generate the different app icons sizes. And because it uses <a href="https://www.npmjs.com/package/jimp">jimp</a> under the hood, you won’t be bothered to install any external dependencies (like GraphicMagic).</p><p>So event if it’s less “plug and play” than using webpack, it’s now way better than not using your HTML file as an entry point (mostly for the dev server).<br>I would like to see a webpack-pwa-manifest alternatives but coming with my own will stay on my list of open source project to do that I know I won’t find the time to make but it could be helpful to build 😔</p><h2 id="service-worker"><a href="#service-worker" class="headerlink" title="service worker"></a>service worker</h2><h3 id="with-webpack-1"><a href="#with-webpack-1" class="headerlink" title="with webpack"></a>with webpack</h3><p>Google develops &amp; maintain the <a href="https://developers.google.com/web/tools/workbox/modules/workbox-webpack-plugin#top_of_page">workbox-webpack-plugin</a> that lets you generate a worker file.</p><p>On <code>inject mode</code> it has some nice additions which are:</p><ul><li>injecting the workbox library for you</li><li>generating a separate precache manifest file (I find it cleaner to have all those path away from the “real” service worker code)</li></ul><h3 id="with-Parcel-1"><a href="#with-Parcel-1" class="headerlink" title="with Parcel"></a>with Parcel</h3><p>There is the <a href="https://github.com/mischnic/parcel-plugin-sw-cache#readme">parcel-plugin-sw-cache</a> which works quite well.<br>There isn’t the workbox-webpack-plugin nice additions but it dœs the job.<br>Also, the configuration depends on the <code>package.json</code> so it may be less flexible than a JS’ webpack configuration.</p><p>But to prevent the “too greedy“ behavior of Parcel you have to use a <a href="https://github.com/parcel-bundler/parcel/issues/2080">small twist</a> to register your service worker without Parcel noticing it:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// this way Parcel won&#x27;t check `my-application-service-worker.js`</span><br><span class="hljs-keyword">const</span> swName = <span class="hljs-string">`/my-application-service-worker.js`</span><br>navigator.serviceWorker.register(swName)<br></code></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Webpack propose a smoother experience due to the more mature ecosystem it has, but working with Parcel to build a PWA is a way smoother experience than it was. Good Game Parcel! 🏆</p><p>The main small inconvenience is to generate the different application icons… which isn’t that bad.</p><p>You can find the web applications here:</p><ul><li><a href="https://github.com/hiswe/thailpha">Thailpha</a> which uses webpack</li><li><a href="https://github.com/hiswe/thaime">Thaime</a> which uses Parcel</li></ul>]]></content>
    
    
    <summary type="html">How the Parcel bundler plays now with PWA</summary>
    
    
    
    <category term="web" scheme="https://hiswe.github.io/categories/web/"/>
    
    
    <category term="advanced" scheme="https://hiswe.github.io/tags/advanced/"/>
    
  </entry>
  
  <entry>
    <title>Writing koa/nuxt applications</title>
    <link href="https://hiswe.github.io/en/2018/13-koa-nuxt/"/>
    <id>https://hiswe.github.io/en/2018/13-koa-nuxt/</id>
    <published>2018-10-23T09:58:37.000Z</published>
    <updated>2021-04-25T10:07:36.813Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>You’re ready to make your new application.<br>You take <a href="https://vuejs.org/">Vue 2</a> as your framework</p><p>But you want your application to be:</p><ul><li>fast</li><li>bulletproof</li></ul><p>So you decide to make a <a href="/en/2018/12-vue-with-nuxt/" title="Universal Web Application">Universal Web Application</a> with <a href="https://nuxtjs.org/">Nuxt 2</a> &amp; <a href="https://koajs.com/">Koa 2</a><br>It will:</p><ul><li>fasten the first rendering</li><li>be able to run without JS activated on the client side</li></ul><span id="more"></span><p><strong>Notes:</strong></p><ul><li>You will need to be familiar with Koa/Nuxt.</li><li>Be aware that both Nuxt and Koa use the concepts of <code>context (ctx)</code> &amp; <code>middleware</code>.<br>I’ve tried to differentiate them as much as I could in the following post, but if you’re confused reread carefully and try to sort it out 😅</li><li>You can find a working example of what I’m talking next in the <a href="https://github.com/Hiswe/koa-nuxt-example">koa-nuxt-example repository</a></li></ul><h2 id="Shaped-for-express"><a href="#Shaped-for-express" class="headerlink" title="Shaped for express"></a>Shaped for express</h2><p>Because <a href="https://expressjs.com/">express.js</a> is the most commonly used Node.js server framework, most of the UWA frameworks <code>render function</code> are shaped for it.</p><p>This means that in express, <a href="https://github.com/nuxt/create-nuxt-app/blob/master/template/server/index-express.js">Nuxt integration came out of the box</a>.<br>You just need to call it like any express middleware:</p><figure class="highlight js"><figcaption><span>01-express-middleware.js</span><a href="/downloads/code/13-koa-nuxt/01-express-middleware.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(nuxt.render)<br></code></pre></td></tr></table></figure><p>Since we want to use Koa, we will need to make our own middleware.<br>No need to think a lot about integration since this has already been solved but the <a href="https://github.com/nuxt/create-nuxt-app/blob/master/template/server/index-koa.js">Nuxt community</a></p><figure class="highlight js"><figcaption><span>02-koa-middleware.js</span><a href="/downloads/code/13-koa-nuxt/02-koa-middleware.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">nuxtMiddleware</span>(<span class="hljs-params">ctx</span>) </span>{<br>  <span class="hljs-comment">// koa defaults to 404 when it sees that status is unset</span><br>  ctx.status = <span class="hljs-number">200</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>    ctx.res.on(<span class="hljs-string">&#x27;close&#x27;</span>, resolve)<br>    ctx.res.on(<span class="hljs-string">&#x27;finish&#x27;</span>, resolve)<br>    nuxt.render(ctx.req, ctx.res, <span class="hljs-function"><span class="hljs-params">promise</span> =&gt;</span> {<br>      <span class="hljs-comment">// nuxt.render passes a rejected promise into callback on error.</span><br>      promise.then(resolve).catch(reject)<br>    })<br>  })<br>}<br><br>app.use(nuxtMiddleware)<br></code></pre></td></tr></table></figure><p>This will work perfectly if you’re only interested in server rendering.</p><h2 id="Handling-POST"><a href="#Handling-POST" class="headerlink" title="Handling POST"></a>Handling POST</h2><p>Let say we want to be able to post a form.</p><ul><li>First we will install/use <a href="https://www.npmjs.com/package/koa-router">koa-router</a> and <a href="https://www.npmjs.com/package/koa-body">koa-body</a></li><li>Then with those, we will be able to handle our <code>POST</code> action</li><li>And we might want to do a database call inside it (<code>doSomethingAsync</code> in the example)</li></ul><figure class="highlight js"><figcaption><span>03-koa-form.js</span><a href="/downloads/code/13-koa-nuxt/03-koa-form.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// …koa app creation + middleware</span><br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> Router()<br><br>router.post(<span class="hljs-string">`/my-action`</span>, koaBody(), <span class="hljs-keyword">async</span> ctx =&gt; {<br>  <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> doSomethingAsync(ctx.request.body)<br>  ctx.redirect(<span class="hljs-string">`/`</span>)<br>})<br><br>app.use(router.routes())<br>app.use(router.allowedMethods())<br><br><span class="hljs-comment">// …call our Nuxt middleware to handle anything that aren&#x27;t our custom actions</span><br></code></pre></td></tr></table></figure><p>This is kind of ok:</p><ul><li>we can now post some data</li><li>redirect to <code>/</code> where Nuxt will handle the markup</li></ul><p>JSON response can be added by later by</p><ul><li>checking what’s the request <code>Content-Type</code> header (<code>ctx.is(&#39;application/json&#39;)</code>)</li><li>don’t redirect</li><li>send back the appropriate response</li></ul><h2 id="Handling-errors"><a href="#Handling-errors" class="headerlink" title="Handling errors"></a>Handling errors</h2><p>We should write an error middleware.<br>It will make sure that if something went wrong, our application won’t crash.<br>To catch all the things, it will be our first middleware.</p><figure class="highlight js"><figcaption><span>04-koa-form-error.js</span><a href="/downloads/code/13-koa-nuxt/04-koa-form-error.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// koa app creation + middleware + router creation</span><br><br>koa.use(<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleErrors</span>(<span class="hljs-params">ctx, next</span>) </span>{<br>  <span class="hljs-keyword">try</span> {<br>    <span class="hljs-keyword">await</span> next()<br>  } <span class="hljs-keyword">catch</span> (error) {<br>    ctx.status = <span class="hljs-number">500</span><br>    ctx.body = error<br>  }<br>})<br><br>router.post(<span class="hljs-string">`/my-action`</span>, koaBody(), <span class="hljs-keyword">async</span> ctx =&gt; {<br>  <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> doSomethingAsync(ctx.request.body)<br>  ctx.redirect(<span class="hljs-string">`/`</span>)<br>})<br><br><span class="hljs-comment">// mount router + Nuxt</span><br></code></pre></td></tr></table></figure><p>So now if anything throw (DB call, JSON parsing…) we will render a page with the error printed.</p><h2 id="Handling-Server-data-with-Nuxt"><a href="#Handling-Server-data-with-Nuxt" class="headerlink" title="Handling Server data with Nuxt"></a>Handling Server data with Nuxt</h2><p>We also should send back some data validation to the user form.</p><figure class="image-container">  <img src="/en/2018/13-koa-nuxt/validation.svg" class="" width="500" height="250" title="a form field with a validation error " alt="a form field with a validation error">  <figcaption class="image-container__caption">Oh no!</figcaption></figure><p>In order to display any validation in the Nuxt application we will need to:</p><ul><li>persist data between our post route and the redirection</li><li>pass those data down to the Nuxt application</li><li>do something with it</li></ul><h3 id="Koa-session"><a href="#Koa-session" class="headerlink" title="Koa-session"></a>Koa-session</h3><p>The most common way to handle data between routes is with sessions.<br>We’ll use <a href="https://www.npmjs.com/package/koa-session">koa-session</a> for this.</p><p>The <a href="https://www.npmjs.com/package/koa-session#example">installation guide</a> is pretty self explanatory.<br>This will add a <code>ctx.session</code> object where we can pass any kind of information.</p><p>Here is the different steps to follow:</p><ul><li>Validate our form</li><li>Add the validation to the session</li><li>Pass it to Nuxt<ul><li>Because Nuxt doesn’t use the Koa <code>ctx</code> but use <code>req</code> &amp; <code>res</code>, copy our session information into those objects.</li><li>This will be done in a Koa middleware just before the nuxt-rendering middleware</li></ul></li><li>Integrate it in the Nuxt application by either using:<ul><li>a <a href="https://nuxtjs.org/guide/routing#middleware">Nuxt middleware</a></li><li>the <a href="https://nuxtjs.org/guide/vuex-store#the-nuxtserverinit-action">nuxtServerInit</a> for Vuex integration<br>Right now let’s start with <code>nuxtServerInit</code>.</li></ul></li><li>…and since now all is in the Vue realm, just use our Vue Components.</li></ul><figure class="highlight js"><figcaption><span>05-validation.js</span><a href="/downloads/code/13-koa-nuxt/05-validation.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// after setting up koa-session</span><br><br>router.post(<span class="hljs-string">`/my-action`</span>, koaBody(), <span class="hljs-keyword">async</span> ctx =&gt; {<br>  <span class="hljs-keyword">const</span> { body } = ctx.request<br>  <span class="hljs-comment">// assuming that we have defined `isFormValid` before</span><br>  <span class="hljs-keyword">const</span> isValid = isFormValid(body)<br>  <span class="hljs-keyword">if</span> (isValid) {<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> doSomethingAsync(body)<br>  } <span class="hljs-keyword">else</span> {<br>    <span class="hljs-comment">// assuming that we have defined `getValidation` before</span><br>    ctx.session.validation = getValidation(body)<br>  }<br>  ctx.redirect(<span class="hljs-string">`/`</span>)<br>})<br><br>app.use(router.routes())<br>app.use(router.allowedMethods())<br><br><span class="hljs-comment">// put some data to the req object</span><br><span class="hljs-comment">// so we will be able to access them in the Nuxt app</span><br><span class="hljs-comment">// – in Vuex nuxtServerInit</span><br><span class="hljs-comment">// - in a Nuxt Middleware</span><br>app.use(<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">passSessionToNuxt</span>(<span class="hljs-params">ctx, next</span>) </span>{<br>  ctx.req.serverData = {<br>    validation: ctx.session.validation || {},<br>  }<br>  <span class="hljs-keyword">await</span> next()<br>})<br></code></pre></td></tr></table></figure><p>In the <em>store/index.js</em></p><figure class="highlight js"><figcaption><span>06-vuex-store.js</span><a href="/downloads/code/13-koa-nuxt/06-vuex-store.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> state = <span class="hljs-function">() =&gt;</span> ({<br>  validation: {},<br>})<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> UPDATE_VALIDATION = <span class="hljs-string">`UPDATE_VALIDATION`</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> mutations = {<br>  [UPDATE_VALIDATION](state, payload) {<br>    state.validation = payload<br>  },<br>}<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> actions = {<br>  <span class="hljs-function"><span class="hljs-title">nuxtServerInit</span>(<span class="hljs-params">{ commit }, nuxtCtx</span>)</span> {<br>    <span class="hljs-keyword">const</span> { req } = nuxtCtx<br>    <span class="hljs-comment">// here we find again our server data</span><br>    <span class="hljs-keyword">const</span> { serverData } = req<br><br>    <span class="hljs-keyword">if</span> (!serverData) <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">if</span> (serverData.validation) {<br>      commit(UPDATE_VALIDATION, serverData.validation)<br>    }<br>  },<br>}<br></code></pre></td></tr></table></figure><p>And that’s it, we now have a Vuex store updated with our server validation.<br>Use <a href="https://vuex.vuejs.org/guide/state.html#the-mapstate-helper">the mapState helper</a> in our Vue component to access it.</p><h3 id="Can’t-set-headers-after-they-are-sent"><a href="#Can’t-set-headers-after-they-are-sent" class="headerlink" title="Can’t set headers after they are sent"></a>Can’t set headers after they are sent</h3><p>Right now, we set the validation on our POST route, and never update it again.</p><p>It means that the validation will be persisted until the user send a good form.<br>So if the user change page and go back to the form, <em>the application will still display the last validation result.</em><br>This isn’t right, we should clear the validation once displayed.</p><p>This should be easy by updating our Koa middleware that link our session to nuxt.</p><figure class="highlight js"><figcaption><span>07-naive-validation-clearing.js</span><a href="/downloads/code/13-koa-nuxt/07-naive-validation-clearing.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">passSessionToNuxt</span>(<span class="hljs-params">ctx, next</span>) </span>{<br>  ctx.req.serverData = {<br>    validation: ctx.session.validation || {},<br>  }<br>  <span class="hljs-comment">// don&#x27;t persist the validation on more than one page</span><br>  <span class="hljs-keyword">delete</span> ctx.session.validation<br>  <span class="hljs-keyword">await</span> next()<br>})<br></code></pre></td></tr></table></figure><p>⚠️ <strong>But this won’t work</strong></p><p>You’ll find in the server logs a <code>Can&#39;t set headers after they are sent</code>.<br>The problem comes from the <code>nuxtMiddleware</code> &amp; how it bypasses the regular Koa flow.</p><p>Usually we set a <code>ctx.body</code> and all the previous middleware will continue their work.</p><figure class="image-container">  <img src="/en/2018/13-koa-nuxt/regular-flow.svg" class="" width="500" height="400" title="regular koa flow " alt="regular koa flow">  <figcaption class="image-container__caption">regular flow</figcaption></figure><p>But that’s what happen here</p><figure class="image-container">  <img src="/en/2018/13-koa-nuxt/nuxt-flow.svg" class="" width="555" height="400" title="koa-nuxt flow " alt="koa-nuxt flow">  <figcaption class="image-container__caption">koa-nuxt flow</figcaption></figure><p>To fix that we need to make sure that our headers are set before the Nuxt middleware.</p><h3 id="autoCommit-false-to-the-rescue"><a href="#autoCommit-false-to-the-rescue" class="headerlink" title="autoCommit: false to the rescue"></a>autoCommit: false to the rescue</h3><p>Koa-session lets us send the headers manually with <a href="https://www.npmjs.com/package/koa-session#sessionmanuallycommit">the manuallyCommit() method</a></p><p>So we have to refactor our server code like this:</p><figure class="highlight js"><figcaption><span>08-manually-commit.js</span><a href="/downloads/code/13-koa-nuxt/08-manually-commit.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> sessionOptions = {<br>  <span class="hljs-comment">// don&#x27;t autoCommit</span><br>  <span class="hljs-comment">// we will handle the header update ourself</span><br>  autoCommit: <span class="hljs-literal">false</span>,<br>}<br>app.use(session(sessionOptions, app))<br><br>router.post(<span class="hljs-string">`/my-action`</span>, koaBody(), <span class="hljs-keyword">async</span> ctx =&gt; {<br>  <span class="hljs-keyword">const</span> { body } = ctx.request<br>  <span class="hljs-keyword">const</span> isValid = isFormValid(body)<br>  <span class="hljs-keyword">if</span> (isValid) {<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> doSomethingAsync(body)<br>  } <span class="hljs-keyword">else</span> {<br>    ctx.session.validation = getValidation(body)<br>    <span class="hljs-comment">// set the headers manually</span><br>    <span class="hljs-keyword">await</span> ctx.session.manuallyCommit()<br>  }<br>  ctx.redirect(<span class="hljs-string">`/`</span>)<br>})<br><br><span class="hljs-comment">// …mount the router…</span><br><br>app.use(<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">passSessionToNuxt</span>(<span class="hljs-params">ctx, next</span>) </span>{<br>  ctx.req.serverData = {<br>    validation: ctx.session.validation || {},<br>  }<br>  <span class="hljs-comment">// don&#x27;t persist the validation on more than one page</span><br>  <span class="hljs-keyword">delete</span> ctx.session.validation<br>  <span class="hljs-comment">// set the headers manually</span><br>  <span class="hljs-keyword">await</span> ctx.session.manuallyCommit()<br>  <span class="hljs-keyword">await</span> next()<br>})<br><br><span class="hljs-comment">// headers are set! we can safely call our Nuxt middleware</span><br></code></pre></td></tr></table></figure><p>This will solve our problem ❤️<br>We just have now to remember calling <code>manuallyCommit()</code> every time we update the session… 😶</p><h2 id="Displaying-all-errors-with-Nuxt"><a href="#Displaying-all-errors-with-Nuxt" class="headerlink" title="Displaying all errors with Nuxt"></a>Displaying all errors with Nuxt</h2><p>There is one last thing we have to take care of.<br>Right now our <code>handleError</code> middleware will make Koa show the error.<br>But Nuxt support an <a href="https://nuxtjs.org/guide/views#error-page">error layout</a> and we should take advantage of it.</p><p>To do this we’ll need to modify our <code>handleError</code> middleware:</p><ul><li>set the error to the <code>ctx.req</code> object (Remember Nuxt still only work with <code>req</code> &amp; <code>res</code>)</li><li>call Nuxt to render the page inside our <code>handleError</code> middleware</li><li><a href="https://nuxtjs.org/guide/routing#middleware">write a Nuxt middleware</a> that will render the error page by calling <a href="https://nuxtjs.org/api/context">nuxtContext.error</a></li></ul><figure class="highlight js"><figcaption><span>09-koa-nuxt-error.js</span><a href="/downloads/code/13-koa-nuxt/09-koa-nuxt-error.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">koa.use(<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleErrors</span>(<span class="hljs-params">ctx, next</span>) </span>{<br>  <span class="hljs-keyword">try</span> {<br>    <span class="hljs-keyword">await</span> next()<br>  } <span class="hljs-keyword">catch</span> (error) {<br>    ctx.status = <span class="hljs-number">500</span><br>    ctx.req.serverError = error<br>    <span class="hljs-keyword">try</span> {<br>      <span class="hljs-comment">// let Nuxt handle the response</span><br>      <span class="hljs-keyword">await</span> nuxtMiddleware(ctx)<br>    } <span class="hljs-keyword">catch</span> (nuxtError) {<br>      <span class="hljs-comment">// we tried our best</span><br>      <span class="hljs-comment">// but if something&#x27;s still wrong, go without Nuxt</span><br>      ctx.body = error<br>    }<br>  }<br>})<br></code></pre></td></tr></table></figure><p>And for the Nuxt part:</p><ul><li>create a <code>middleware/handle-server-errors.js</code> file</li><li>reference it in the <code>nuxt.config.js</code></li></ul><figure class="highlight js"><figcaption><span>10-nuxt-error-middleware.js</span><a href="/downloads/code/13-koa-nuxt/10-nuxt-error-middleware.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">nuxtContext</span>) </span>{<br>  <span class="hljs-keyword">const</span> { req, error } = nuxtContext<br>  <span class="hljs-keyword">if</span> (process.client) <span class="hljs-keyword">return</span><br>  <span class="hljs-comment">// here we catch the error send by the server</span><br>  <span class="hljs-keyword">if</span> (!req.serverError) <span class="hljs-keyword">return</span><br>  <span class="hljs-comment">// calling the error function will render the error layout</span><br>  error({<br>    statusCode: req.error.statusCode || <span class="hljs-number">500</span>,<br>    message: req.error.message || <span class="hljs-string">`a fatal error as occurred`</span>,<br>  })<br>}<br></code></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Making Nuxt working with Koa isn’t as smooth as with Express.<br>Still I prefer <a href="/en/2018/07-from-express-to-koa/" title="working with Koa">working with Koa</a>, and with a little more boilerplate everything’s fine.</p><p>I’m sure there is room for improvements, but it’s working for me.<br>The downside is mainly more boilerplate code and handling session updates manually.</p><p><em>Most of the code here isn’t necessary if</em></p><ul><li>you just want some basic server rendering</li><li>you don’t need to support any kind of session</li></ul><p><em>Supporting asynchronous code should be easy</em></p><ul><li>Koa is build around that</li><li><a href="https://nuxtjs.org/guide/vuex-store#the-nuxtserverinit-action">nuxtServerInit</a> supports <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function">async function</a></li><li>the same goes for <a href="https://nuxtjs.org/guide/routing#middleware">Nuxt middleware</a></li></ul><p>As a reminder you can find a full example <a href="https://github.com/Hiswe/koa-nuxt-example">here</a></p><p>💚 <em>Nuxt</em> 💙 <em>KOA</em></p>]]></content>
    
    
    <summary type="html">How we can integrate Nuxt in a Koa server</summary>
    
    
    
    <category term="web" scheme="https://hiswe.github.io/categories/web/"/>
    
    
    <category term="advanced" scheme="https://hiswe.github.io/tags/advanced/"/>
    
    <category term="vue" scheme="https://hiswe.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Going Vue with Nuxt</title>
    <link href="https://hiswe.github.io/en/2018/12-vue-with-nuxt/"/>
    <id>https://hiswe.github.io/en/2018/12-vue-with-nuxt/</id>
    <published>2018-09-19T16:56:58.000Z</published>
    <updated>2021-04-25T10:07:36.810Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><a href="https://vuejs.org/">Vue.js</a> is a solid option for building web applications.<br>To use it we have two major tools:</p><ul><li><a href="https://cli.vuejs.org/">Vue CLI 3</a> <em>the Standard Tooling for Vue.js Development</em><br>The official solution to quickly setup a Vue application.</li><li><a href="https://nuxtjs.org/">Nuxt</a> <em>Universal Vue.js Applications</em><br>Yeah, we will talk about that.</li></ul><p>But how dœs Nuxt differ from a Standard Vue Application?</p><p><strong><code>[TL;DR]</code></strong></p><ul><li>A different tool to setup your Vue application</li><li>Some <a href="https://en.wikipedia.org/wiki/Convention_over_configuration">convention over configuration</a></li><li>The ability to move from a <a href="https://en.wikipedia.org/wiki/Single-page_application">Single-page application (SPA)</a> to a <a href="http://www.acuriousanimal.com/2016/08/10/universal-applications.html">Universal Web application</a></li></ul><span id="more"></span><p><strong><code>[UPDATE]</code></strong> use now <a href="https://github.com/nuxt/nuxt.js/releases/tag/v2.0.0">Nuxt 2</a></p><h3 id="installation"><a href="#installation" class="headerlink" title="installation"></a>installation</h3><p>There’s <a href="https://nuxtjs.org/guide/installation">two ways</a> Nuxt can be installed:</p><ul><li>with vue-cli</li><li>a basic <code>npm install nuxt</code> or <code>yarn add nuxt</code> if you’re a <a href="https://yarnpkg.com/en/">yarn</a> person, create some folders and add some modules if you want to <a href="https://nuxtjs.org/faq/pre-processors#how-to-use-pre-processors-">use pre-processors</a></li></ul><p>I prefer the latter one as it doesn’t rely on any global dependency… and it’s also a good way to integrate Nuxt to an existing project.</p><p>For a web application, I always add:</p><ul><li><a href="https://router.vuejs.org/guide/">Vue Router</a></li><li><a href="https://vuex.vuejs.org/guide/">Vuex Store</a></li><li><a href="https://kazupon.github.io/vue-i18n/">Vue I18N</a></li></ul><p>I’m 100% sure that at one point or another I will need them.</p><p>Having the internationalization being done as soon as possible doesn’t demand a lot of extra efforts and prevents me the boring task of including it later (going file by file and adding the i18n calls &amp; keys…)</p><h3 id="application-structure"><a href="#application-structure" class="headerlink" title="application structure"></a>application structure</h3><p>Vue doesn’t enforce any kind of structure but we all like &amp; need to stay organized.</p><p>If you use Vue CLI, it will create this kind of structure:</p><ul><li>vue.config.js <code>vue configuration</code></li><li>📁 src<ul><li>main.js <code>your application&#39;s entry point</code></li><li>router.js <code>configuring routes</code></li><li>App.vue <code>main Vue component</code></li><li>📁 assets <code>all static files</code></li><li>📁 components <code>other vue components</code></li><li>📁 views <code>your pages&#39; components</code></li><li>📁 store<ul><li>index.js <code>your Vuex Store</code></li></ul></li></ul></li></ul><p>Nuxt will require something <a href="https://nuxtjs.org/guide/directory-structure">like that</a>:</p><ul><li>nuxt.config.js <code>nuxt configuration</code></li><li>📁 static <code>all static files</code></li><li>📁 pages <code>all page files</code></li><li>📁 layouts <code>all layouts files</code> (a nuxt thingy thing that we will speak about later)</li><li>📁 store <code>your Vuex Store</code></li><li>📁 plugins <a href="https://vuejs.org/v2/guide/plugins.html#Using-a-Plugin">Vue plugins</a></li></ul><p>It’s a flatter structure with obvious names.</p><figure class="image-container">  <img src="/en/2018/12-vue-with-nuxt/structure.svg" class="" width="600" height="285" title="Comparison between Vue &amp; Nuxt file structure " alt="Comparison between Vue &amp; Nuxt file structure">  <figcaption class="image-container__caption">I ❤️ folders</figcaption></figure><h3 id="commands"><a href="#commands" class="headerlink" title="commands"></a>commands</h3><p>Both Vue CLI &amp; Nuxt propose a bunch of useful commands.<br>I’ll just speak about the main ones. They both serve the same purpose:</p><ul><li>make a quick development server to start coding</li><li>build for production</li></ul><p>Vue CLI use <a href="https://cli.vuejs.org/guide/cli-service.html">vue-cli-service</a> which is a local package to launch the magic.</p><ul><li><code>vue-cli-service serve</code> development server</li><li><code>vue-cli-service build</code> build for production</li></ul><p>Nuxt has the equivalent <a href="https://nuxtjs.org/guide/commands">commands</a>.<br>No need to install an additional module 👍</p><ul><li><code>nuxt</code> development server</li><li><code>nuxt build</code> build for production</li></ul><p>I usually make the same <a href="https://docs.npmjs.com/misc/scripts">npm scripts</a> aliases across all my projects:</p><figure class="highlight json"><figcaption><span>01-npm-script.json</span><a href="/downloads/code/12-vue-with-nuxt/01-npm-script.json">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">{<br>  <span class="hljs-attr">&quot;scripts&quot;</span>: {<br>    <span class="hljs-attr">&quot;dev&quot;</span>: <span class="hljs-string">&quot;nuxt&quot;</span>,<br>    <span class="hljs-attr">&quot;build&quot;</span>: <span class="hljs-string">&quot;nuxt build&quot;</span><br>  }<br>}<br></code></pre></td></tr></table></figure><p>After that, I can do <code>yarn dev</code> to start coding &amp; <code>yarn build</code> to export.<br>Those commands will stay independent of whatever the application is using underneath.</p><h2 id="Small-Nuxt-overview"><a href="#Small-Nuxt-overview" class="headerlink" title="Small Nuxt overview"></a>Small Nuxt overview</h2><p>Nuxt relies in some part on <em>convention over configuration</em>.<br>By creating files, Nuxt will take care of integrating them in your Vue application’s.</p><p>Here are the main domains where it shines.</p><h3 id="routing"><a href="#routing" class="headerlink" title="routing"></a>routing</h3><p>In a standard Vue application you’ll need to manually configure the router.<br>This is how the <code>router.js</code> usually looks like:</p><figure class="highlight js"><figcaption><span>02-vue-router.js</span><a href="/downloads/code/12-vue-with-nuxt/02-vue-router.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> Router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./views/Home.vue&#x27;</span><br><span class="hljs-keyword">import</span> NotFound <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./views/NotFound.vue&#x27;</span><br><br>Vue.use(Router)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Router({<br>  routes: [<br>    {<br>      path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      name: <span class="hljs-string">&#x27;home&#x27;</span>,<br>      component: Home,<br>    },<br>    {<br>      path: <span class="hljs-string">&#x27;/foo&#x27;</span>,<br>      name: <span class="hljs-string">&#x27;foo&#x27;</span>,<br>      <span class="hljs-comment">// needed for webpack&#x27;s code splitting</span><br>      component: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;foo&quot; */</span> <span class="hljs-string">&#x27;./views/Foo.vue&#x27;</span>),<br>    },<br>    {<br>      path: <span class="hljs-string">&#x27;/bar/:id&#x27;</span>,<br>      name: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>      component: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;bar&quot; */</span> <span class="hljs-string">&#x27;./views/Bar.vue&#x27;</span>),<br>    },<br>    {<br>      path: <span class="hljs-string">&#x27;*&#x27;</span>,<br>      component: NotFound,<br>    },<br>  ],<br>})<br></code></pre></td></tr></table></figure><p>This has some drawbacks when refactoring.<br>If you want to rename a route, you’ll have to:</p><ul><li>rename the component</li><li>modify the <code>router.js</code> file<ul><li>change the route name</li><li>change the component import</li><li>change the webpack chunk name</li></ul></li></ul><p>With Nuxt, this routing will look like this:</p><ul><li>📁 pages<ul><li>index.vue</li><li>foo.vue</li><li>📁 bar<ul><li>_id.vue</li></ul></li></ul></li></ul><p><strong>Renaming a route is now just changing a file/folder name.</strong><br>And you have the <strong>page code splitting out of the box.</strong></p><figure class="image-container">  <img src="/en/2018/12-vue-with-nuxt/routing.svg" class="" width="700" height="285" title="a Vue todo list longer than the Nuxt one " alt="a Vue todo list longer than the Nuxt one">  <figcaption class="image-container__caption">Who does not like todo lists?</figcaption></figure><h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><p>The same goes with a standard Vuex store:</p><figure class="highlight js"><figcaption><span>03-vuex-store.js</span><a href="/downloads/code/12-vue-with-nuxt/03-vuex-store.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> Vuex <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> foo <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./foo&#x27;</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> bar <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./bar&#x27;</span><br><br>Vue.use(Vuex)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Vuex.Store({<br>  modules: {<br>    foo,<br>    bar,<br>  },<br>  plugins: [],<br>})<br></code></pre></td></tr></table></figure><p>And as you’ve guessed in Nuxt it just follows the same principles as for the routing:</p><ul><li>📁 store<ul><li>foo.js</li><li>bar.js</li></ul></li></ul><p>With the same advantages as the routing.<br>Still, there is a <a href="https://nuxtjs.org/guide/vuex-store#classic-mode">classic mode</a> if you want to have more control over it.</p><h3 id="a-note-on-layouts"><a href="#a-note-on-layouts" class="headerlink" title="a note on layouts"></a>a note on layouts</h3><p>Nuxt provides a way to handle <a href="https://nuxtjs.org/guide/views#layouts">many page layouts</a> in a breeze.</p><p>I think most of the time you’ll stick with the basic:</p><ul><li><code>layouts/default.vue</code></li><li><code>layouts/error.vue</code></li></ul><p>If you want to achieve this in a regular Vue application, you’ll have to do it manually by wrapping every page components inside the desired layout component… which will bloat a little bit your code.</p><p>So <em>not a must have</em> but definitively a nice addition 🏅.</p><h3 id="plugins-like-vue-I18N"><a href="#plugins-like-vue-I18N" class="headerlink" title="plugins (like vue I18N)"></a>plugins (like vue I18N)</h3><p>Integrating more things from the Vue ecosystem is similar to what it is in a standard Vue application.</p><p>This is well <a href="https://nuxtjs.org/guide/plugins">documented here</a>.</p><p>For example, create a <code>i18n.js</code> file in the <code>plugin</code> folder…</p><figure class="highlight js"><figcaption><span>04-nuxt-plugin.js</span><a href="/downloads/code/12-vue-with-nuxt/04-nuxt-plugin.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> VueI18n <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-i18n&#x27;</span><br><br><span class="hljs-keyword">import</span> { en, fr } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;~/locales&#x27;</span><br><br>Vue.use(VueI18n)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> nuxtContext =&gt; {<br>  <span class="hljs-keyword">const</span> { app } = nuxtContext<br>  app.i18n = <span class="hljs-keyword">new</span> VueI18n({<br>    fallbackLocale: <span class="hljs-string">`en`</span>,<br>    messages: { en, fr },<br>  })<br>}<br></code></pre></td></tr></table></figure><p>…and update the <code>nuxt.config.js</code>…</p><figure class="highlight js"><figcaption><span>05-nuxt-config.js</span><a href="/downloads/code/12-vue-with-nuxt/05-nuxt-config.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Nuxt 2 use ESM modules</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {<br>  plugins: [<br>    <span class="hljs-comment">// reference my plugin, so Nuxt will load it</span><br>    <span class="hljs-string">`@/plugins/i18n.js`</span>,<br>  ],<br>}<br></code></pre></td></tr></table></figure><p>…and you can use <code>$t(&#39;my-i18n0key&#39;)</code> inside your app!</p><p>As for now, Nuxt doesn’t support a <code>convention over configuration</code> pattern for plugins’ integration 😐 so you’ll have to write some boilerplate code.<br>On the bright side this code is unlikely to change in the future.</p><p><strong>But what in fact looks like an unnecessary configuration serves in fact a very important purpose.</strong></p><p>Nuxt allows us to build <code>universal web applications</code>.<br>This means that it should be able to bundle your code:</p><ul><li>for the browser</li><li>for the server</li></ul><p>If you’re only targeting the browser (SPA), you don’t have to worry about it.<br><strong>But if you’re running the code on the server, you don’t want it to break because of the use of some browser API</strong>.</p><figure class="image-container">  <img src="/en/2018/12-vue-with-nuxt/node-error.svg" class="" width="300" height="240" title="Node.js being killed by window " alt="Node.js being killed by window">  <figcaption class="image-container__caption">window killed me!</figcaption></figure><p>Nuxt prevents that with a <a href="https://nuxtjs.org/guide/plugins#client-side-only">small additional configuration</a>.</p><figure class="highlight js"><figcaption><span>06-nuxt-config-ssr.js</span><a href="/downloads/code/12-vue-with-nuxt/06-nuxt-config-ssr.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {<br>  plugins: [<br>    <span class="hljs-string">`@/plugins/i18n.js`</span>,<br>    <span class="hljs-comment">// remove Server Side Rendering (SSR) from this specific file</span><br>    { <span class="hljs-attr">src</span>: <span class="hljs-string">`@/plugins/browser.js`</span>, <span class="hljs-attr">ssr</span>: <span class="hljs-literal">false</span> },<br>  ],<br>}<br></code></pre></td></tr></table></figure><p>Now <code>browser.js</code> will be removed from the server bundle, and we’re assured that our code won’t <code>throw</code> because of a missing <code>window</code> object in the NodeJs environment 😅</p><h2 id="Prototyping-amp-evolution"><a href="#Prototyping-amp-evolution" class="headerlink" title="Prototyping &amp; evolution"></a>Prototyping &amp; evolution</h2><figure class="image-container">  <img src="/en/2018/12-vue-with-nuxt/evolution.svg" class="" width="650" height="285" title="a people playing blocks until he build a castle " alt="a people playing blocks until he build a castle">  <figcaption class="image-container__caption">that escalated quickly</figcaption></figure><p>In my opinion the main advantage of Nuxt is how convenient it is to make a small prototype and build upon it until a first result.<br>While being sure that we can make it evolve in any direction in the future.</p><h3 id="single-page-application"><a href="#single-page-application" class="headerlink" title="single page application"></a>single page application</h3><p>Writing a SPA makes you able to build quite quickly a small app and give anyone the opportunity to play with it in almost real conditions.</p><p>You can make a simple static API by putting some JSON files inside the <code>static</code> folder and you can persist your application’s state by using the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Storage/LocalStorage">local storage api</a> with <a href="https://www.npmjs.com/package/vuex-persistedstate">vuex-persistedstate</a></p><p>Hosting solutions like <a href="https://firebase.google.com/">firebase</a>, <a href="https://www.netlify.com/">netlify</a> or <a href="https://pages.github.com/">github pages</a> provide a way to share your application for a free cost.</p><h3 id="Universal-Web-Application"><a href="#Universal-Web-Application" class="headerlink" title="Universal Web Application"></a>Universal Web Application</h3><p>And now that you’re satisfied with your prototype, you can push it further by integrating it to a Node server.<br>Nuxt provides some templates to see how integration works many frameworks:</p><ul><li><a href="https://github.com/nuxt-community/express-template">express template</a></li><li><a href="https://github.com/nuxt-community/koa-template">koa template</a></li></ul><p>I’ll use Koa 🐨</p><p>In a <code>server/index.js</code> file:</p><figure class="highlight js"><figcaption><span>07-nuxt-koa.js</span><a href="/downloads/code/12-vue-with-nuxt/07-nuxt-koa.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Koa <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;koa&#x27;</span><br><span class="hljs-keyword">import</span> Router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;koa-router&#x27;</span><br><span class="hljs-keyword">import</span> koaBody <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;koa-body&#x27;</span><br><span class="hljs-keyword">import</span> { Nuxt, Builder } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nuxt&#x27;</span><br><br><span class="hljs-keyword">import</span> config <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../nuxt.config.js&#x27;</span><br><br>startServer()<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startServer</span>(<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Koa()<br>  <span class="hljs-keyword">const</span> HOST = process.env.HOST || <span class="hljs-string">`127.0.0.1`</span><br>  <span class="hljs-keyword">const</span> PORT = process.env.PORT || <span class="hljs-number">3000</span><br><br>  app.use(<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleError</span>(<span class="hljs-params">ctx, next</span>) </span>{<br>    <span class="hljs-keyword">try</span> {<br>      <span class="hljs-keyword">await</span> next()<br>    } <span class="hljs-keyword">catch</span> (err) {<br>      ctx.status = err.statusCode || err.status || <span class="hljs-number">500</span><br>      ctx.body = err<br>    }<br>  })<br><br>  <span class="hljs-comment">//----- integrate a server API</span><br><br>  <span class="hljs-keyword">const</span> apiRouter = <span class="hljs-keyword">new</span> Router({ <span class="hljs-attr">prefix</span>: <span class="hljs-string">`/api`</span> })<br><br>  apiRouter.get(<span class="hljs-string">`/foo`</span>, <span class="hljs-keyword">async</span> ctx =&gt; {<br>    ctx.body = { <span class="hljs-attr">foo</span>: <span class="hljs-string">`foo nuxt example`</span> }<br>  })<br>  apiRouter.get(<span class="hljs-string">`/bar/:id`</span>, <span class="hljs-keyword">async</span> ctx =&gt; {<br>    <span class="hljs-keyword">const</span> { id } = req.params<br>    ctx.body = { <span class="hljs-attr">bar</span>: <span class="hljs-string">`bar <span class="hljs-subst">${id}</span>`</span> }<br>  })<br>  apiRouter.post(<span class="hljs-string">`/bar/:id`</span>, koaBody(), <span class="hljs-keyword">async</span> ctx =&gt; {<br>    <span class="hljs-keyword">const</span> { id } = req.params<br>    ctx.body = { <span class="hljs-attr">bar</span>: <span class="hljs-string">`bar <span class="hljs-subst">${id}</span> is updated!`</span> }<br>  })<br><br>  app.use(apiRouter.routes())<br>  app.use(apiRouter.allowedMethods())<br><br>  <span class="hljs-comment">//----- NUXT</span><br><br>  config.dev = !(app.env === <span class="hljs-string">`production`</span>)<br><br>  <span class="hljs-comment">// Instantiate nuxt.js</span><br>  <span class="hljs-keyword">const</span> nuxt = <span class="hljs-keyword">new</span> Nuxt(config)<br><br>  <span class="hljs-comment">// Build in development</span><br>  <span class="hljs-keyword">if</span> (config.dev) {<br>    <span class="hljs-keyword">const</span> builder = <span class="hljs-keyword">new</span> Builder(nuxt)<br>    <span class="hljs-keyword">await</span> builder.build()<br>  }<br><br>  app.use(<span class="hljs-function"><span class="hljs-params">ctx</span> =&gt;</span> {<br>    ctx.status = <span class="hljs-number">200</span><br>    ctx.respond = <span class="hljs-literal">false</span><br>    ctx.req.ctx = ctx<br>    nuxt.render(ctx.req, ctx.res)<br>  })<br><br>  app.listen(PORT, HOST, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">endInit</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`APP Server is listening on <span class="hljs-subst">${HOST}</span>:<span class="hljs-subst">${PORT}</span>`</span>)<br>  })<br>}<br></code></pre></td></tr></table></figure><p>In the <code>package.json</code> you should update your scripts:</p><figure class="highlight json"><figcaption><span>08-server-script.json</span><a href="/downloads/code/12-vue-with-nuxt/08-server-script.json">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">{<br>  <span class="hljs-attr">&quot;scripts&quot;</span>: {<br>    <span class="hljs-attr">&quot;dev&quot;</span>: <span class="hljs-string">&quot;backpack dev&quot;</span>,<br>    <span class="hljs-attr">&quot;build&quot;</span>: <span class="hljs-string">&quot;nuxt build &amp;&amp; backpack build&quot;</span>,<br>    <span class="hljs-attr">&quot;start&quot;</span>: <span class="hljs-string">&quot;yarn build &amp;&amp; yarn serve&quot;</span>,<br>    <span class="hljs-attr">&quot;serve&quot;</span>: <span class="hljs-string">&quot;cross-env NODE_ENV=production node build/main.js&quot;</span><br>  }<br>}<br></code></pre></td></tr></table></figure><p>You will need to update a little bit your existing code</p><ul><li>Take care of your store’s actions to point to your new API.</li><li>use <a href="https://www.npmjs.com/package/backpack-core">backpack</a> to run/compile your server application.<br>This is mainly due to the fact that we’re using <a href="https://nodejs.org/dist/latest-v10.x/docs/api/esm.html">ES Modules</a> on the server, and that NodeJS isn’t still there.</li></ul><p>Besides that there isn’t much more to do.<br>Everything will work as expected.</p><h3 id="benefits-of-a-UWA"><a href="#benefits-of-a-UWA" class="headerlink" title="benefits of a UWA"></a>benefits of a UWA</h3><p>Building a Universal Web Application can seem unnecessary but it comes with some advantages:</p><ul><li>Better initial rendering time</li><li>Can make an application that works without browser Javascript<ul><li>I’m a believer of <a href="https://en.wikipedia.org/wiki/Progressive_enhancement">progressive enhancement</a></li><li>Android Chrome might run your site <a href="https://timkadlec.com/remembers/2018-09-06-chromes-noscript-intervention/">without Javascript</a></li></ul></li><li>Should have a better SEO (you can read more about SEO <a href="https://itnext.io/seo-friendly-spas-d3c461a56217">here</a>)</li></ul><p>If you want to read more about this subject you can check <a href="https://dev.to/stereobooster">Stereobooster’s</a> article about <a href="https://dev.to/stereobooster/server-side-rendering-or-ssr-what-is-it-for-and-when-to-use-it-2cpg">Server Side Rendering pros and cons</a>.</p><h2 id="And-also…"><a href="#And-also…" class="headerlink" title="And also…"></a>And also…</h2><p>This post isn’t an exhaustive list of what Nuxt can offer you.<br>Here’s a quick list of other things that it provides:</p><ul><li>out of the box <a href="https://nuxtjs.org/guide/views#html-head">HTML meta tags</a> with <a href="https://www.npmjs.com/package/vue-meta">vue-meta</a></li><li>out of the box <a href="https://nuxtjs.org/api/pages-transition">Page transitions</a></li><li>out of the box <a href="https://nuxtjs.org/api/configuration-loading">Loading Progress Bar</a></li><li>out of the box <a href="https://nuxtjs.org/api/">asyncData</a> &amp; <a href="https://nuxtjs.org/api/pages-fetch">fetch</a> hooks.<br>This gives a way to get async data on the server before rendering the markup</li><li>a good documentation</li><li>a great choice of <a href="https://github.com/nuxt-community/awesome-nuxt#official">modules</a> thanks to the nuxt community.<br>Those provide a good way to integrate some popular libraries (like <a href="https://github.com/nuxt-community/axios-module">Axios</a> for example)</li><li>etc.</li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Nuxt doesn’t have a beautiful GUI 😶 but it’s a very clever piece of code that makes me feel more productive while building a website or an application.</p><p>I’ve made a <a href="https://github.com/Hiswe/nuxt-universal-application">small demo repository</a> with almost the same code as used in this post.</p><p>If you want to learn more, here are some useful links I’ve came across recently:</p><ul><li><a href="https://zendev.com/2018/09/17/frontend-architecture-lessons-from-nuxt-js.html">7 Frontend Architecture Lessons From Nuxt.js</a> by <a href="https://zendev.com/authors/kball.html">Kevin Ball</a><br>A good analysis on how Nuxt can help you</li><li><a href="https://medium.com/vue-mastery/10-reasons-to-use-nuxt-js-for-your-next-web-application-522397c9366b">10 reasons to use Nuxt.js for your next web application</a> by <a href="https://medium.com/@dericksozo">Derick Sozo</a><br>Another analysis about the strong points of nuxt</li><li><a href="https://medium.com/@koreus/vue-js-there-and-back-again-in-1-5-years-756c1582aa96">Vue.js — There and Back Again in 1.5 years</a> by <a href="https://medium.com/@koreus">Coreus</a>.<br>It’s not about nuxt, but it talks about living in the long term with a Vue Application.<br>There is also a small part about <a href="https://medium.com/@koreus/vue-js-there-and-back-again-in-1-5-years-756c1582aa96#5aea">component/views folder structure</a> that resonates with what I’m talking about.</li><li>A <a href="https://github.com/nuxt-community/awesome-nuxt#tutorials">list of tutorials</a> gathered by <a href="https://github.com/nuxt-community">Nuxt community</a></li></ul><p>So if you’re using Vue, you might want to try Nuxt.</p>]]></content>
    
    
    <summary type="html">why use nuxt instead of “vanilla” Vue</summary>
    
    
    
    <category term="web" scheme="https://hiswe.github.io/categories/web/"/>
    
    
    <category term="advanced" scheme="https://hiswe.github.io/tags/advanced/"/>
    
    <category term="vue" scheme="https://hiswe.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>testing the parcel bundler with vue</title>
    <link href="https://hiswe.github.io/en/2018/11-parcel-with-vue/"/>
    <id>https://hiswe.github.io/en/2018/11-parcel-with-vue/</id>
    <published>2018-07-29T16:10:23.000Z</published>
    <updated>2021-04-25T10:07:36.808Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In this era of libraries needing a build step <small>(even if you can use them without it, c’mon it’s better to do so)</small> I want to talk about the <a href="https://parceljs.org/">parcel bundler</a>.</p><p>The baseline is: <strong>Blazing fast, zero configuration web application bundler</strong>.</p><p>How this holds up?</p><span id="more"></span><h2 id="The-history-of-bundling"><a href="#The-history-of-bundling" class="headerlink" title="The history of bundling"></a>The history of bundling</h2><p>I feel like it’s important to know from where we came before talking about what Parcel is trying to solve.</p><p>That’s my personal take about how we get there 🤓</p><ol><li> In the beginning, bundling wasn’t a thing: just reference javascript/CSS files in your HTML and you were done (the good ol’days in a way (but damn I hated IE6))</li><li> Then we began to take care of file sizes and we <a href="https://en.wikipedia.org/wiki/Minification_(programming)" title="" target="">minified them</a> with non-JS tools (<a href="https://developers.google.com/closure/compiler/">Google Clojure compiler</a> for example)</li><li> Then we began to use <a href="https://drupalize.me/videos/what-css-preprocessor?p=1175">CSS preprocessor</a> which add a lot of handy stuff (mainly variables, selector nesting &amp; import) with non-JS tools (<a href="https://sass-lang.com/ruby-sass">Ruby-Sass</a> for example)</li><li> Then <a href="https://nodejs.org/en/">node.js</a> came and we used its UNLIMITED POWER ⚡️ to handle dependencies &amp; tooling</li><li>Then <a href="http://browserify.org/">Browserify</a> came and we began to bundle our Javascript that way:<br> better dependencies management and the possibility to split our JS code in multiple files</li><li>Then building tools like <a href="https://gruntjs.com/">Grunt</a> or <a href="https://gulpjs.com/">Gulp</a> let us coordinate all those build step together.<br> It staid that way a couple of time…</li><li>Then <a href="https://reactjs.org/">React</a> appeared.<br> Even if it was just one step further from previous frameworks (like <a href="http://backbonejs.org/">backbone</a> or <a href="https://angularjs.org/">angularJS</a>), the full component way of doing things made people want to bundle thing, not on a language basis, but on a component basis.</li><li>Thus <a href="https://webpack.js.org/">webpack</a> appeared.<br> Doing an amazing job with the drawback of a sometime tricky <a href="https://webpack.js.org/configuration/#options">configuration</a> (and the team is really pushing hard to solve this 💪).</li><li>Then appeared <a href="https://en.wikipedia.org/wiki/Command-line_interface">CLI</a> for each framework to simplify the use of webpack.<br> Tools configuring tools to use other tools.</li><li>And recently <strong>Parcel</strong> appeared with a <strong>no configuration promise</strong></li></ol><p>It’s not that we don’t like simple stuff anymore (no one likes build steps), it’s more that our needs <em>vs.</em> what the browser can natively do aren’t matching:</p><ul><li>no <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import">Javascript modules</a> until recently</li><li>no <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables">CSS variables</a> until recently</li><li>etc.</li><li>also things that will never land in browsers like:<ul><li><a href="https://reactjs.org/docs/introducing-jsx.html">JSX</a></li><li><a href="https://www.typescriptlang.org/">Typescript</a></li></ul></li></ul><p>And we still need to support legacy browsers.</p><p>I’m pretty sure it’s still every dev’s dream to use a thing that <em>just works</em> in every situation (<em>“building”</em> appeared in <a href="https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f">javascript</a> <a href="https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4">fatigue</a> posts quite often).</p><p>On a side note, the web-community is pushing forward for native tools.</p><p>After all:</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll">document.querySelectorAll</a> is just <a href="https://jquery.com/">jQuery</a>‘s idea natively implemented</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">JS arrow functions</a> is inspired by Coffeescript’s <a href="https://coffeescript.org/#functions">functions</a></li><li>JS modules, and CSS custom properties as talked before ⏪.</li></ul><p>Maybe <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components">Web Components</a> will be the native solution’s equivalent for React/Angular/Vue <small>(Even if I think they will stick because of how much other benefits they can provide)</small></p><h2 id="Why-bundling-vue"><a href="#Why-bundling-vue" class="headerlink" title="Why bundling vue"></a>Why bundling vue</h2><p>If we look at the <a href="https://vuejs.org/v2/guide/single-file-components.html#ad">vue’s single file component</a> we can see that:</p><ul><li><strong>Templates</strong> can be <a href="https://developer.mozilla.org/en-US/docs/Web/HTML">HTML</a> or <a href="https://pugjs.org/api/getting-started.html">Pug template</a></li><li><strong>Style</strong> can be <a href="https://developer.mozilla.org/en-US/docs/Web/CSS">CSS</a>, <a href="https://postcss.org/">PostCSS</a>, <a href="http://lesscss.org/">less</a>, <a href="https://sass-lang.com/">SASS/SCSS</a> or <a href="http://stylus-lang.com/">Stylus</a> with the support of <a href="https://vue-loader.vuejs.org/en/features/scoped-css.html">style scoping</a> or not</li><li><strong>Script</strong> can be <a href="https://developer.mozilla.org/en-US/docs/Web/javascript">Javascript</a> (with the support of the latest additions to the language with <a href="http://babeljs.io/">babel</a>) or <a href="https://www.typescriptlang.org/">typescript</a></li></ul><p>So it’s a good candidate for testing Parcel’s ability to bundle anything 😎</p><h2 id="Parcel"><a href="#Parcel" class="headerlink" title="Parcel"></a>Parcel</h2><p>There isn’t a lot of things to learn about Parcel.<br>They said <strong>simplicity</strong> and simplicity it is: look at how <a href="https://parceljs.org/cli.html#options">little options</a> there are!</p><p>Mainly (copied &amp; trimmed from the official doc):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> options = &#123;<br>  outDir: <span class="hljs-string">&quot;./dist&quot;</span>, <span class="hljs-comment">// The out directory to put the build files in, defaults to dist</span><br>  outFile: <span class="hljs-string">&quot;index.html&quot;</span>, <span class="hljs-comment">// The name of the outputFile</span><br>  publicUrl: <span class="hljs-string">&quot;./&quot;</span>, <span class="hljs-comment">// The url to server on, defaults to dist</span><br>  target: <span class="hljs-string">&quot;browser&quot;</span> <span class="hljs-comment">// browser/node/electron, defaults to browser</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>That’s it.</p><p>I hope you’re not afraid of the void 🌑.</p><h2 id="Main-use"><a href="#Main-use" class="headerlink" title="Main use"></a>Main use</h2><p>Just specify an entry file (either HTML, JS or CSS) and it will crawl all its dependencies and bundle them.<br>That’s it.</p><p>You may have to install other <a href="https://www.npmjs.com/">NPM packages</a> by I’ve found that Parcel tries to <a href="https://parceljs.org/hmr.html#automagically-installed-dependencies">install some of them for you</a>. That’s such a good idea!</p><p>Also being able to run a <a href="https://parceljs.org/hmr.html">Hot Module Replacement</a> server in development is quick way to start coding a web-application.</p><h2 id="Transform-configuration"><a href="#Transform-configuration" class="headerlink" title="Transform configuration"></a>Transform configuration</h2><p>Parcel will pass down some configuration to the tools that it uses under the hood:</p><ul><li><a href="https://parceljs.org/transforms.html#babel">.babelrc</a> for babel</li><li><a href="https://parceljs.org/transforms.html#posthtml">.posthtmlrc</a> for post html</li><li>etc.</li></ul><p>This can lead to some <a href="https://github.com/parcel-bundler/parcel/issues/1103#issuecomment-406483009">strange issues</a> sometimes…</p><p>Also be aware that as for now (august 2018) <a href="https://github.com/parcel-bundler/parcel/issues/868">Parcel relies on Babel 6</a> and not on <a href="https://www.npmjs.com/package/@babel/core/v/7.0.0-beta.55">Babel 7</a> (still on beta but working fine)</p><p>That’s a small common problem among the <em>“under the hood”</em> solutions (CLI included), you never know what’s going on before reading the <code>package.json</code> (or some github issues).</p><h2 id="Code-splitting"><a href="#Code-splitting" class="headerlink" title="Code splitting"></a>Code splitting</h2><p>Like every bundler, Parcel <a href="https://parceljs.org/code_splitting.html">supports it</a>.<br>They rely on <a href="https://github.com/tc39/proposal-dynamic-import">a future addition to the JS language</a> to do so.<br>As it is in <a href="https://tc39.github.io/process-document/">stage 3</a> the syntax won’t change in the future and it’s safe to use it now without thinking about refactoring due to specifications change after 👌</p><h2 id="Where-simplicity-breaks"><a href="#Where-simplicity-breaks" class="headerlink" title="Where simplicity breaks"></a>Where simplicity breaks</h2><p>I was able to set up a development vue application in an instant.<br>Every things that Vue supports seems to work seamlessly.</p><p>So that was a real time saver and a good entry point in Vue’s ecosystem.</p><p>But the <strong>promise of <em>“simplicity”</em> as some drawbacks:</strong></p><ul><li>when you have a problem it’s most likely you’ll have to wait for a new version</li><li>I had some problem with building &amp; minifying <code>.vue</code> files in production mode for example…</li></ul><p><strong>When building from an html file:</strong></p><ul><li>Parcel can’t simply ignore assets: a <code>manifest.webmanifest</code> file will be converted to <code>manifest.b01ff217.js</code>…</li><li><a href="https://github.com/parcel-bundler/parcel/issues/301">no PWA support</a>, and since every resource is parsed, you can’t include a PWA file generated by <a href="https://developers.google.com/web/tools/workbox/">workbox</a> (same as above)</li></ul><p>I resolved myself to:</p><ul><li>write a simple <code>html</code> file for the dev (it was my entry point)</li><li>write another production <code>html</code> file and shift my entry point to my JS file so that it doesn’t parse my HTML code</li></ul><h2 id="Things-I-didn’t-test"><a href="#Things-I-didn’t-test" class="headerlink" title="Things I didn’t test"></a>Things I didn’t test</h2><p>Bundling a node.js application with it.</p><p>It’s useful if you share a lot of code between the client &amp; the server and you want your server code to run as fast as possible.</p><p>There is a <a href="https://parceljs.org/cli.html#target">target</a> parameter for it. But I’m not sure if I can do variables or module replacement with it.</p><p>When I was building my <a href="/en/2018/08-universal-application/" title="universal web-application">universal web-application</a> (bad idea, don’t do it at home, use <a href="https://nextjs.org/">next.js</a> or <a href="https://nuxtjs.org/">nuxt</a>) I had to really refine my build configuration.<br>I don’t know if it would have been possible by using Parcel only.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p><strong>Parcel is very promising</strong> and very young.<br>The team is doing an amazing job ❤️ and is pushing the bundling step in a good direction: simple and working 🎉.</p><p><strong>I won’t advice it (yet) for big projects</strong>. I think, for now, frameworks’ CLI are more reliable.</p><p>BUT in the future, if I’ll be able to use the same simple bundle tool for all my projects I’ll go for it! (I’m a lazy 🐮 having to read yet another CLI doc isn’t my stuff).</p><p>I really hope they will keep up with the hard work of developing an ambitious open source projects like that.</p>]]></content>
    
    
    <summary type="html">how the “Blazing fast, zero configuration web application bundler” is keeping its promise</summary>
    
    
    
    <category term="nodejs" scheme="https://hiswe.github.io/categories/nodejs/"/>
    
    
    <category term="advanced" scheme="https://hiswe.github.io/tags/advanced/"/>
    
    <category term="vue" scheme="https://hiswe.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue, the webby framework</title>
    <link href="https://hiswe.github.io/en/2018/10-vue-the-webby-framework/"/>
    <id>https://hiswe.github.io/en/2018/10-vue-the-webby-framework/</id>
    <published>2018-07-27T16:15:01.000Z</published>
    <updated>2021-04-25T10:07:36.807Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Both <a href="https://reactjs.org/">React 16</a> &amp; <a href="https://vuejs.org/">Vue 2</a> are javascript libraries that solve the same issue: writing components which are kept in sync with your application’s state.</p><p>Having used both of them lately, here is my opinion on the main differences between them.</p><p>I’m not trying to convince anyone of which one is better here, but more to describe how comfortable I was while learning &amp; using them.<br>When it’s about making stuff, just choose your preferred tool <small>(if you have the choice of course)</small>.</p><p><strong><code>[TL;DR]</code></strong> Vue feels more <em>webby</em> and React more <em>tecky</em> <small>(If that means something 🙃)</small><br>And coming from a web-developer background, I feel using Vue is more natural for me.</p><span id="more"></span><h2 id="The-main-lib"><a href="#The-main-lib" class="headerlink" title="The main lib"></a>The main lib</h2><h3 id="building-considerations"><a href="#building-considerations" class="headerlink" title="building considerations"></a>building considerations</h3><p>Both those frameworks can be used by just dropping the JS file in your webpage and by starting using it!<br>That’s really great! (I mean it 👍)</p><p>That being said, using a <strong>compilation step makes it sure that you can use everything the library can provide</strong> (like <a href="https://vuejs.org/v2/guide/single-file-components.html">single file components</a> for Vue and <a href="https://reactjs.org/docs/introducing-jsx.html">JSX</a> for React)</p><p>Those libraries try their best to make things simple for the developers:</p><p><strong>If they say there is a better way to use their framework, you can trust them.</strong></p><p>Both provide an easy way to bundle your code without getting an headache:</p><ul><li><a href="https://github.com/facebook/create-react-app">create-react-app</a> for React</li><li><a href="https://www.npmjs.com/package/@vue/cli">@vue/cli</a> for Vue</li></ul><p>To use them, you just need to have <a href="https://nodejs.org/en/">Node.js</a> installed on your computer 🤖</p><p>If you want an independent &amp; still simple way to bundle them, you can try <a href="https://parceljs.org/">Parcel</a>.<br>I <a href="/en/2018/11-parcel-with-vue/" title="tested it">tested it</a> for my first side project with Vue and it was a real quick starter.</p><p>All this building intro gets us to…</p><h3 id="JSX-Vue-templates"><a href="#JSX-Vue-templates" class="headerlink" title="JSX/Vue templates"></a>JSX/Vue templates</h3><p>If you’re working in the web, you’ve probably heard of (or are using) them.</p><p>They are both a way to write a kind of HTML that will be compiled to Javascript.</p><p>This is how I will represent them on a JS/HTML scale:</p><figure class="image-container">  <img src="/en/2018/10-vue-the-webby-framework/jsx-vue-template.svg" class="" width="700" height="280" title="JSX&#x2F;Vue proximity with HTML " alt="JSX&#x2F;Vue proximity with HTML">  <figcaption class="image-container__caption">Don't need to be a javascript expert to write a Vue template</figcaption></figure><p>This is the same component written in:</p><h4 id="React’s-JSX"><a href="#React’s-JSX" class="headerlink" title="React’s JSX"></a>React’s JSX</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Foo</span>(<span class="hljs-params">props</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> componentClasses = [<span class="hljs-string">`foo`</span>];<br>  <span class="hljs-keyword">if</span> (props.secondary) componentClasses.push(<span class="hljs-string">`foo--secondary`</span>);<br>  <span class="hljs-keyword">if</span> (props.className) componentClasses.push(props.className);<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div className=&#123;componentClasses.join(<span class="hljs-string">` `</span>)&#125;&gt;<br>      &#123;props.bar &amp;&amp; <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;foo__bar&quot;</span>&gt;</span>&#123;props.bar&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span>&#125;<br>      &lt;ul className=<span class="hljs-string">&quot;foo__list&quot;</span>&gt;<br>        &#123;props.entries.map(<span class="hljs-function"><span class="hljs-params">entry</span> =&gt;</span> (<br>          &lt;li key=&#123;entry.id&#125;&gt;<br>            &lt;h6&gt;&#123;entry.title&#125;&lt;/h6&gt;<br>            &lt;p&gt;&#123;entry.content&#125;&lt;/p&gt;<br>          &lt;/li&gt;<br>        ))&#125;<br>      &lt;/ul&gt;<br>      &#123;props.children&#125;<br>    &lt;/div&gt;<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Vue-template"><a href="#Vue-template" class="headerlink" title="Vue template"></a>Vue template</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;&#123;foo: true, &#x27;foo--secondary&#x27;: secondary&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;bar&quot;</span>&gt;</span>&#123;&#123;bar&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;foo__list&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;entry in entries&quot;</span> <span class="hljs-attr">v-bind:key</span>=<span class="hljs-string">&quot;entry.id&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>&#123;&#123;entry.title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;entry.content&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>I found <a href="https://reactjs.org/docs/introducing-jsx.html">JSX</a> more difficult to read and write:</p><ul><li><a href="https://reactjs.org/docs/dom-elements.html#classname">Attributes are different</a> than their HTML counterpart (<code>className</code> for <code>class</code>, <a href="https://en.wikipedia.org/wiki/Camel_case">camelCase</a> attributes, etc.)</li><li>no build in <strong>support for setting/un-setting classes</strong> (I end up using the <a href="https://www.npmjs.com/package/classnames">classnames</a> module)</li><li>no build in support for <strong>passing down HTML classes</strong> from a parent to its child components</li><li>no build-in solutions for <strong>having many part/slot to fill</strong> (for a better explanation about what I’m talking about, read <a href="https://vuejs.org/v2/guide/components-slots.html">the Vue’s slot doc</a>)</li><li><strong>but most importantly design patterns</strong>: while learning React and writing JSX, I’ve found myself spending a lot of time learning how to write a clean conditional, what is a <a href="https://reactjs.org/docs/render-props.html#use-render-props-for-cross-cutting-concerns">render prop</a>, how you can <a href="https://hackernoon.com/do-more-with-less-using-render-props-de5bcdfbe74c">use</a> <a href="https://levelup.gitconnected.com/understanding-react-render-props-by-example-71f2162fd0f2">them</a>, what is a <a href="https://reactjs.org/docs/higher-order-components.html#use-hocs-for-cross-cutting-concerns">HOC</a> and how to <a href="https://medium.com/@toastui/a-deep-dive-into-the-react-hoc-1-fb431c131866">use</a> <a href="https://medium.com/@toastui/a-deep-dive-into-the-react-hoc-2-3e8ed18b848b">them</a>…</li><li>on a lower note, it’s a good thing to be able to use regular javascript in your template but:<ul><li>writing conditional is strange <code>&#123;props.bar &amp;&amp;…&#125;</code></li><li>I don’t like the look of the map function ending <code>))&#125;</code></li><li>…so yeah, it’s mainly purely aesthetic considerations 🌈</li></ul></li></ul><h4 id="Vue-with-JSX"><a href="#Vue-with-JSX" class="headerlink" title="Vue with JSX"></a>Vue with JSX</h4><p>But if JSX is your way to go, <a href="https://vuejs.org/v2/guide/render-function.html#JSX">Vue supports it!</a></p><h4 id="Vue-with-Pug"><a href="#Vue-with-Pug" class="headerlink" title="Vue with Pug"></a>Vue with Pug</h4><p>I’ve been using <a href="https://pugjs.org/api/getting-started.html">Pug</a> (<a href="https://github.com/pugjs/pug#rename-from-jade">ex-Jade</a>) template engine for a very long time now.<br>I’m still using it: I’m found of the simple syntax (I hate writing closing tags 😤).<br>It makes me write/refactor my markup quicker.</p><p>Being able to use it with Vue is a really nice addition!</p><h4 id="Root-node-handling"><a href="#Root-node-handling" class="headerlink" title="Root node handling"></a>Root node handling</h4><p>Both those frameworks need a <a href="https://vuejs.org/v2/guide/components.html#A-Single-Root-Element">single root element</a> for every components.</p><p>But React allows it <em>NOT</em> to be rendered, thanks to <a href="https://reactjs.org/docs/react-api.html#reactfragment">React.Fragment</a>.</p><p>That is a thing that I missed when working with Vue… even if it’s not that important (but I really like to keep my markup as simple as possible 🛁)</p><h2 id="Styling-components"><a href="#Styling-components" class="headerlink" title="Styling components"></a>Styling components</h2><p>Because it’s all markup, you can still make a global CSS file and include it on your application.<br>That will work.</p><p>But keeping your component styles near your component markup make a lot of sense:</p><ul><li>no need to go back and forth from a <code>style</code> folder</li><li>you have a better overview of your component style perimeter</li></ul><p>in React there are <a href="https://javascriptplayground.com/css-modules-webpack-react/">many</a>, <a href="https://github.com/tuchk4/awesome-css-in-js#libraries">many</a> solutions. I won’t address here the merit or not of CSS-in-JS.<br>My point is more: you have to choose one thing.</p><p>I went with importing a <a href="https://sass-lang.com/">SCSS</a> file in my components:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./foo.scss&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Foo</span>(<span class="hljs-params">props</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    &lt;dl className=<span class="hljs-string">&quot;foo&quot;</span>&gt;<br>      &lt;dt className=<span class="hljs-string">&quot;foo__title&quot;</span>&gt;foo&lt;/dt&gt;<br>      &lt;dd className=<span class="hljs-string">&quot;foo__content&quot;</span>&gt;bar&lt;/dd&gt;<br>    &lt;/dl&gt;<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>Vue provides a way to style from the same file with a <a href="https://vue-loader.vuejs.org/guide/scoped-css.html#deep-selectors">load of options</a> and supports <a href="https://developer.mozilla.org/en-US/docs/Web/CSS">vanilla CSS</a>, <a href="https://postcss.org/">PostCSS</a>, <a href="http://lesscss.org/">less</a>, <a href="https://sass-lang.com/">sass/scss</a> or <a href="http://stylus-lang.com/">Stylus</a> + <a href="https://vue-loader.vuejs.org/en/features/scoped-css.html">style scoping</a>.<br>Just write your CSS inside the <code>&lt;style /&gt;</code> element.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dl</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;foo&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;foo__title&quot;</span>&gt;</span>foo<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;foo__content&quot;</span>&gt;</span>bar<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><br>.foo &#123;<br><span class="css">  <span class="hljs-attribute">background</span>: white;</span><br><br>  &amp;__title &#123;<br><span class="css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2rem</span>;</span><br>  &#125;<br>  &amp;__content &#123;<br><span class="css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.5rem</span>;</span><br><span class="css">    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.5</span>;</span><br>  &#125;<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>I really like that: my styles are just sitting next to my markup 😎<br>And also <a href="https://vuejs.org/v2/guide/comparison.html#Component-Scoped-CSS">scoped styles</a> just works out of the box if you need them! ✨</p><h2 id="Components-logic"><a href="#Components-logic" class="headerlink" title="Components logic"></a>Components logic</h2><p>That’s the heart of every component.</p><h3 id="writing-Components"><a href="#writing-Components" class="headerlink" title="writing Components"></a>writing Components</h3><p>In React writing a component can take <a href="https://reactjs.org/docs/components-and-props.html#functional-and-class-components">2 forms</a>:</p><ul><li>functional component</li><li>Class component</li></ul><p>Class components can inherit from:</p><ul><li><a href="https://reactjs.org/docs/react-api.html#reactcomponent">React.Component</a></li><li><a href="https://reactjs.org/docs/react-api.html#reactpurecomponent">React.PureComponent</a></li></ul><p>There is a subtle difference between the two but I won’t go into details here.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(props)<br>    <span class="hljs-built_in">this</span>.state = &#123;<br>      counter: <span class="hljs-number">0</span>,<br>    &#125;<br>    <span class="hljs-comment">// we need to be sure that the context of handleClick</span><br>    <span class="hljs-comment">// won&#x27;t be change by the event handling</span><br>    <span class="hljs-built_in">this</span>.handleClick = <span class="hljs-built_in">this</span>.handleClick.bind(<span class="hljs-built_in">this</span>)<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">handleClick</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">// setState method is inherited</span><br>    <span class="hljs-comment">// and is asynchronous</span><br>    <span class="hljs-built_in">this</span>.setState(<span class="hljs-function">(<span class="hljs-params">prevState, props</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">counter</span>: prevState.counter + <span class="hljs-number">1</span>&#125;;<br>    &#125;);<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      &lt;div className=<span class="hljs-string">&quot;foo&quot;</span> onClick=&#123;<span class="hljs-built_in">this</span>.handleClick&#125;&gt;<br>        &#123;<span class="hljs-built_in">this</span>.state.counter&#125;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://vuejs.org/v2/guide/components.html">Vue components</a> are just JS objects with <a href="https://vuejs.org/v2/api/#Options-Data">many options</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;foo&quot;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;handleClick&quot;</span>&gt;</span><br>    &#123;&#123;counter&#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  name: <span class="hljs-string">`foo`</span>,</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> &#123;</span><br>      counter: 0<br>    &#125;;<br>  &#125;,<br>  methods: &#123;<br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">handleClick</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-built_in">this</span>.counter = <span class="hljs-built_in">this</span>.counter + <span class="hljs-number">1</span>;</span><br>    &#125;<br>  &#125;<br>&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>You won’t need to take care about bindings or <code>this</code> in your template, Vue will do it for you 😮<br>And they make <strong>updating the state as simple as assigning a value to the state object</strong> 😲 The one thing we have done since ever 🤤</p><p>It may look like more code to write, but I found it more obvious to read:<br>Need a computed property? write this in the <code>computed</code> key of your component</p><p>And if you’re a fan of <a href="https://vuejs.org/v2/guide/render-function.html#Functional-Components">functional components</a> Vue supports them.</p><h3 id="referencing-components"><a href="#referencing-components" class="headerlink" title="referencing components"></a>referencing components</h3><p>This may be the only thing that I found strange in Vue.</p><p>In React, referencing a component is just using a regular Javascript <code>import</code>:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;React&quot;</span>;<br><br><span class="hljs-keyword">import</span> Foo <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./foo&quot;</span>;<br><span class="hljs-keyword">import</span> Bar <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./bar&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Baz</span>(<span class="hljs-params">props</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div className=<span class="hljs-string">&quot;baz&quot;</span>&gt;<br>      &lt;p&gt;Hello Foo &amp; Bar!&lt;/p&gt;<br>      &lt;Foo /&gt;<br>      &lt;Bar /&gt;<br>    &lt;/div&gt;<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>in Vue JS you’ll have to <a href="https://vuejs.org/v2/guide/components-registration.html">register the components</a> in your application.</p><p>This can be done globally or locally.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">import</span> Foo <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./foo&quot;</span>;<br><br><span class="hljs-comment">// global registration</span><br>Vue.component(<span class="hljs-string">`foo`</span>, Foo);<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;baz&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello Foo &amp; Bar!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">foo</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">foo</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bar</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bar</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">import</span> Bar <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./bar&quot;</span>;</span><br><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  name: <span class="hljs-string">`baz`</span>,</span><br><span class="javascript">  <span class="hljs-comment">// register locally</span></span><br>  components: &#123;<br>    bar: Bar<br>  &#125;<br>&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>It kind of feels weird at first, but not having to import your UI components again and again can save you some time.</p><h2 id="Building-a-web-app"><a href="#Building-a-web-app" class="headerlink" title="Building a web-app"></a>Building a web-app</h2><p>Those libraries are mostly the <em>view part</em> in the <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">MV*</a> pattern.<br>They also support a state management per component (<a href="https://reactjs.org/docs/state-and-lifecycle.html">react state</a> &amp; <a href="https://vuejs.org/v2/guide/instance.html#Data-and-Methods">vue data</a>) which is very handy.<br>In this case, React comes with a little bit more with the help of <a href="https://reactjs.org/docs/context.html">react context</a>.<br>That allows you to share data across components in an elegant way.</p><p><strong>BUT</strong></p><p>Let’s be honest, you will quickly need (at least):</p><ul><li><strong>a router</strong>: for navigation</li><li><strong>a state manager</strong>: to centralize and manage your application’s state in a single source of truth (the application store)</li></ul><p>The React team doesn’t provide any of those &amp; won’t give you any advice about what to use.<br>But there are some popular options out there for that.<br><small>N.B. I didn’t make any real research about how popular they are, so that’s mostly my feeling… guess you’ll have to go with it even if I’m wrong 😐</small>.</p><p>On the contrary, the Vue team provides some official packages.<br>You still can use other packages but when learning, it’s a good thing to know that you can start with the official ones.</p><p><strong>So here’s my list of the most common solutions to fulfill those needs:</strong></p><ul><li><a href="https://reacttraining.com/react-router/">react-router</a>/<a href="https://router.vuejs.org/guide/">vue-router</a></li><li><a href="https://redux.js.org/">redux</a>/<a href="https://router.vuejs.org/guide/">vuex</a></li></ul><h3 id="routing"><a href="#routing" class="headerlink" title="routing"></a>routing</h3><p>They both work in a pretty straightforward way.</p><p>The main difference is that, if one of your React components needs to access the router, you’ll have to wrap them in the <a href="https://reacttraining.com/react-router/web/api/withRouter">withRouter function</a>.</p><p>In Vue the router will be available in every component (<a href="https://router.vuejs.org/api/#router-instance-methods">this.$router</a> &amp;&amp; <a href="https://router.vuejs.org/api/#the-route-object">this.$route</a>).<br>That’s one less thing to take care of.</p><h3 id="application-store"><a href="#application-store" class="headerlink" title="application store"></a>application store</h3><p>Redux is:</p><ul><li>framework agnostic ❤️</li><li>working only with <a href="https://www.sitepoint.com/immutability-javascript/">immutable data</a></li><li>very focused on what it’s doing (kind of not supporting <a href="https://redux.js.org/advanced/async-actions">asynchronous actions</a> out of the box. <small>possible though… just need to write more code than expected</small>)</li></ul><p>You can use it without installing more packages, but I find it better to use libraries to help me with that:</p><ul><li><a href="https://redux.js.org/basics/usage-with-react">react-redux</a> will make Redux play more nicely with React</li><li><a href="https://facebook.github.io/immutable-js/">immutable-js</a> prevents you from accidentally mutate your state</li><li><a href="https://github.com/reduxjs/redux-thunk">redux-thunk</a> handles async actions in a more friendly way</li></ul><p>So when you’re starting, that’s a lot to learn.</p><p>On the contrary, Vuex just handles all those things for you:</p><ul><li>already integrated with Vue</li><li>no need for immutable data</li><li>handle <a href="https://vuex.vuejs.org/guide/actions.html">async code</a></li></ul><h4 id="accessing-the-store-from-a-component"><a href="#accessing-the-store-from-a-component" class="headerlink" title="accessing the store from a component"></a>accessing the store from a component</h4><p>In React, passing properties can be made with <a href="https://reactjs.org/docs/higher-order-components.html">high order components</a><br>It’s the way that react-redux is sharing the state with your components.</p><p>I have found myself writing of lot of things like that:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; bindActionCreators &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;redux&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> actions <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./actions&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Foo</span>(<span class="hljs-params">props</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    &lt;button <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;foo&quot;</span> onClick=&#123;props.toggleStatus&#125;&gt;<br>      &#123;props.status&#125;<br>    &lt;/button&gt;<br>  );<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mapState2props</span>(<span class="hljs-params">state</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    status: state.status<br>  &#125;;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mapDispatch2props</span>(<span class="hljs-params">dispatch</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> bindActionCreators(<br>    &#123;<br>      toggleStatus: actions.toggleStatus<br>    &#125;,<br>    dispatch<br>  );<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> connect(<br>  mapState2props,<br>  mapDispatch2props<br>)(Foo);<br></code></pre></td></tr></table></figure><p>Whereas in Vue, the state is always accessible from any components:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;foo&quot;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;&#123;toggleStatus&#125;&quot;</span>&gt;</span><br>    &#123;&#123;status&#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  name: <span class="hljs-string">`foo`</span>,</span><br>  computed: &#123;<br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">status</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.state.status;</span><br>    &#125;<br>  &#125;,<br>  methods: &#123;<br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">toggleStatus</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-built_in">this</span>.$store.commit(<span class="hljs-string">`toggleStatus`</span>);</span><br>    &#125;<br>  &#125;<br>&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Vuex also provides helper functions to write this in a nicer way (<a href="https://vuex.vuejs.org/api/#mapstate">mapState</a> &amp; <a href="https://vuex.vuejs.org/api/#mapmutations">mapMutations</a> to name a few)</p><p>It’s two different ways of doing the same thing, but:</p><ul><li>I was happy to avoid writing the <code>connect boilerplate</code> thing anymore.</li><li>having a build-in way of handling async actions without searching for yet another module (should I use <a href="https://redux-saga.js.org/">redux-saga</a> instead of redux-thunk?).</li></ul><h2 id="A-note-on-documentation"><a href="#A-note-on-documentation" class="headerlink" title="A note on documentation"></a>A note on documentation</h2><p>React and Vue have a good documentation.</p><p>You need a little time to learn how React’s documentation is structured, but once you get it, it’s ok.</p><p>For Vue, I really don’t know how to explain this feeling but in a way I find it too complete 🤨.<br>All the options are scattered inside categories with sub-categories. So most of the time I just use the search field.<br>There’s the <a href="https://vuejs-tips.github.io/cheatsheet/">vue cheatsheet</a> that can helps, but I miss a big fat example with almost everything used.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>React is freedom. They just provide you a minimal thing that works perfectly for what it was created for.</p><p>You may have to:</p><ul><li>Learn a bunch of (useful) concepts like High Order Functions, Immutable, Render props…</li><li>Choose some of the many modules that will help you make your application</li><li>Learn how to use them</li><li>Tight them altogether</li></ul><p>Vue is more like: “Oh, you’re a web-developer, let’s write some HTML, CSS &amp; JS together”</p><ul><li>you feel familiar</li><li>writing a component logic is just writing a javascript object</li><li>the team provides some must-have modules</li><li>those modules integrate quickly in your application</li><li>…but you’re still free to<ul><li>find other modules</li><li>code the way you prefer</li></ul></li></ul><p>Again it isn’t about rating those libraries.<br>They are both carefully crafted by very skilled peoples and fulfill the same mission brilliantly.</p><p>But as a web-developer I like webby things… And for me, Vue feels like more webby, and less about coding patterns &amp; code philosophy.</p>]]></content>
    
    
    <summary type="html">A small overview of Vue compared to React</summary>
    
    
    
    <category term="web" scheme="https://hiswe.github.io/categories/web/"/>
    
    
    <category term="advanced" scheme="https://hiswe.github.io/tags/advanced/"/>
    
    <category term="react" scheme="https://hiswe.github.io/tags/react/"/>
    
    <category term="vue" scheme="https://hiswe.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>sub-queries in sequelize with squel</title>
    <link href="https://hiswe.github.io/en/2018/09-sequelize-subqueries-with-squel/"/>
    <id>https://hiswe.github.io/en/2018/09-sequelize-subqueries-with-squel/</id>
    <published>2018-05-27T08:48:58.000Z</published>
    <updated>2021-04-25T10:07:36.806Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>If you want to handle a SQL Database in <a href="https://nodejs.org/en/">NodeJS</a>, you may want to use <a href="http://docs.sequelizejs.com/">Sequelize</a>.</p><p>It’s a nice ORM with a promise based API that makes it easy to:</p><ul><li>defines models</li><li>defines relations between those models</li><li>retrieves those relations when accessing an instance.</li></ul><p>But I find it hard to handle <code>COUNT</code> and <code>SUM</code> functions inside instances even<br>after <a href="https://github.com/sequelize/sequelize/issues/222">reading issues, trying without success to find the Sequelize way®</a>.<br>Nothing was working for me 😭</p><p>And so this is the story of how I solved it with <a href="https://hiddentao.com/squel/">squel</a>, a SQL query generator</p><span id="more"></span><ul><li>Some knowledge into the sequelize API will really helps understanding this article 🤓</li><li>the server’s framework used is <a href="https://koajs.com/">Koa</a></li><li>I’ve put together a <a href="https://github.com/Hiswe/sequelize-example">little repository</a> containing a working example</li></ul><h2 id="the-database"><a href="#the-database" class="headerlink" title="the database"></a>the database</h2><h3 id="models"><a href="#models" class="headerlink" title="models"></a>models</h3><p>we will have 2 models:</p><ul><li>basket<ul><li>with a name</li></ul></li><li>items<ul><li>with a name</li><li>with a price</li></ul></li></ul><p><strong>A basket will have many items</strong></p><p>So let’s <a href="https://github.com/Hiswe/sequelize-example/blob/master/index.js#L59-L91">define our models using Sequelize</a>:</p><figure class="highlight js"><figcaption><span>01-database-configuration.js</span><a href="/downloads/code/09-sequelize-subqueries-with-squel/01-database-configuration.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> Sequelize = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;sequelize&quot;</span>);<br><br><span class="hljs-keyword">const</span> sequelize = <span class="hljs-keyword">new</span> Sequelize(<span class="hljs-string">`postgres://localhost:5432/sequelize-example`</span>);<br><br><span class="hljs-keyword">const</span> Basket = sequelize.define(<span class="hljs-string">`basket`</span>, {<br>  id: {<br>    type: Sequelize.UUID,<br>    defaultValue: Sequelize.UUIDV4,<br>    primaryKey: <span class="hljs-literal">true</span><br>  },<br>  name: {<br>    type: Sequelize.STRING<br>  }<br>});<br><br><span class="hljs-keyword">const</span> Item = sequelize.define(<span class="hljs-string">`item`</span>, {<br>  id: {<br>    type: Sequelize.UUID,<br>    defaultValue: Sequelize.UUIDV4,<br>    primaryKey: <span class="hljs-literal">true</span><br>  },<br>  name: {<br>    type: Sequelize.STRING<br>  },<br>  price: {<br>    type: Sequelize.FLOAT,<br>    allowNull: <span class="hljs-literal">false</span><br>  }<br>});<br><br>Item.Basket = Item.belongsTo(Basket);<br>Basket.Items = Basket.hasMany(Item);<br><br>sequelize.sync();<br></code></pre></td></tr></table></figure><h3 id="instances"><a href="#instances" class="headerlink" title="instances"></a>instances</h3><p>And we will need <a href="https://github.com/Hiswe/sequelize-example/blob/master/index.js#L125-L165">to define our instance</a>:</p><figure class="highlight js"><figcaption><span>02-instance-configuration.js</span><a href="/downloads/code/09-sequelize-subqueries-with-squel/02-instance-configuration.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">Basket.create(<br>  {<br>    name: <span class="hljs-string">`fruits`</span>,<br>    items: [<br>      {<br>        name: <span class="hljs-string">`apples`</span>,<br>        price: <span class="hljs-number">17.3</span><br>      },<br>      {<br>        name: <span class="hljs-string">`bananas`</span>,<br>        price: <span class="hljs-number">22.5</span><br>      }<br>    ]<br>  },<br>  {<br>    include: [Basket.Items]<br>  }<br>);<br></code></pre></td></tr></table></figure><h2 id="expected-result"><a href="#expected-result" class="headerlink" title="expected result"></a>expected result</h2><ul><li>the number of items inside the basket</li><li>the total price of the basket</li></ul><p>So something like this:</p><figure class="highlight json"><figcaption><span>03-expected-result.json</span><a href="/downloads/code/09-sequelize-subqueries-with-squel/03-expected-result.json">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">[<br>  {<br>    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-string">&quot;f0bf0e03-368b-405f-9434-4720efa2728f&quot;</span>,<br>    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;fruits&quot;</span>,<br>    <span class="hljs-attr">&quot;itemsCount&quot;</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">&quot;totalPrice&quot;</span>: <span class="hljs-number">39.8</span><br>  }<br>]<br></code></pre></td></tr></table></figure><h2 id="doing-this-server-side"><a href="#doing-this-server-side" class="headerlink" title="doing this server side"></a>doing this server side</h2><p>It should be quite simple:</p><ul><li>query the basket with his items</li><li>process everything to have the right information</li></ul><figure class="highlight js"><figcaption><span>04-server-processing.js</span><a href="/downloads/code/09-sequelize-subqueries-with-squel/04-server-processing.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">router.get(<span class="hljs-string">`/baskets`</span>, <span class="hljs-keyword">async</span> (ctx, next) =&gt; {<br>  <span class="hljs-keyword">const</span> baskets = <span class="hljs-keyword">await</span> Basket.findAll({<br>    include: [Basket.Items]<br>  });<br>  <span class="hljs-keyword">const</span> result = baskets.map(<span class="hljs-function"><span class="hljs-params">basket</span> =&gt;</span> {<br>    <span class="hljs-keyword">const</span> withCount = basket.toJSON();<br>    withCount.itemsCount = withCount.items.length;<br>    withCount.totalPrice = withCount.items.reduce(<br>      (total, item) =&gt; total + item.price,<br>      <span class="hljs-number">0</span><br>    );<br>    <span class="hljs-keyword">delete</span> withCount.items;<br>    <span class="hljs-keyword">return</span> withCount;<br>  });<br>  ctx.body = result;<br>});<br></code></pre></td></tr></table></figure><p>you can find the <a href="https://github.com/Hiswe/sequelize-example/blob/master/router.js#L20-L36">equivalent code in the demo</a>.</p><p>But it’s a work that can be done on the Database right?<br>So better doing it there.</p><h2 id="the-SQL-sub-query"><a href="#the-SQL-sub-query" class="headerlink" title="the SQL sub-query"></a>the SQL sub-query</h2><p>In order to have this done with our Database, we need Sequelize to generate something like this in the query:</p><figure class="highlight sql"><figcaption><span>05-sub-query.sql</span><a href="/downloads/code/09-sequelize-subqueries-with-squel/05-sub-query.sql">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">(<br>  <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">CAST</span>(<span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> <span class="hljs-type">int</span>)<br>  <span class="hljs-keyword">FROM</span> items <span class="hljs-keyword">AS</span> item<br>  <span class="hljs-keyword">WHERE</span> (&quot;item&quot;.&quot;basketId&quot; <span class="hljs-operator">=</span> &quot;basket&quot;.&quot;id&quot;)<br>) <span class="hljs-keyword">AS</span> &quot;itemsCount&quot;<br>(<br>  <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(&quot;item&quot;.&quot;price&quot;)<br>  <span class="hljs-keyword">FROM</span> items <span class="hljs-keyword">AS</span> item<br>  <span class="hljs-keyword">WHERE</span> (&quot;item&quot;.&quot;basketId&quot; <span class="hljs-operator">=</span> &quot;basket&quot;.&quot;id&quot;)<br>) <span class="hljs-keyword">AS</span> &quot;totalPrice&quot;<br></code></pre></td></tr></table></figure><p>We could have written this manually but we have NodeJS by our side, and its full ecosystem.</p><p>Se let’s go for <a href="https://www.npmjs.com/package/squel">squel</a> which does just this: write SQL in a more JS way.</p><h2 id="Interfacing-Squel-with-Sequelize"><a href="#Interfacing-Squel-with-Sequelize" class="headerlink" title="Interfacing Squel with Sequelize"></a>Interfacing Squel with Sequelize</h2><p>According <a href="http://docs.sequelizejs.com/manual/tutorial/querying.html#attributes">Sequelize documentation</a> this is how we can define custom attributes:</p><figure class="highlight js"><figcaption><span>06-sequelize-sub-queries-documentation-example.js</span><a href="/downloads/code/09-sequelize-subqueries-with-squel/06-sequelize-sub-queries-documentation-example.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">Model.findAll({<br>  attributes: {<br>    include: [[sequelize.fn(<span class="hljs-string">&quot;COUNT&quot;</span>, sequelize.col(<span class="hljs-string">&quot;hats&quot;</span>)), <span class="hljs-string">&quot;no_hats&quot;</span>]]<br>  }<br>});<br></code></pre></td></tr></table></figure><p>The main goal here will be to generate the right query for the computed attribute</p><h3 id="squel-configuration-amp-caveats"><a href="#squel-configuration-amp-caveats" class="headerlink" title="squel configuration &amp; caveats"></a>squel configuration &amp; caveats</h3><ul><li>we must configure squel to support postgres Database</li><li>even if there is a lot of <a href="https://hiddentao.com/squel/api.html#cls_defaultquerybuilderoptions">escaping options</a> <strong>I didn’t find one that cover all the use case</strong><br>Postgres will fail with <code>WHERE (item.basketId = basket.id)</code><br>→ we should format it like this <code>WHERE (&quot;item&quot;.&quot;basketId&quot; = &quot;basket&quot;.&quot;id&quot;)</code></li><li>enclose our result with parenthesis because Sequelize won’t do it for us<br>→ <code>(…our query) AS &quot;itemsCount&quot;</code></li></ul><p>All those can be done quite easily with a few helpers:</p><figure class="highlight js"><figcaption><span>07-squel-configuration.js</span><a href="/downloads/code/09-sequelize-subqueries-with-squel/07-squel-configuration.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// use the postgres flavour</span><br><span class="hljs-keyword">const</span> squel = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;squel&quot;</span>).useFlavour(<span class="hljs-string">&quot;postgres&quot;</span>);<br><br><span class="hljs-comment">// custom formatter</span><br><span class="hljs-keyword">const</span> fieldRegExp = <span class="hljs-regexp">/([a-zA-Z]*)\.([a-zA-Z]*)/g</span>;<br><span class="hljs-keyword">const</span> formatQuery = <span class="hljs-function"><span class="hljs-params">query</span> =&gt;</span> <span class="hljs-string">`(<span class="hljs-subst">${query.replace(fieldRegExp, <span class="hljs-string">`&quot;$1&quot;.&quot;$2&quot;`</span>)}</span>)`</span>;<br></code></pre></td></tr></table></figure><p>Minoring some slight differences this is the <a href="https://github.com/Hiswe/sequelize-example/blob/master/router.js#L42-L52">equivalent code in the demo</a>.</p><p>I’m using <a href="http://docs.sequelizejs.com/class/lib/sequelize.js~Sequelize.html#static-method-literal">Sequelize.static()</a> but I’m not sure it’s necessary. It just prevents Sequelize from escaping the query string.</p><h3 id="putting-things-together"><a href="#putting-things-together" class="headerlink" title="putting things together"></a>putting things together</h3><p>And that will be our final code:</p><figure class="highlight js"><figcaption><span>08-sequelize-with-squel.js</span><a href="/downloads/code/09-sequelize-subqueries-with-squel/08-sequelize-with-squel.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> COUNT_ITEMS = formatQuery(<br>  squel<br>    <span class="hljs-comment">// don&#x27;t use squel `autoQuoteAliasNames`</span><br>    .select({ <span class="hljs-attr">autoQuoteAliasNames</span>: <span class="hljs-literal">false</span> })<br>    <span class="hljs-comment">// force integer on count</span><br>    .field(<span class="hljs-string">`CAST(COUNT(*) AS int)`</span>)<br>    .where(<span class="hljs-string">`item.basketId = basket.id`</span>)<br>    .from(<span class="hljs-string">`items`</span>, <span class="hljs-string">`item`</span>)<br>    .toString()<br>);<br><br>router.get(<span class="hljs-string">`/baskets`</span>, <span class="hljs-keyword">async</span> (ctx, next) =&gt; {<br>  <span class="hljs-keyword">const</span> basket = <span class="hljs-keyword">await</span> Basket.findAll({<br>    attributes: {<br>      include: [[COUNT_ITEMS, <span class="hljs-string">`itemsCount`</span>]]<br>    }<br>  });<br>  ctx.body = basket;<br>});<br></code></pre></td></tr></table></figure><p>and the <a href="https://github.com/Hiswe/sequelize-example/blob/master/router.js#L54-L85">related part in the demo</a></p><h2 id="further-notes"><a href="#further-notes" class="headerlink" title="further notes"></a>further notes</h2><h3 id="find-our-WHERE-query"><a href="#find-our-WHERE-query" class="headerlink" title="find our WHERE query"></a>find our WHERE query</h3><p>I’m not a SQL expert so how to write our <code>WHERE</code> query?</p><ul><li>configure Sequelize to output the SQL queries in the console</li><li>make Sequelize fetch a model with his relations</li><li>look at your logs</li><li>copy/paste the interesting parts</li></ul><h3 id="build-a-sub-query-generator"><a href="#build-a-sub-query-generator" class="headerlink" title="build a sub-query generator"></a>build a sub-query generator</h3><p>Writing all the squel code can be cumbersome.<br>But we can just make a function that will do that for us:</p><figure class="highlight js"><figcaption><span>09-squel-generator.js</span><a href="/downloads/code/09-sequelize-subqueries-with-squel/09-squel-generator.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> createSubQuery = <span class="hljs-function">(<span class="hljs-params">{ field, model, relation }</span>) =&gt;</span> {<br>  <span class="hljs-keyword">const</span> query = squel<br>    .select({ <span class="hljs-attr">autoQuoteAliasNames</span>: <span class="hljs-literal">false</span> })<br>    .field(field)<br>    .where(<span class="hljs-string">`<span class="hljs-subst">${relation}</span>.<span class="hljs-subst">${model}</span>Id = <span class="hljs-subst">${model}</span>.id`</span>)<br>    .from(<span class="hljs-string">`<span class="hljs-subst">${relation}</span>s`</span>, relation)<br>    .toString();<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`(<span class="hljs-subst">${formatQuery(query)}</span>)`</span>;<br>};<br><br><span class="hljs-keyword">const</span> COUNT_ITEMS = subQuery({<br>  field: <span class="hljs-string">`CAST(COUNT(*) AS int)`</span>,<br>  model: <span class="hljs-string">`basket`</span>,<br>  relation: <span class="hljs-string">`item`</span><br>});<br><br><span class="hljs-keyword">const</span> SUM_ITEMS = subQuery({<br>  field: <span class="hljs-string">`SUM(item.price)`</span>,<br>  model: <span class="hljs-string">`basket`</span>,<br>  relation: <span class="hljs-string">`item`</span><br>});<br><br>router.get(<span class="hljs-string">`/baskets`</span>, <span class="hljs-keyword">async</span> (ctx, next) =&gt; {<br>  <span class="hljs-keyword">const</span> basket = <span class="hljs-keyword">await</span> Basket.findAll({<br>    attributes: {<br>      include: [[COUNT_ITEMS, <span class="hljs-string">`itemsCount`</span>], [SUM_ITEMS, <span class="hljs-string">`totalPrice`</span>]]<br>    }<br>  });<br>  ctx.body = basket;<br>});<br></code></pre></td></tr></table></figure><p>the <a href="https://github.com/Hiswe/sequelize-example/blob/master/router.js#L87-L119">related code in the demo</a></p><h2 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h2><p>Sequelize is a very fine piece of code. For 95% of the time it will just work as expected.<br>For the 5 other percents you can write raw SQL queries 🤓 or use squel to do it for you 🤪</p><p>By doing so we have removed the burden of processing the Sequelize result in our server, and that’s a win 😎</p>]]></content>
    
    
    <summary type="html">handle SQL COUNT and SUM functions when Sequelize can&#39;t generate this it in an easy way</summary>
    
    
    
    <category term="nodejs" scheme="https://hiswe.github.io/categories/nodejs/"/>
    
    
    <category term="advanced" scheme="https://hiswe.github.io/tags/advanced/"/>
    
  </entry>
  
  <entry>
    <title>Isomorphic application with React/Redux</title>
    <link href="https://hiswe.github.io/en/2018/08-universal-application/"/>
    <id>https://hiswe.github.io/en/2018/08-universal-application/</id>
    <published>2018-05-19T09:52:34.000Z</published>
    <updated>2021-04-25T10:07:36.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>So I wanted to build an isomorphic/universal web-application…</p><p>This will be a <strong>long document about the <em>how</em> and the <em>why</em></strong><br>The web-app was greatly influenced by this <a href="http://blog.koorchik.com/isomorphic-react/">Viktor Turskyi’s post</a>.</p><p>Unlike most articles, I won’t produce here any code example.<br>I will try to focus on <strong>how different piece of code put together will solve building an universal applications</strong> problems.</p><p>It’s my first take on this kind of application, so I’m sure there are many flaws &amp; rooms for improvement.<br>But hey! we need a start in order to advance 🏃‍♀️</p><span id="more"></span><h2 id="prerequisite"><a href="#prerequisite" class="headerlink" title="prerequisite"></a>prerequisite</h2><p>You should have some notions with:</p><ul><li><a href="https://reactjs.org/">React</a><ul><li>what is a <a href="https://reactjs.org/docs/components-and-props.html">Component</a></li><li>what is a <a href="https://reactjs.org/docs/components-and-props.html">High-Order Component (HoC)</a></li></ul></li><li><a href="https://redux.js.org/">Redux</a><ul><li>what is a <a href="https://redux.js.org/basics/store">store</a></li><li>what is an <a href="https://redux.js.org/basics/actions">action</a></li><li>what is a <a href="https://redux.js.org/basics/reducers">reducer</a></li><li>how to use <a href="https://redux.js.org/basics/usage-with-react">react-redux</a> to connect our React components to the store</li></ul></li><li>Some javascript tooling:<ul><li><a href="https://webpack.js.org/">Webpack</a> for bundling our application</li><li><a href="http://babeljs.io/">BabelJs</a> for converting <a href="https://reactjs.org/docs/introducing-jsx.html">React jsx</a> code to plain javascript</li></ul></li></ul><h2 id="purpose-of-server-rendering"><a href="#purpose-of-server-rendering" class="headerlink" title="purpose of server rendering"></a>purpose of server rendering</h2><p>Server rendering seems a good idea for 2 main reasons:</p><ul><li>make our <strong>first render quicker</strong></li><li><strong>support no-JS environments</strong></li></ul><p>For this we need to:</p><ol><li>grab the right components to render (using the <a href="https://reactjs.org/docs/react-dom-server.html">React methods for server rendering</a>)<br> a non exiting route means rendering the 404 component</li><li> make sure that the components have the right data to begin with.</li><li> pass everything to the client</li><li> after that the client will initialize and run as a <a href="https://en.wikipedia.org/wiki/Single-page_application">single page application</a></li></ol><h2 id="the-API"><a href="#the-API" class="headerlink" title="the API"></a>the API</h2><p>The web-application will interact with an API (<code>packages/api</code>) which will not be detailed here.<br>The only thing we need to know about the API is that:</p><ul><li>it’s a REST like API (uses only GET &amp; POST)</li><li>communicates with JSON</li><li>authenticates with a JSON Web Token (JWT)</li></ul><p>this document will <strong>only focus</strong> on the <code>packages/web-app</code> folder</p><p><strong>Why no GraphQL?</strong> <a href="http://graphql.org/">GraphQL</a> seems to be a nice tech, but I simply didn’t have time to dig into it.</p><h2 id="supported-features-amp-Tech"><a href="#supported-features-amp-Tech" class="headerlink" title="supported features &amp; Tech"></a>supported features &amp; Tech</h2><h5 id="NOT-USING-CREATE-REACT-APP-OR-NEXT-JS"><a href="#NOT-USING-CREATE-REACT-APP-OR-NEXT-JS" class="headerlink" title="NOT USING CREATE-REACT-APP OR NEXT.JS"></a>NOT USING <em>CREATE-REACT-APP</em> OR <em>NEXT.JS</em></h5><p>I made this universal application to learn more about React.</p><ul><li>I wanted to know how things work, so I didn’t use any frameworks like <a href="https://github.com/zeit/next.js/">next.js</a> or <a href="https://github.com/facebook/create-react-app">create-react-app</a> that will build things for me that I don’t truly understand.</li><li>I also wanted to make an exhaustive application: not a TODO app example.<br>There are plenty of those already, It’s good to begin with but whenever you want to build something more complex, you’ll have a hard time stitching the pieces together.</li></ul><h5 id="FEATURES"><a href="#FEATURES" class="headerlink" title="FEATURES"></a>FEATURES</h5><p>In order to make it the most <em>real life</em> example this web-app will:</p><ul><li><strong>mutualise all the code</strong> we can</li><li>support <strong>authentication</strong></li><li>support <strong>Internationalization</strong> (i18n)</li><li>be <strong>testable</strong> (even if there isn’t as much tests as I wanted 😨)</li><li>should <strong>work without JS</strong> in the browser<ul><li>I believe in progressive enhancement</li><li>while developing, this allows us to make API POST request without taking care about the redux actions.<br>Those can be created in a second time.</li><li>I will use <code>browser cookie</code> to store the JWT.<br>It’s the only way to store informations on the browser without relying on Javascript.<br>Sadly a browser without JS &amp; cookie is doomed 😔</li></ul></li></ul><h5 id="TECH-STACK"><a href="#TECH-STACK" class="headerlink" title="TECH STACK"></a>TECH STACK</h5><p><strong>React library</strong>, among others, is a great way to <strong>ensure</strong> that <strong>our applications is perfectly in sync with our</strong> application <strong>state</strong>.<br>So we can rely on it to <strong>always render the proper thing</strong> depending on the route/user actions/API queries.<br>Thus, we will omit this part from this document (<em>i.e.</em> considering that changing the route/state will always render the right HTML)</p><p>Here are all the main modules used:</p><ul><li><strong>views</strong><ul><li><a href="https://reactjs.org/">React 16.3</a></li></ul></li><li><strong>routing</strong><ul><li><a href="https://reacttraining.com/react-router/">React router 4</a></li><li><a href="https://www.npmjs.com/package/react-router-config">react-router-config 1</a> for the universal support</li></ul></li><li><strong>application state</strong><ul><li><a href="https://redux.js.org/">redux 4</a></li><li><a href="https://www.npmjs.com/package/redux-thunk">redux thunk</a> for a better handling of asynchronous actions</li><li><a href="https://github.com/reactjs/react-redux">react redux</a> for a better integration with React</li></ul></li><li><strong>server</strong><ul><li><a href="http://koajs.com/">Koa 2</a> (see <a href="https://hiswe.github.io/2018/07-from-express-to-koa/">this post</a> about why I chose Koa)</li></ul></li></ul><h2 id="files"><a href="#files" class="headerlink" title="files"></a>files</h2><h5 id="STRUCTURE"><a href="#STRUCTURE" class="headerlink" title="STRUCTURE"></a>STRUCTURE</h5><p>I tried to avoid nesting folders too deeply.<br>I used <a href="https://lernajs.io/">lerna</a> to have a clear separation between our API &amp; the web-app.<br>I may move to <a href="https://yarnpkg.com/blog/2017/08/02/introducing-workspaces/">yarn workspaces</a> when it will leave its experimental status</p><p>Here are the main choices:</p><ul><li><strong>client</strong>:<ul><li><code>root</code>: a single file to initialize the Redux-store, the router and hydrate our React application</li></ul></li><li><strong>server</strong><ul><li><code>root</code>: initializing our Koa app &amp; the routing</li><li><code>public</code>: all our compiled JS/CSS + some assets</li></ul></li><li><strong>shared</strong><ul><li><code>root</code><ul><li>isomorphic files</li><li>main HoC (will come to them later)</li></ul></li><li><code>redux-ducks</code>: all our Redux related code using the <a href="https://github.com/erikras/ducks-modular-redux">ducks convention</a><br>This helps keeping all our Redux related code in one file</li><li><code>[…components]</code>: organized by domain<br>The <code>ui</code> are mostly presentational components<br> I could have used more external components</li></ul></li></ul><h5 id="MUTUALIZATION"><a href="#MUTUALIZATION" class="headerlink" title="MUTUALIZATION"></a>MUTUALIZATION</h5><p>As for the version 1.1.0:</p><table><thead><tr><th align="right">front</th><th align="right">server</th><th align="right">shared front/client</th></tr></thead><tbody><tr><td align="right">36 loc</td><td align="right">279 loc</td><td align="right">6476 loc</td></tr><tr><td align="right">1%</td><td align="right">4%</td><td align="right">95%</td></tr></tbody></table><figure class="image-container">  <img src="/en/2018/08-universal-application/loc-chart.svg" class="" width="300" height="260" title="lines of code repartition pie chart " alt="lines of code repartition pie chart">  <figcaption class="image-container__caption">just write once</figcaption></figure><p>I don’t expect this repartition to change much with futur versions.<br>There should be:</p><ul><li>more &amp; more code into the shared folder</li><li>some small additions in server code (mainly for proxying POST fallback)</li></ul><h2 id="building-the-applications"><a href="#building-the-applications" class="headerlink" title="building the applications"></a>building the applications</h2><p>Using React with <a href="https://reactjs.org/docs/introducing-jsx.html">JSX</a> makes the code easier to write and to maintain so:</p><ul><li>a building step is <strong>required to convert JSX to regular JS</strong></li><li>the most <strong>popular solution</strong> right now is the couple <a href="https://webpack.js.org/">Webpack</a>/<a href="http://babeljs.io/">Babel</a><ul><li>Webpack in version 4 since a while<br>It promises to be simpler, but you will still find yourself adding some plugins/loaders at one point or another</li><li>as the latest version of Ava use babel 7, I picked it for my build process also.<br>At this time (may 2018) it’s in <code>beta 47</code> 😳 and working perfectly<br>I can’t thank enough all the people contributing to this project and I really hope that the final release will come soon</li></ul></li><li>since we have a build step, why not<ul><li>use <a href="https://ponyfoo.com/articles/es6-modules-in-depth">ES2015 modules</a></li><li><strong>import our <code>scss</code> files directly in the components.</strong><br>This is <strong>totally optional</strong> and could have been done in a classical way (like compiling a SCSS folder to a CSS file)<br>But I found that it really <strong>helps to isolate concerns about what your Component is about</strong><br>Also it will make it easy to <strong>keep the styles next to the markup</strong> (no more back &amp; forth from component folder to a scss folder)</li></ul></li><li>I <strong>don’t use <code>@babel/register</code> in my server code</strong> because it might have a performance cost so:<ul><li><strong>build also the server code with webpack</strong><br>And that will also allow me to replace some files when needed</li><li><strong>don’t build the code for tests</strong><br>performance aren’t an issue there and we can use <code>@babel/register</code> without worrying</li></ul></li></ul><h5 id="SERVER"><a href="#SERVER" class="headerlink" title="SERVER"></a>SERVER</h5><ul><li>don’t want to bundle the <code>node_modules</code>: they are already accessible in nodeJS environment<br>→ done with <a href="https://www.npmjs.com/package/webpack-node-externals">webpack-node-externals</a></li><li>want to always have access of source-map<br>→ done with the the <a href="https://webpack.js.org/plugins/banner-plugin/">webpack banner-plugin</a> and the <a href="https://www.npmjs.com/package/source-map-support">source-map-support</a> module</li><li>ignore <code>.scss</code> requires<br>→ done with <a href="https://www.npmjs.com/package/babel-plugin-transform-require-ignore">babel-plugin-transform-require-ignore</a></li></ul><h5 id="CLIENT"><a href="#CLIENT" class="headerlink" title="CLIENT"></a>CLIENT</h5><ul><li>want to bundle the <code>node_modules</code> in a separate file<br>→ done with <a href="https://webpack.js.org/plugins/split-chunks-plugin/">webpack split-chunks-plugin</a></li><li>want to bundle <code>.scss</code> in a <code>.css</code> separate file<br>→ done with <a href="https://www.npmjs.com/package/extract-text-webpack-plugin">webpack extract-text-webpack-plugin</a><br>The <code>@next version</code> is working fine with <code>webpack 4</code> but I should migrate to <a href="https://www.npmjs.com/package/mini-css-extract-plugin">webpack mini-css-extract-plugin</a> (here is <a href="https://github.com/webpack-contrib/extract-text-webpack-plugin/issues/749#issuecomment-374549467">why</a>)</li></ul><h5 id="BUILD-SUMMARY"><a href="#BUILD-SUMMARY" class="headerlink" title="BUILD SUMMARY"></a>BUILD SUMMARY</h5><figure class="image-container">  <img src="/en/2018/08-universal-application/build.svg" class="" width="900" height="640" title="building flow " alt="building flow">  <figcaption class="image-container__caption">processing & processing code & getting what we want</figcaption></figure><h5 id="PARCEL-JS-SIDE-NOTE"><a href="#PARCEL-JS-SIDE-NOTE" class="headerlink" title="PARCEL JS SIDE-NOTE"></a>PARCEL JS SIDE-NOTE</h5><p>On a side node <a href="https://parceljs.org/">ParcelJs</a> seems very promising.<br>As I see it, it’s still too young (version 1 released on december 2017).<br>I’ll wait a little bit for more documentation &amp; tutorials, and surely try it on another side projet</p><h2 id="sharing-the-configuration"><a href="#sharing-the-configuration" class="headerlink" title="sharing the configuration"></a>sharing the configuration</h2><p>I use to manage my server configuration with <a href="https://www.npmjs.com/package/rc">rc</a>.<br>I wanted to keep it that way but an isomorphic configuration <a href="http://blog.koorchik.com/isomorphic-react/#Isomorphic_configuration">comes with some challenges</a>.</p><p>To keep it versatile, I wanted to pass my configuration down to the client like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">rc → server → client<br></code></pre></td></tr></table></figure><p>Unlike Viktor Turskyi’s solution, I replaced the config import with specific server/client files.<br><strong>This prevents mixing ES modules with Node’s CommonJS modules syntax</strong></p><p>→ done with Webpack’s <a href="https://webpack.js.org/plugins/normal-module-replacement-plugin/">normal-module-replacement-plugin</a></p><h5 id="SERVER-1"><a href="#SERVER-1" class="headerlink" title="SERVER"></a>SERVER</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> &#123; <span class="hljs-keyword">default</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../server/config&quot;</span>;<br></code></pre></td></tr></table></figure><h5 id="CLIENT-1"><a href="#CLIENT-1" class="headerlink" title="CLIENT"></a>CLIENT</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-built_in">window</span>.__CONFIG__;<br></code></pre></td></tr></table></figure><p>where <code>window.__CONFIG__</code> is passed by the server</p><h5 id="DURING-TEST"><a href="#DURING-TEST" class="headerlink" title="DURING TEST"></a>DURING TEST</h5><p><a href="https://github.com/avajs/ava">AVA</a> is used for testing.<br>By default it uses babel to convert JSX. So I tried to keep it that way so → no Webpack.<br>This will make it easier to require a single component and test it.</p><p>So I just use my configuration’s entry point as the test configuration: no need to replace it with webpack!<br>I use the same babel configuration than the server’s one to prevent including the SCSS 😀</p><h5 id="CONFIGURATION-SUMMARY"><a href="#CONFIGURATION-SUMMARY" class="headerlink" title="CONFIGURATION SUMMARY"></a>CONFIGURATION SUMMARY</h5><figure class="image-container">  <img src="/en/2018/08-universal-application/configuration.svg" class="" width="860" height="500" title="configuration flow " alt="configuration flow">  <figcaption class="image-container__caption">now we can configure our application without the need of rebuilding it!</figcaption></figure><h2 id="application-flow-summary"><a href="#application-flow-summary" class="headerlink" title="application flow summary"></a>application flow summary</h2><p>This is how the app behaves from the <strong>first render</strong> made by the <strong>server</strong> to the <strong>subsequent client handling</strong></p><p>Here is a little bit of explanation:</p><ul><li><strong>symbols</strong><ul><li><img src="/en/2018/08-universal-application/cookie-symbol.svg" class="" width="16" height="16" title="cookie symbol " alt="cookie symbol"> represents a cookie either read from a server request, or from the browser</li><li><img src="/en/2018/08-universal-application/jwt-symbol.svg" class="" width="16" height="16" title="JWT symbol " alt="JWT symbol"> represents a JWT which will be used for authentication between our web-application and the API</li><li>arrows between them represent reading/writing from/to the cookie</li></ul></li><li><strong>REACT-ROUTER</strong> will mutualise all our pages routes<ul><li>on the <strong>server</strong>: direct call to the API (either in GET or POST) will be manually proxied</li><li>this for supporting <strong>no-JS</strong> environment</li><li>this is done in the <code>server/routing-api-backup.js</code></li></ul></li><li><strong>REDUX</strong> will maintain our app state<ul><li>I uses the <a href="https://github.com/erikras/ducks-modular-redux">duck convention</a> to organize the code</li><li>API calls will be made in <code>redux actions</code></li></ul></li><li><strong>ISO-FETCH</strong> is a small wrapper around <a href="https://www.npmjs.com/package/isomorphic-fetch">isomorphic-fetch</a><br>It will handle any Fetch request to the API<br>Keep in mind that:<ul><li>on the <strong>server</strong>: the cookie content will be provided by the server</li><li>on the <strong>client</strong>: it can read the browser’s cookie content by itself</li></ul></li></ul><figure class="image-container">  <img src="/en/2018/08-universal-application/flow.svg" class="" width="1240" height="1280" title="application flow " alt="application flow">  <figcaption class="image-container__caption">simple, right?</figcaption></figure><h2 id="routing-with-React-Router-amp-Redux"><a href="#routing-with-React-Router-amp-Redux" class="headerlink" title="routing with React-Router &amp; Redux"></a>routing with React-Router &amp; Redux</h2><h5 id="WHAT-IS-REACT-ROUTER"><a href="#WHAT-IS-REACT-ROUTER" class="headerlink" title="WHAT IS REACT-ROUTER"></a>WHAT IS REACT-ROUTER</h5><p><a href="https://reacttraining.com/react-router/">React-router</a> is, I think, the most common routing solution for React.<br>They have recently updated their library to the version 4.</p><p>There is a huge <a href="https://reacttraining.com/react-router/core/guides/philosophy">shift of philosophy</a> between the previous versions and this one.<br>They call it <em>dynamic routing</em> and it’s very different from the classical way.</p><h5 id="INTERFACING-WITH-THE-SERVER"><a href="#INTERFACING-WITH-THE-SERVER" class="headerlink" title="INTERFACING WITH THE SERVER"></a>INTERFACING WITH THE SERVER</h5><p>To interface nicely with our Koa server, we need something that:</p><ol><li> is more traditional &amp; plays well with a server routing</li><li> can be easily shared between the server/client</li></ol><p>For that they have made a package named <a href="https://www.npmjs.com/package/react-router-config">react-router-config</a>.<br>It’s still in beta but is already working as expected.</p><p>React Router Config mainly does 3 things:</p><ul><li>a way to define a <strong>routing configuration</strong></li><li>a method to <strong>retrieve the component that match the route</strong></li><li>give a way for the router to <strong>give back informations to the server</strong> (like not found &amp; redirection) so we can serve the pages with right HTTP code.</li></ul><h5 id="GET-REDUX-ACTIONS-FROM-COMPONENTS"><a href="#GET-REDUX-ACTIONS-FROM-COMPONENTS" class="headerlink" title="GET REDUX ACTIONS FROM COMPONENTS"></a>GET REDUX ACTIONS FROM COMPONENTS</h5><p>Like seen before, with react-router-config <strong>it’s easy to get which components to render.</strong></p><p>But we need a way to tell our server which data those components need.<br>We will rely on Redux to maintain a coherent state.</p><p>What we <strong>need is redux actions</strong> that we <strong>dispatch to our store</strong> and redux will do his job.</p><p>But because it’s an universal application:</p><ul><li>on the <strong>server</strong> we will need the <strong>actions to be called <em>before</em> instantiating our components</strong><br>→ this is solved by using a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static">static method</a> on our components</li><li>on the <strong>client</strong> we will need the <strong>actions to be called in <a href="https://reactjs.org/docs/react-component.html#componentdidmount">componentDidMount()</a></strong></li><li>on <strong>first rendering</strong> we must <strong>prevent the client to call the componentDidMount() actions</strong><br>Calling them twice won’t have a lot of side effects but making the same set of requests is inefficient…</li></ul><p>The solution came again from <a href="http://blog.koorchik.com/isomorphic-react/#Data_fetching">Viktor Turskyi’s post</a> about data fetching.</p><p>We need to make a <a href="https://reactjs.org/docs/higher-order-components.html">HoC</a> to take care of this.</p><p>It will:</p><ol><li> take as an input a <code>component</code> and an array of redux actions (<code>actionsCreators</code>)</li><li> always add the authentication action (needed for the app to ensure the right display)</li><li> return the <code>component</code> in the <code>render()</code>, passing in any <code>props</code></li><li> for the <strong>server</strong>: expose a static method named <code>fetchData</code> which will <code>dispatch</code> any <code>actions</code> of the <code>actionsCreators</code> array</li><li> for the <strong>client</strong>: call <code>fetchData</code> in <code>componentDidMount</code></li><li> prevent the first call of <code>componentDidMount</code> (with a module variable named <code>SKIP_FIRST_COMPONENTDIDMOUNT</code>)</li></ol><figure class="image-container">  <img src="/en/2018/08-universal-application/page-fetch-actions.svg" class="" width="900" height="510" title="route fetch actions " alt="route fetch actions">  <figcaption class="image-container__caption">giving the possibility to fetch data before or after a component is instantiated</figcaption></figure><h5 id="LIMITATIONS"><a href="#LIMITATIONS" class="headerlink" title="LIMITATIONS"></a>LIMITATIONS</h5><p>The main issue of doing so is that we <strong>need to call all the actions needed for all the children components in the top <code>page component</code></strong></p><p>It would be nicer to declare all those actions on the concerned components and find a way to hoist &amp; aggregate them to the page component.</p><h5 id="SERVER-FLOW-SUMMARY"><a href="#SERVER-FLOW-SUMMARY" class="headerlink" title="SERVER FLOW SUMMARY"></a>SERVER FLOW SUMMARY</h5><figure class="image-container">  <img src="/en/2018/08-universal-application/server-rendering.svg" class="" width="1020" height="520" title="the server flow " alt="the server flow">  <figcaption class="image-container__caption">from server to client</figcaption></figure><h2 id="isomorphic-fetch"><a href="#isomorphic-fetch" class="headerlink" title="isomorphic-fetch"></a>isomorphic-fetch</h2><p>One of the problem was to be able to send the JWT on any request.</p><ul><li>on the <strong>client</strong> we have <strong>access to the browser cookies at any time</strong><br>→ no problems here</li><li>on the <strong>server</strong> we have <strong>access to the browser cookies only in Koa context</strong><ul><li><code>isomorphic-fetch</code> won’t be able to grab them on its own</li><li><strong>we need to make possible to feed the JWT</strong> to <code>isomorphic-fetch</code></li><li>we have to keep in mind that <code>isomorphic-fetch</code> can be called in <code>redux-actions</code> so we need to pass the <strong>JWT in redux-actions</strong> also</li></ul></li></ul><h5 id="FETCH-SUMMARY"><a href="#FETCH-SUMMARY" class="headerlink" title="FETCH SUMMARY"></a>FETCH SUMMARY</h5><figure class="image-container">  <img src="/en/2018/08-universal-application/isomorphic-fetch.svg" class="" width="450" height="375" title="the isomorphic-fetch flow " alt="the isomorphic-fetch flow">  <figcaption class="image-container__caption">JWT is important</figcaption></figure><h2 id="authentication"><a href="#authentication" class="headerlink" title="authentication"></a>authentication</h2><p>This one is quite easy.</p><p>Authentication is handled by 2 <a href="https://reactjs.org/docs/components-and-props.html">HoC</a>:</p><ol><li><strong>public route</strong> will redirect to private home if connected<br> → done in <code>authentication-forbidden.js</code></li><li><strong>private route</strong> will redirect to login page if NOT connected<br> → done in <code>authentication-required.js</code></li></ol><p>They have the same requirements:</p><ol><li>be <strong>connected to the redux store</strong> to check authentication<br> → done with <a href="https://redux.js.org/basics/usage-with-react#presentational-and-container-components">react-redux</a></li><li>be <strong>connected to the react router</strong> to access the redirection<br> → done with <a href="https://www.npmjs.com/package/react-router-config">react-router-config</a><br> On the <strong>server</strong> we also a provide a <code>serverContext</code> object<br> (on the documentation they call it <a href="https://reacttraining.com/react-router/web/guides/server-rendering">staticContext</a> but I find it more obvious to call it serverContext)</li><li> the Component to render if everything’s ok</li></ol><p>And they will act in the same way:</p><ol><li> check <code>redux store</code> authentication status</li><li>handle the redirection if needed<br> on the server we will update update <code>serverContext</code> if a redirection happens.<br> <strong>This will help Koa to set the right HTTP status code when serving the page</strong></li><li> OR render the Component if not redirection is necessary</li></ol><h5 id="AUTHENTICATION-HOC-FLOW"><a href="#AUTHENTICATION-HOC-FLOW" class="headerlink" title="AUTHENTICATION HOC FLOW"></a>AUTHENTICATION HOC FLOW</h5><figure class="image-container">  <img src="/en/2018/08-universal-application/hoc-authentication.svg" class="" width="1000" height="330" title="the authentication hoc ordering " alt="the authentication hoc ordering">  <figcaption class="image-container__caption">Auth made simple, I guess…</figcaption></figure><h2 id="I18N-with-React-Intel"><a href="#I18N-with-React-Intel" class="headerlink" title="I18N with React-Intel"></a>I18N with React-Intel</h2><p><a href="https://github.com/yahoo/react-intl/wiki">React-Intel</a> fits my needs:</p><ul><li>formating numbers &amp; prices</li><li>formating dates</li><li>providing translations</li></ul><p>The documentation is quite good and the implementation straightforward.</p><p>We just need to:</p><ul><li>keep our current locale in the <code>Redux-Store</code> so we can change it dynamically</li><li>wrap our application with the <code>&lt;IntlProvider /&gt;</code> component</li><li>define our <code>locales</code> files</li><li>follow the guide to <a href="https://github.com/yahoo/react-intl/wiki#locale-data-in-nodejs">server rendering</a></li></ul><p>What we can improve:</p><p>This simple take is <strong>suitable for a small application</strong> but may be <strong>hard to maintain on a larger scale</strong>.</p><ul><li>load asynchronously our <code>locales</code> files<ul><li>right now all <code>locales</code> are bundled into the different applications</li></ul></li><li>have a way to extract our translation’s keys from the application<ul><li>a very interesting post was written by <a href="https://blog.idagio.com/localisation-or-how-i-learned-to-stop-worrying-and-love-babel-plugin-react-intl-8eeb51d80d77">Vlad Goran</a> about extracting those keys with <a href="https://github.com/yahoo/babel-plugin-react-intl">babel-plugin-react-intl</a> but <a href="https://github.com/yahoo/babel-plugin-react-intl/issues/122">it doesn’t seem to work with babel-7</a></li></ul></li></ul><h2 id="adding-React-Helmet"><a href="#adding-React-Helmet" class="headerlink" title="adding React-Helmet"></a>adding React-Helmet</h2><p>We still need to provide <code>&lt;head&gt;</code> and <code>&lt;script&gt;</code> tags.<br>In order to do so, and to keep most of the code on the shared folder, just use <a href="https://www.npmjs.com/package/react-helmet">React-Helmet</a></p><p>It will handle for us:</p><ul><li>the <code>&lt;html&gt;</code> tag</li><li>the <code>&lt;title&gt;</code> tag</li><li>any <code>&lt;meta&gt;</code> and <code>&lt;stylesheet&gt;</code></li></ul><p>I didn’t put any <code>&lt;script&gt;</code> for a reason that I can’t remember 😶</p><p>Since most of the HTML will be handled by React, on the server we won’t need to write a lot of tags, thus we can use Javascript template strings instead of a regular template engine.</p><h2 id="the-full-chain-of-components"><a href="#the-full-chain-of-components" class="headerlink" title="the full chain of components"></a>the full chain of components</h2><p>So from top to bottom this how our components fits together.<br>The main thing is that our <strong>HoC won’t change over time</strong> so we just have to write our application without worrying about server/client, auth, i18n anymore!</p><figure class="image-container">  <img src="/en/2018/08-universal-application/components-chaining.svg" class="" width="850" height="1220" title="how components chains to each other " alt="how components chains to each other">  <figcaption class="image-container__caption">React's Russian Doll</figcaption></figure>]]></content>
    
    
    <summary type="html">A take on building an universal application with React/Redux that supports no-JS environment, authentication &amp; i18n</summary>
    
    
    
    <category term="nodejs" scheme="https://hiswe.github.io/categories/nodejs/"/>
    
    
    <category term="advanced" scheme="https://hiswe.github.io/tags/advanced/"/>
    
    <category term="react" scheme="https://hiswe.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>from express to koa</title>
    <link href="https://hiswe.github.io/en/2018/07-from-express-to-koa/"/>
    <id>https://hiswe.github.io/en/2018/07-from-express-to-koa/</id>
    <published>2018-05-08T14:02:19.000Z</published>
    <updated>2021-04-25T10:07:36.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>There are a few nodeJs web framework. One of the most popular is <a href="https://expressjs.com/">express.js</a>.</p><p>I want to explain here why when writing server code, I choose to move from <em>express.js</em> to <a href="https://koajs.com/">koa</a>.</p><span id="more"></span><p>To understand this article you should know about:</p><ul><li><a href="https://developer.mozilla.org/bm/docs/Web/JavaScript">javascript</a><ul><li>what is <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">a promise</a></li><li>how to write promises with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function">async/await</a></li></ul></li><li><a href="https://nodejs.org/en/">nodeJs</a><ul><li>how to setup up a simple <a href="https://expressjs.com/">express.js</a> server</li><li>what is an <a href="https://expressjs.com/en/guide/writing-middleware.html">express middleware</a></li></ul></li></ul><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>With <a href="https://nodejs.org/en/">NodeJS</a> version 7 came the <a href="http://node.green/#ES2017-features-async-functions">support of <code>async/await</code> function</a>.<br>Koa just plays more naturally with them ➡️ use Koa.</p><h2 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h2><p>We will write a simple route that will:</p><ol><li> query a database to get some stuff</li><li> pass the result to a second database call</li><li> then send the final result as the response</li></ol><h3 id="node-style-callbacks"><a href="#node-style-callbacks" class="headerlink" title="node style callbacks"></a>node style callbacks</h3><p>We will use here the nodeJs style callback signature:<br>A callback function with <code>error</code> as the first argument &amp; <code>result</code> as the second.</p><figure class="highlight js"><figcaption><span>01-express-node-callback.js</span><a href="/downloads/code/07-from-express-to-koa/01-express-node-callback.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">app.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">request, response, next</span>) =&gt;</span> {<br>  database.doStuff(<span class="hljs-function">(<span class="hljs-params">error, firstResult</span>) =&gt;</span> {<br>    <span class="hljs-comment">// will send it the error middleware below</span><br>    <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">return</span> next(error);<br>    <span class="hljs-comment">// we need another database call</span><br>    <span class="hljs-comment">// a little bit of callback hell here but:</span><br>    <span class="hljs-comment">// – we could have extract our callback to functions…</span><br>    <span class="hljs-comment">//   …living on the first level of our route handler</span><br>    database.doAnotherStuff(firstResult, <span class="hljs-function">(<span class="hljs-params">error, finalResult</span>) =&gt;</span> {<br>      <span class="hljs-comment">// will send it the error middleware below. Again.</span><br>      <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">return</span> next(error);<br>      <span class="hljs-comment">// no error, send the result</span><br>      response.json(finalResult);<br>    });<br>  });<br>});<br><span class="hljs-comment">// our middleware that handle any errors</span><br><span class="hljs-comment">// – will catch anything that might have happened in our route</span><br><span class="hljs-comment">//   only if called with next(error)</span><br><span class="hljs-comment">// – won&#x27;t catch an JSON.parse() error</span><br>app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">errorMiddleware</span>(<span class="hljs-params">error, request, response, next</span>) </span>{<br>  response.status(<span class="hljs-number">500</span>);<br>  response.send(error);<br>});<br></code></pre></td></tr></table></figure><p>So far so good.<br>But luckily for us our database object support also promises.</p><h3 id="promises"><a href="#promises" class="headerlink" title="promises"></a>promises</h3><p>The following will do the same as the code above but:</p><ul><li>we achieved to flatten our code</li><li>we don’t duplicate anymore the error control</li><li>the <code>catch</code> will not handle synchronous errors</li></ul><figure class="highlight js"><figcaption><span>02-express-promise.js</span><a href="/downloads/code/07-from-express-to-koa/02-express-promise.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">app.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">request, response, next</span>) =&gt;</span> {<br>  database<br>    .doStuff()<br>    .then(<span class="hljs-function"><span class="hljs-params">firstResult</span> =&gt;</span> database.doAnotherStuff(firstResult))<br>    .then(<span class="hljs-function"><span class="hljs-params">finalResult</span> =&gt;</span> response.json(finalResult))<br>    .catch(next);<br>});<br>app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">errorMiddleware</span>(<span class="hljs-params">error, request, response, next</span>) </span>{<br>  response.status(<span class="hljs-number">500</span>);<br>  response.send(error);<br>});<br></code></pre></td></tr></table></figure><p>So far so good.<br>But luckily since we use nodeJS &gt;= 7 we can use async/await.</p><h3 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h3><p>The following will do the same as the code above but:</p><ul><li>we achieved to have a less cumbersome code</li><li>we still don’t duplicate the error control</li><li>any error inside the <code>try/catch</code> will be handled</li></ul><figure class="highlight js"><figcaption><span>03-express-async-await.js</span><a href="/downloads/code/07-from-express-to-koa/03-express-async-await.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// declare an async function to allow “await”</span><br>app.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-keyword">async</span> (request, response, next) =&gt; {<br>  <span class="hljs-keyword">try</span> {<br>    <span class="hljs-keyword">const</span> firstResult = <span class="hljs-keyword">await</span> database.doStuff();<br>    <span class="hljs-keyword">const</span> finalResult = <span class="hljs-keyword">await</span> database.doAnotherStuff(firstResult);<br>    response.json(finalResult);<br>  } <span class="hljs-keyword">catch</span> (error) {<br>    next(error);<br>  }<br>});<br>app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">errorMiddleware</span>(<span class="hljs-params">error, request, response, next</span>) </span>{<br>  response.status(<span class="hljs-number">500</span>);<br>  response.send(error);<br>});<br></code></pre></td></tr></table></figure><p>So far so good.<br>But it will get a little messier if we add more routes:</p><figure class="highlight js"><figcaption><span>04-express-async-multiple-routes.js</span><a href="/downloads/code/07-from-express-to-koa/04-express-async-multiple-routes.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js">app.get(<span class="hljs-string">&quot;/:id&quot;</span>, <span class="hljs-keyword">async</span> (request, response, next) =&gt; {<br>  <span class="hljs-keyword">const</span> { id } = req.params;<br>  <span class="hljs-keyword">try</span> {<br>    <span class="hljs-keyword">const</span> firstResult = <span class="hljs-keyword">await</span> database.doStuff(id);<br>    <span class="hljs-keyword">const</span> finalResult = <span class="hljs-keyword">await</span> database.doAnotherStuff(firstResult);<br>    response.json(finalResult);<br>  } <span class="hljs-keyword">catch</span> (error) {<br>    next(error);<br>  }<br>});<br>app.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-keyword">async</span> (request, response, next) =&gt; {<br>  <span class="hljs-keyword">try</span> {<br>    <span class="hljs-keyword">const</span> firstResult = <span class="hljs-keyword">await</span> database.doStuff();<br>    <span class="hljs-keyword">const</span> finalResult = <span class="hljs-keyword">await</span> database.doAnotherStuff(firstResult);<br>    response.json(finalResult);<br>  } <span class="hljs-keyword">catch</span> (error) {<br>    next(error);<br>  }<br>});<br>app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">errorMiddleware</span>(<span class="hljs-params">error, request, response, next</span>) </span>{<br>  response.status(<span class="hljs-number">500</span>);<br>  response.send(error);<br>});<br></code></pre></td></tr></table></figure><p>You see?<br>We write again and again <code>try &#123;&#125; catch(error)&#123; next(error) &#125;</code><br>Not a big deal but quite boring at the end…<br>But luckily we can write a wrapper function for that!</p><h3 id="better-async-await"><a href="#better-async-await" class="headerlink" title="better async/await"></a>better async/await</h3><p>So let’s write our wrapper:</p><figure class="highlight js"><figcaption><span>05-express-async-wrapper.js</span><a href="/downloads/code/07-from-express-to-koa/05-express-async-wrapper.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// make a closure to keep a reference to our original async function</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">asyncWrapper</span>(<span class="hljs-params">asyncRouteHandler</span>) </span>{<br>  <span class="hljs-comment">// this is what will be called by express.js</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">routeHandler</span>(<span class="hljs-params">request, response, next</span>) </span>{<br>    <span class="hljs-comment">// because it&#x27;s an async function it will always return a promise</span><br>    <span class="hljs-comment">// – just call it with express&#x27; callback parameters</span><br>    <span class="hljs-keyword">return</span> (<br>      asyncRouteHandler(request, response, next)<br>        <span class="hljs-comment">// catch any error that might happen in our async function</span><br>        .catch(next)<br>    );<br>  };<br>}<br><span class="hljs-comment">// OR:</span><br><span class="hljs-comment">// thanks to arrow functions and params destructuring</span><br><span class="hljs-comment">// we can write it that way:</span><br><span class="hljs-keyword">const</span> asyncWrapper = <span class="hljs-function"><span class="hljs-params">fn</span> =&gt;</span> <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> fn(...args).catch(args[<span class="hljs-number">2</span>]);<br></code></pre></td></tr></table></figure><p>A more detailed article about that was written by <a href="https://medium.com/@Abazhenov/using-async-await-in-express-with-node-8-b8af872c0016">Alex Bazhenov</a></p><p>Finally lets use it in our code:</p><figure class="highlight js"><figcaption><span>06-express-async-with-wrapper.js</span><a href="/downloads/code/07-from-express-to-koa/06-express-async-with-wrapper.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> asyncWrapper = <span class="hljs-function"><span class="hljs-params">fn</span> =&gt;</span> <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> fn(...args).catch(args[<span class="hljs-number">2</span>]);<br><br>app.get(<br>  <span class="hljs-string">&quot;/:id&quot;</span>,<br>  asyncWrapper(<span class="hljs-keyword">async</span> (request, response, next) =&gt; {<br>    <span class="hljs-keyword">const</span> { id } = req.params;<br>    <span class="hljs-keyword">const</span> firstResult = <span class="hljs-keyword">await</span> database.doStuff(id);<br>    <span class="hljs-keyword">const</span> finalResult = <span class="hljs-keyword">await</span> database.doAnotherStuff(firstResult);<br>    response.json(finalResult);<br>  })<br>);<br><br>app.get(<br>  <span class="hljs-string">&quot;/&quot;</span>,<br>  asyncWrapper(<span class="hljs-keyword">async</span> (request, response, next) =&gt; {<br>    <span class="hljs-keyword">const</span> firstResult = <span class="hljs-keyword">await</span> database.doStuff();<br>    <span class="hljs-keyword">const</span> finalResult = <span class="hljs-keyword">await</span> database.doAnotherStuff(firstResult);<br>    response.json(finalResult);<br>  })<br>);<br><br>app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">errorMiddleware</span>(<span class="hljs-params">error, request, response, next</span>) </span>{<br>  response.status(<span class="hljs-number">500</span>);<br>  response.send(error);<br>});<br></code></pre></td></tr></table></figure><p>So far so good.<br>But we still have to write some boilerplate to handle that…<br>Here comes KOA!</p><h2 id="KOA"><a href="#KOA" class="headerlink" title="KOA"></a>KOA</h2><h3 id="what-is-KOA"><a href="#what-is-KOA" class="headerlink" title="what is KOA?"></a>what is KOA?</h3><p>to sum up: it’s the same team behind express.js that have written a web framework using the recent additions in the Javascript language.<br><strong>At its core it’s using promises with async/await</strong><br>You can find the <a href="https://koajs.com/#introduction">full introduction here</a></p><p>Setting up a server with Koa is very straightforward.<br>For the routing, as nothing is provided by default, we will use <a href="https://www.npmjs.com/package/koa-router">koa-router</a></p><h3 id="setting-up-the-router-and-error-middleware"><a href="#setting-up-the-router-and-error-middleware" class="headerlink" title="setting up the router and error middleware"></a>setting up the router and error middleware</h3><p>This snippet should be enough:</p><figure class="highlight js"><figcaption><span>07-koa-boilerplate.js</span><a href="/downloads/code/07-from-express-to-koa/07-koa-boilerplate.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> Koa = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;koa&quot;</span>);<br><span class="hljs-keyword">const</span> Router = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;koa-router&quot;</span>);<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Koa();<br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> Router();<br><br><span class="hljs-comment">// unlike in Express.js</span><br><span class="hljs-comment">// – declare our error middleware to the top most position</span><br><span class="hljs-comment">// – this will ensure to catch all the errors</span><br><span class="hljs-comment">//   that might happen in the following middleware call</span><br>app.use(<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleError</span>(<span class="hljs-params">context, next</span>) </span>{<br>  <span class="hljs-comment">// call our next middleware</span><br>  <span class="hljs-keyword">try</span> {<br>    <span class="hljs-keyword">await</span> next();<br>    <span class="hljs-comment">// catch any error that might have occurred</span><br>  } <span class="hljs-keyword">catch</span> (error) {<br>    context.status = <span class="hljs-number">500</span>;<br>    context.body = error;<br>  }<br>});<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * We will configure here our router later</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// mount the router to our web application</span><br>app.use(router.routes());<br>app.use(router.allowedMethods());<br><br><span class="hljs-comment">// launch the server</span><br>app.listen(<span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><h3 id="writing-our-routes"><a href="#writing-our-routes" class="headerlink" title="writing our routes"></a>writing our routes</h3><p>And this is how we will write our application code:</p><figure class="highlight js"><figcaption><span>08-koa-with-routes.js</span><a href="/downloads/code/07-from-express-to-koa/08-koa-with-routes.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleError</span>(<span class="hljs-params">context, next</span>) </span>{<br>  <span class="hljs-keyword">try</span> {<br>    <span class="hljs-keyword">await</span> next();<br>  } <span class="hljs-keyword">catch</span> (error) {<br>    context.status = <span class="hljs-number">500</span>;<br>    context.body = error;<br>  }<br>});<br><br>router<br>  .get(<span class="hljs-string">&quot;/:id&quot;</span>, <span class="hljs-keyword">async</span> (context, next) =&gt; {<br>    <span class="hljs-keyword">const</span> { id } = context.params;<br>    <span class="hljs-keyword">const</span> firstResult = <span class="hljs-keyword">await</span> database.doStuff(id);<br>    <span class="hljs-keyword">const</span> finalResult = <span class="hljs-keyword">await</span> database.doAnotherStuff(firstResult);<br>    context.body(finalResult);<br>  })<br>  .get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-keyword">async</span> (context, next) =&gt; {<br>    <span class="hljs-keyword">const</span> firstResult = <span class="hljs-keyword">await</span> database.doStuff();<br>    <span class="hljs-keyword">const</span> finalResult = <span class="hljs-keyword">await</span> database.doAnotherStuff(firstResult);<br>    context.body(finalResult);<br>  });<br></code></pre></td></tr></table></figure><p>which appears to me more leaner 😀</p><ul><li>no duplicated <code>try/catch</code></li><li>no need to write an async middleware</li><li>no need to wrap all our route handlers into that middleware</li><li>handle both sync/async errors</li></ul><h2 id="About-Koa-ecosystem"><a href="#About-Koa-ecosystem" class="headerlink" title="About Koa ecosystem"></a>About Koa ecosystem</h2><p>As for now, Koa hasn’t as much middleware as express.js.<br>This can be an issue in migrating.</p><p>But the <em>must have</em> middlewares are already here, and writing your own is quite easy.<br>I never found myself in a situation where I couldn’t achieve what I wanted to do with Koa.</p><p>So if you like <code>async/await</code> code style, give Koa a try 🙂</p>]]></content>
    
    
    <summary type="html">How using async/await push me from using express.js to koa framework</summary>
    
    
    
    <category term="nodejs" scheme="https://hiswe.github.io/categories/nodejs/"/>
    
    
    <category term="advanced" scheme="https://hiswe.github.io/tags/advanced/"/>
    
  </entry>
  
  <entry>
    <title>html basic (part 3)</title>
    <link href="https://hiswe.github.io/en/2018/06-html-basic-part-3/"/>
    <id>https://hiswe.github.io/en/2018/06-html-basic-part-3/</id>
    <published>2018-03-08T11:02:58.000Z</published>
    <updated>2021-04-25T10:07:36.795Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In <a href="/en/2018/04-html-basic-part-1/" title="the first">the first</a> and <a href="/en/2018/05-html-basic-part-2/" title="the second">the second</a> part we’ve seen the basis of how to write an HTML document.</p><p>Now we’re going to play with that and expand our HTML document.<br>This will help us to learn more about HTML and how we can easily make it more <a href="https://en.wikipedia.org/wiki/Web_accessibility">accessible</a> for people with disabilities.</p><span id="more"></span><h2 id="Enhance-with-more-HTML-elements"><a href="#Enhance-with-more-HTML-elements" class="headerlink" title="Enhance with more HTML elements"></a>Enhance with more HTML elements</h2><h3 id="Add-the-author-lt-address-gt-element"><a href="#Add-the-author-lt-address-gt-element" class="headerlink" title="Add the author: &lt;address&gt; element"></a>Add the author: <code>&lt;address&gt;</code> element</h3><figure class="image-container">  <img src="/en/2018/06-html-basic-part-3/author.svg" class="" width="400" height="240" title="a writer posing with a pen " alt="a writer posing with a pen">   <figcaption class="image-container__caption">A very inspired author</figcaption></figure><p>Why not showing who wrote this amazing piece of art? (short answer: me)</p><p>If we look which <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element">HTML element</a> seems the most appropriate, we can see that <code>&lt;address&gt;</code> seems the right one.</p><blockquote><p>The HTML &lt;address&gt; element indicates that the enclosed HTML provides contact information for a person or people, or for an organization</p><footer><strong>Mozilla Developer Network</strong><cite><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address">address element description</a></cite></footer></blockquote><p>So we can add it right after our title:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>The Boy Who Cried Wolf<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span>by Hiswe<span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span><br></code></pre></td></tr></table></figure> <p>Which seems to be good enough…</p><h3 id="Add-a-link-to-the-author-page-lt-a-gt-element"><a href="#Add-a-link-to-the-author-page-lt-a-gt-element" class="headerlink" title="Add a link to the author page: &lt;a&gt; element"></a>Add a link to the author page: <code>&lt;a&gt;</code> element</h3><figure class="image-container">  <img src="/en/2018/06-html-basic-part-3/backpacker.svg" class="" width="500" height="240" title="a backpacker going from a website to another " alt="a backpacker going from a website to another">   <figcaption class="image-container__caption">Exploring the web</figcaption></figure><p>…but we can do more!</p><p><strong>The web is all about <a href="https://en.wikipedia.org/wiki/Hyperlink">links</a></strong> and getting from one place to another!</p><p>So why not include a link to the author website where all his glorious contents live?</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span><br>  by    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://github.com/hiswe/&quot;</span>&gt;</span>Hiswe<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span><br></code></pre></td></tr></table></figure> <p>As seen in <a href="/en/2018/05-html-basic-part-2/" title="part 2">part 2</a> the <code>parent</code> (<code>&lt;address&gt;</code> here) can have many <code>children</code>.<br>And <strong>you can mix in any order text child with HTML element child</strong> </p><h4 id="Semantic-of-lt-a-gt-and-href"><a href="#Semantic-of-lt-a-gt-and-href" class="headerlink" title="Semantic of &lt;a&gt; and href"></a>Semantic of <code>&lt;a&gt;</code> and <code>href</code></h4><figure class="image-container">  <img src="/en/2018/06-html-basic-part-3/anchor.svg" class="" width="500" height="180" title="an anchor going from a website to another " alt="an anchor going from a website to another">   <figcaption class="image-container__caption">This how we bound!</figcaption></figure><p><code>&lt;a&gt;</code> stands for <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a">anchor</a></p><p>the <code>href</code> attribute refers to <code>hyperlink reference</code> (hyperlink is the technical way of saying link… 99% of the times, we just say link)</p><h4 id="Why-the-browser-is-merging-spaces-for-your-own-good"><a href="#Why-the-browser-is-merging-spaces-for-your-own-good" class="headerlink" title="Why the browser is merging spaces for your own good"></a>Why the browser is merging spaces for your own good</h4><figure class="image-container">  <img src="/en/2018/06-html-basic-part-3/merging-white-space.svg" class="" width="500" height="200" title="the browser merging two white spaces " alt="the browser merging two white spaces">  <figcaption class="image-container__caption">FUUUUUSION!</figcaption></figure><p>Even if we wrote the “by” and “Hiswe” on two lines with white-spaces before, <strong>the output will be rendered on a single line.</strong></p><p>We have seen in <a href="/en/2018/04-html-basic-part-1/" title="part one">part one</a> that <strong><em>the browser merges multiple spaces and ignore carriage return.</em></strong><br>This comes in handy here! This <strong>allow us to have a proper indentation in our code without worrying about the browser rendering</strong> 😇</p><p>But for a better understanding, we can write our code in that way:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span>by <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://github.com/hiswe/&quot;</span>&gt;</span>Hiswe<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span><br></code></pre></td></tr></table></figure> <p>In the end whatever way you’re choosing this is only a matter of personal appreciation, the browser will output the content in the same way.</p><h4 id="More-semantic-on-the-link"><a href="#More-semantic-on-the-link" class="headerlink" title="More semantic on the link"></a>More semantic on the link</h4><figure class="image-container">  <img src="/en/2018/06-html-basic-part-3/author-home.svg" class="" width="350" height="250" title="A writer in his house surrounded by books " alt="A writer in his house surrounded by books">  <figcaption class="image-container__caption">I'm an artist… and this is my humble home</figcaption></figure><p><strong>Semantic is important, because:</strong></p><ul><li>It will make your <strong>HTML code more readable for you</strong></li><li>It will allow a <strong>better <a href="https://en.wikipedia.org/wiki/Screen_reading">screen reading</a> experience</strong> for disabled people.<br>In short: the computer will read the text and describe the context of this text.<br>As an example if you have an heading of first level <code>&lt;h1&gt;</code>, the screen reader will say:<br><q>heading of first level</q> and then read the content</li></ul><p>We wrote a link, but what we really want to achieve, is <strong>describing an author</strong>.<br>We already have the <code>&lt;address&gt;</code> element but we can add more on the link.</p><p>If we take a deeper look at this <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a">HTML element documentation</a>, we can see that there is a <strong><code>rel</code> attribute:</strong></p><blockquote><p><em>rel</em><br>Specifies the relationship of the target object to the link object.</p><footer><strong>Mozilla Developer Network</strong><cite><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-rel">rel attribute description</a></cite></footer></blockquote>    <p>This documentation provides us a link of <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types">the possible values of this rel attribute</a> and it says that <strong>we can have an author value!</strong>.  </p><p>Here’s a lookup of our update:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span>by <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://github.com/hiswe/&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;author&quot;</span>&gt;</span>Hiswe<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span><br></code></pre></td></tr></table></figure> <h3 id="Add-some-text-formatting-lt-br-gt-lt-em-gt-amp-lt-strong-gt"><a href="#Add-some-text-formatting-lt-br-gt-lt-em-gt-amp-lt-strong-gt" class="headerlink" title="Add some text formatting: &lt;br/&gt;, &lt;em&gt; &amp; &lt;strong&gt;"></a>Add some text formatting: <code>&lt;br/&gt;</code>, <code>&lt;em&gt;</code> &amp; <code>&lt;strong&gt;</code></h3><figure class="image-container">  <img src="/en/2018/06-html-basic-part-3/laser-dino.svg" class="" width="320" height="200" title="A dinosaur firing laser beams with his eyes " alt="A dinosaur firing laser beams with his eyes">  <figcaption class="image-container__caption">PEW! PEW!</figcaption></figure><p>Like a lazy cow 🐮, I will just give you the updated document and walk you through each modification.</p><figure class="highlight html"><figcaption><span>01-full-story.html</span><a href="/downloads/code/06-html-basic-part-3/01-full-story.html">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Wolf Story<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>The Boy Who Cried “Wolf”<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span>by <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://github.com/hiswe/&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;author&quot;</span>&gt;</span>Hiswe<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;wolf-cover.png&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>      He was sitting in his room on a rainy day.<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>      At one point his mother just heard him cried <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>“wolf!”<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>.<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>      But he was just playing with his toys:<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a bunch of sheep<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a shepherd<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>laser eyed shooting<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span> dinosaur<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a wolf<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Semantics-of…"><a href="#Semantics-of…" class="headerlink" title="Semantics of…"></a>Semantics of…</h4><figure class="image-container">  <img src="/en/2018/06-html-basic-part-3/bold-and-italic.svg" class="" width="400" height="300" title="A web-browser writing bold and italic on a blackboard " alt="A web-browser writing bold and italic on a blackboard">  <figcaption class="image-container__caption">I can write in so many ways!</figcaption></figure><p>All those elements help you achieving some basic text formating:</p><ul><li><code>&lt;br /&gt;</code> stands for <strong>break</strong>. Just a regular carriage return <strong><em>⏎</em></strong><br>Like the <code>&lt;img /&gt;</code> element, it’s a self-closing HTML elements.<br>Y’know a break is just a break…</li><li><code>&lt;em /&gt;</code> stands for <strong>emphasis</strong> – rendered by default in <a href="https://en.wikipedia.org/wiki/Italic_type#Usage">italic</a></li><li><code>&lt;strong /&gt;</code> obvious strong is <strong>strong</strong> 💪 – rendered by default in <a href="https://en.wikipedia.org/wiki/Emphasis_(typography)" title="" target="">bold</a></li></ul><p>And after knowing that, it’s just a matter of updating your HTML file and “voila!”.  </p><p><strong>HTML is easy</strong> ✌️ <strong><em>It’s applying the same recipe again and again:</em></strong></p><ul><li><strong><em>writing</em> the content</strong></li><li><strong><em>choosing</em> the most fitting <em>HTML elements</em> if needed</strong></li><li><strong><em>nest and indent everything</em> in a good way</strong></li></ul><h2 id="But-Sir-We-have-a-a€oewolf-a€-problem"><a href="#But-Sir-We-have-a-a€oewolf-a€-problem" class="headerlink" title="But Sir! We have à â€œwolf!â€ problem!"></a>But Sir! We have à <code>â€œwolf!â€</code> problem!</h2><figure class="image-container">  <img src="/en/2018/06-html-basic-part-3/we-have-a-problem.svg" class="" width="270" height="240" title="A worried man standing in front of many strange text " alt="A worried man standing in front of many strange text">  <figcaption class="image-container__caption">â€œwolf!â€, â€œwolf!â€ everywhere!</figcaption></figure><p>Your eyesight is as accurate as an eagle’s 🦅</p><p>We do have a problem but the good news is that it can be fixed very easily.</p><p>We just have to modify our document like this:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Wolf Story<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- the rest of our content… --&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Character-encoding-lt-meta-charset-quot-utf-8-quot-gt"><a href="#Character-encoding-lt-meta-charset-quot-utf-8-quot-gt" class="headerlink" title="Character encoding: &lt;meta charset=&quot;utf-8&quot; /&gt;"></a>Character encoding: <code>&lt;meta charset=&quot;utf-8&quot; /&gt;</code></h3><figure class="image-container">  <img src="/en/2018/06-html-basic-part-3/speaking-different-language.svg" class="" width="350" height="250" title="A browser speaking the “cute” word in english, french, thai and japanese " alt="A browser speaking the “cute” word in english, french, thai and japanese">  <figcaption class="image-container__caption">So many characters used around the globe!</figcaption></figure><h4 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h4><ul><li>Because it’s <strong>not really part of the content of our document content</strong>, this <strong>element’s place is in the <code>&lt;head&gt;</code></strong></li><li><code>&lt;meta&gt;</code> stands for <a href="https://en.wikipedia.org/wiki/Metadata">metadata</a></li><li><strong>just always add <em>&lt;meta charset=”utf-8” /&gt;</em> in every HTML document <em>&lt;head&gt;</em> you create.</strong></li></ul><h4 id="Understanding-metadata"><a href="#Understanding-metadata" class="headerlink" title="Understanding metadata"></a>Understanding metadata</h4><figure class="image-container">  <img src="/en/2018/06-html-basic-part-3/in-paris-with-love.svg" class="" width="460" height="220" title="A polaroid with some text written at the bottom: the metadata " alt="A polaroid with some text written at the bottom: the metadata">  <figcaption class="image-container__caption">Real life metadata</figcaption></figure><p><strong>Metadata</strong> is everything that <strong>isn’t the content but</strong> that <strong>provide context</strong> upon it.</p><p>If we take a photo as an example, metadata would be:</p><ul><li>where the picture have been taken</li><li>at what time </li><li>by whom</li><li>with which camera</li><li><i>etc.</i></li></ul><p>As example, this can be used by softwares to:</p><ul><li>group all the photos taken at the same place, </li><li>group them by date or time range (every photos taken in the last month) </li><li><i>etc.</i></li></ul><h4 id="More-details"><a href="#More-details" class="headerlink" title="More details"></a>More details</h4><p>The root problem, is <a href="https://en.wikipedia.org/wiki/Character_encoding">character encoding</a>. </p><p>In a short, computers have evolved from supporting only a subset of english characters to all characters in the world (including emoji 💩).<br>But <strong>the web</strong> is an open platform and <strong>tries to maintain compatibility with old documents</strong>.</p><p><strong><em>So you have to tell your browser that you use the most modern encoding.</em></strong></p><p>If you want to have a better understanding of this subject, I recommend you this <a href="https://youtu.be/MijmeoH9LT4">short video on the subject</a></p><h3 id="lt-html-lang-”en”-gt"><a href="#lt-html-lang-”en”-gt" class="headerlink" title="&lt;html lang=”en”&gt;"></a>&lt;html lang=”en”&gt;</h3><figure class="image-container">  <img src="/en/2018/06-html-basic-part-3/browser-speaking-english.svg" class="" width="420" height="220" title="A browser speaking an Union Jack flag " alt="A browser speaking an Union Jack flag">  <figcaption class="image-container__caption">How do you do my dear fellow?</figcaption></figure><p>This is to indicate in which language the HTML document is written.<br>It’s good for accessibility (so it can know in which language he should read the document)</p><p>As a rule of thumb: <strong><em>always provide it</em></strong>.</p><h2 id="A-developer-🌈-thing-lt-comments-gt"><a href="#A-developer-🌈-thing-lt-comments-gt" class="headerlink" title="A developer 🌈 thing: &lt;!-- comments --&gt;"></a>A developer 🌈 thing: <code>&lt;!-- comments --&gt;</code></h2><figure class="image-container">  <img src="/en/2018/06-html-basic-part-3/remember-the-milk.svg" class="" width="420" height="220" title="A computer speaking a post-it note to a person " alt="A computer speaking a post-it note to a person">  <figcaption class="image-container__caption">Please! Don't forget!</figcaption></figure><p>Your eagle accurate sight 🦅 have spotted this strange HTML element in my previous example: </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- the rest of our content… --&gt;</span><br></code></pre></td></tr></table></figure><p>This is a <strong><em>comment</em>, a very important thing in the developer’s toolbox.</strong><br>It’s just this:</p><ul><li>__text that will not appear in the browser__…</li><li>…<strong>but that stays in the code for helping us</strong></li></ul><p>You can see that as <a href="https://en.wikipedia.org/wiki/Post-it_note">post-it note</a> for you.<br>You can write everything inside it, just make sure that the content is properly enclosed in <code>&lt;!--</code>  and <code>--&gt;</code></p><h2 id="The-full-code-example"><a href="#The-full-code-example" class="headerlink" title="The full code example"></a>The full code example</h2><figure class="highlight html"><figcaption><span>02-with-meta.html</span><a href="/downloads/code/06-html-basic-part-3/02-with-meta.html">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Wolf Story<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>The Boy Who Cried “Wolf”<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span>by <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://github.com/hiswe/&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;author&quot;</span>&gt;</span>Hiswe<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;wolf-cover.png&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- INTRODUCTION --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>      He was sitting in his room on a rainy day.<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>      At one point his mother just heard him cried <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>“wolf!”<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>.<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>      But he was just playing with his toys:<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a bunch of sheep<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a shepherd<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>laser eyed shooting<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span> dinosaur<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a wolf<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- DEVELOPMENT --&gt;</span><br>    <span class="hljs-comment">&lt;!-- write next about how the dinosaur fire lasers with his eyes and killed a lot sheep --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Wrapping-up"><a href="#Wrapping-up" class="headerlink" title="Wrapping up"></a>Wrapping up</h2><p>We have seen:</p><ul><li>how to choose semantic HTML elements to fill our needs from a <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element">documentation</a></li><li>how to make links to other webpages: <code>&lt;a href=&quot;&quot;&gt;</code></li><li>some vital information for the web-page to display properly with <code>&lt;html lang=&quot;en&quot;&gt;</code> &amp; <code>&lt;meta charset=&quot;utf-8&quot; /&gt;</code></li><li>what is a comment in a dev perspective</li></ul><p><strong>Getting better at writing HTML is only knowing which HTML element should be used &amp; with which attribute.</strong></p><p>And this is all for the basic of HTML.<br>Next we will see how to make our story nicer with <a href="https://en.wikipedia.org/wiki/Cascading_Style_Sheets">CSS</a></p><p>Again thanks to <a href="https://github.com/xpac27">xpac27</a> for the corrections</p><h3 id="Bonus-a-simple-HTML-template"><a href="#Bonus-a-simple-HTML-template" class="headerlink" title="Bonus: a simple HTML template"></a>Bonus: a simple HTML template</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Change lang to your own language --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Always put this for a good character encoding --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- This will appear as the text in the browser tab --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Webpage&#x27;s title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Here go the content --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Learn even more about writing HTML: semantic in HTML, encoding &amp; meta elements</summary>
    
    
    
    <category term="web" scheme="https://hiswe.github.io/categories/web/"/>
    
    
    <category term="beginner" scheme="https://hiswe.github.io/tags/beginner/"/>
    
    <category term="html" scheme="https://hiswe.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>html basic (part 2)</title>
    <link href="https://hiswe.github.io/en/2018/05-html-basic-part-2/"/>
    <id>https://hiswe.github.io/en/2018/05-html-basic-part-2/</id>
    <published>2018-03-01T09:13:24.000Z</published>
    <updated>2021-04-25T10:07:36.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>With <a href="/en/2018/04-html-basic-part-1/" title="html basic (part 1)">html basic (part 1)</a> we’ve seen how to:</p><ul><li>use a <em>proper text editor</em> to create and edit a HTML document</li><li>what is a <em>HTML element</em></li></ul><p>Now we will see how to build more upon that!</p><span id="more"></span><h3 id="What-can-we-improve"><a href="#What-can-we-improve" class="headerlink" title="What can we improve?"></a>What can we improve?</h3><ul><li>A more detailed article, like enumerate the toys</li><li>Add an image</li><li>Add a title to the page</li></ul><h2 id="Enumerating-toys-nesting-HTML-elements"><a href="#Enumerating-toys-nesting-HTML-elements" class="headerlink" title="Enumerating toys: nesting HTML elements"></a>Enumerating toys: nesting HTML elements</h2><figure class="image-container">  <img src="/en/2018/05-html-basic-part-2/toys.svg" class="" width="500" height="170" title="a sheppard, a sheep, a wolf and an dinosaur " alt="a sheppard, a sheep, a wolf and an dinosaur">   <figcaption class="image-container__caption">An amazing cast</figcaption></figure><p>It could be nice if we make a list of toys 🐑<br>Something like: </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">- a bunch of sheep<br>- a shepherd<br>- a dinosaur<br>- a wolf<br></code></pre></td></tr></table></figure><p>How this translate to HTML?</p><figure class="highlight html"><figcaption><span>01-list.html</span><a href="/downloads/code/05-html-basic-part-2/01-list.html">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>The Boy Who Cried Wolf<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>He just cried wolf while playing with his toys:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a bunch of sheep<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a shepherd<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a dinosaur<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a wolf<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Semantic-of-ul-amp-li"><a href="#Semantic-of-ul-amp-li" class="headerlink" title="Semantic of ul &amp; li"></a>Semantic of ul &amp; li</h3><p>As seen before, <strong>HTML elements carry a semantic value</strong>:  </p><ul><li><code>ul</code> stands for __u__norganized __l__ist (unorganized because it’s bullet points and not a numeric value)</li><li><code>li</code> stands for __l__ist <strong>item</strong></li></ul><p>So because we wanted a list of elements, the obvious choice was to use those elements 😎</p><h3 id="HTML-element-content"><a href="#HTML-element-content" class="headerlink" title="HTML element content"></a>HTML element content</h3><figure class="image-container">  <img src="/en/2018/05-html-basic-part-2/basket-of-apples.svg" class="" width="410" height="180" title="a basket with 3 apples " alt="a basket with 3 apples">   <figcaption class="image-container__caption">Yummy child apples inside daddy basket</figcaption></figure><p>In the first part I said that the content contains your text.<br>That was partially true: <strong>It can also contain other HTML elements!</strong>  </p><p>As example, if we want to describe in HTML a basket with 3 apples we can do something like:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">basket</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">apple</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">apple</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">apple</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">apple</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">apple</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">apple</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">basket</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Of course <code>basket</code> and <code>apple</code> are not proper HTML elements ⛔ 🗑 + 🍎<br>Don’t use them in your HTML code. </p><h3 id="Parent-amp-Children"><a href="#Parent-amp-Children" class="headerlink" title="Parent &amp; Children"></a>Parent &amp; Children</h3><p>This is developer’s poetry 🌈<br>We often refer to the <strong>HTML elements containing the other</strong> as <strong>the parent</strong> of <strong>his children</strong>  </p><p>In the example above:</p><ul><li>the parent will be the basket</li><li>the children of the basket will be the apples</li></ul><h3 id="A-common-mistake-not-nesting-properly"><a href="#A-common-mistake-not-nesting-properly" class="headerlink" title="A common mistake: not nesting properly"></a>A common mistake: not nesting properly</h3><figure class="image-container">  <img src="/en/2018/05-html-basic-part-2/intertwined-apple.svg" class="" width="270" height="180" title="an apple stuck in the border of a basket " alt="an apple stuck in the border of a basket">   <figcaption class="image-container__caption">Browser doesn't like HTML elements in a quantum state</figcaption></figure><p>What is very important to understand, is that the browser need to know where to start and where to stop.<br>So <strong>if we mess with the order of starting and closing tags</strong> it can <strong>lead to some problems:</strong></p><p>Your browser is an amazing thing. He will try to fix it for you, but maybe not in the way you intended.</p><h4 id="So-this-HTML-code-is-bad"><a href="#So-this-HTML-code-is-bad" class="headerlink" title="So this HTML code is bad:"></a>So this HTML code is bad:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a dinosaur<br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><p>The browser won’t understand it:<br>the <code>&lt;li&gt;</code> <strong>starts <em>inside</em></strong> the <code>&lt;ul&gt;</code><br><strong><em>BUT</em></strong><br>it <strong>ends <em>outside</em></strong> his parent</p><h4 id="This-is-the-right-way-to-write-it"><a href="#This-is-the-right-way-to-write-it" class="headerlink" title="This is the right way to write it:"></a>This is the right way to write it:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a dinosaur<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Why-the-spaces-before-lt-li-gt"><a href="#Why-the-spaces-before-lt-li-gt" class="headerlink" title="Why the spaces before &lt;li&gt;?"></a>Why the spaces before <code>&lt;li&gt;</code>?</h3><figure class="image-container">  <img src="/en/2018/05-html-basic-part-2/indentation.svg" class="" width="500" height="260" title="a nested kitchen, table, basket &amp; apples separated by spaces " alt="a nested kitchen, table, basket &amp; apples separated by spaces">   <figcaption class="image-container__caption">Spaces are helping you to read, always</figcaption></figure><p>In order to prevent this problem, we use a convention:</p><ul><li>just <a href="https://en.wikipedia.org/wiki/Indentation_style">indent</a> the content</li><li>so we can see better what’s <strong>inside</strong> what</li></ul><p><strong><em>It’s really important to indent well</em></strong>: It will prevent you to do a lot of mistakes.<br>…and it looks nicer (developer’s poetry 🌈)</p><p>Indenting is made easy with a <a href="/en/2018/04-html-basic-part-1/" title="a proper text editor">a proper text editor</a> like <a href="https://code.visualstudio.com/">Visual Studio Code</a>.<br>It will also highlight HTML errors for you. Good guy 🤩</p><h2 id="Adding-an-image-self-closing-HTML-element-amp-attributes"><a href="#Adding-an-image-self-closing-HTML-element-amp-attributes" class="headerlink" title="Adding an image: self-closing HTML element &amp; attributes"></a>Adding an image: self-closing HTML element &amp; attributes</h2><figure class="image-container">  <img src="/en/2018/05-html-basic-part-2/browser-needing-a-picture.svg" class="" width="300" height="140" title="a browser taking a picture with his tiny hands " alt="a browser taking a picture with his tiny hands">   <figcaption class="image-container__caption">Hey, I need U ❤️</figcaption></figure><p>Let’s move on and make our HTML more fun:<br>Add an illustration (illustrations are good)</p><figure class="highlight html"><figcaption><span>02-image.html</span><a href="/downloads/code/05-html-basic-part-2/02-image.html">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>The Boy Who Cried Wolf<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;wolf-cover.png&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>He just cried wolf while playing with his toys:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a bunch of sheep<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a shepherd<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a dinosaur<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a wolf<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Semantic-of-img"><a href="#Semantic-of-img" class="headerlink" title="Semantic of img"></a>Semantic of img</h3><p>This one is easy:</p><ul><li><code>img</code> stands for __im__a<strong>g</strong>e</li></ul><p>Want an image? use <code>img</code> 🌆</p><h3 id="Self-closing-HTML-elements"><a href="#Self-closing-HTML-elements" class="headerlink" title="Self-closing HTML elements"></a>Self-closing HTML elements</h3><figure class="image-container">  <img src="/en/2018/05-html-basic-part-2/what-is-this.svg" class="" width="320" height="210" title="a picture looking perplexedly at a text " alt="a picture looking perplexedly at a text">   <figcaption class="image-container__caption">What is it?</figcaption></figure><p>Some HTML elements don’t need content.<br>In the <code>img</code> element example, well… <strong>an image is an image, what else do you want to add?</strong></p><p>to write them:</p><ul><li>just make <strong>only 1 tag</strong></li><li>have to <strong>finish with <em><span class="u-c-accent">/</span>&gt;</em></strong></li></ul><figure class="image-container">  <img src="/en/2018/05-html-basic-part-2/auto-closing-tag.svg" class="" width="300" height="140" title="a HTML element with a self-closed tag " alt="a HTML element with a self-closed tag">   <figcaption class="image-container__caption">I'm a self-closed HTML element!</figcaption></figure><h3 id="The-anatomy-of-attributes"><a href="#The-anatomy-of-attributes" class="headerlink" title="The anatomy of attributes"></a>The anatomy of attributes</h3><figure class="image-container">  <img src="/en/2018/05-html-basic-part-2/basket-of-colored-apples.svg" class="" width="270" height="180" title="a basket with 3 apples of different kind " alt="a basket with 3 apples of different kind">   <figcaption class="image-container__caption">Yummy apples can come in all sort of kind</figcaption></figure><p>If we go on a deeper view, HTML elements can also have some properties that describe it.<br>Following our basket/apple example, we might want to know more about the apples:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">basket</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">apple</span> <span class="hljs-attr">skin</span>=<span class="hljs-string">&quot;pink&quot;</span> <span class="hljs-attr">taste</span>=<span class="hljs-string">&quot;sugary&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">apple</span> <span class="hljs-attr">skin</span>=<span class="hljs-string">&quot;blue&quot;</span> <span class="hljs-attr">taste</span>=<span class="hljs-string">&quot;sour&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">apple</span> <span class="hljs-attr">skin</span>=<span class="hljs-string">&quot;soft-pink&quot;</span> <span class="hljs-attr">taste</span>=<span class="hljs-string">&quot;not so much&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">basket</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="How-to-write-an-attributes"><a href="#How-to-write-an-attributes" class="headerlink" title="How to write an attributes"></a>How to write an attributes</h4><figure class="image-container">  <img src="/en/2018/05-html-basic-part-2/anatomy-of-an-attribute.svg" class="" width="480" height="280" title="a description of a tag " alt="a description of a tag">   <figcaption class="image-container__caption">XRay the tag</figcaption></figure><ul><li>those properties are named <strong><em>attributes</em></strong></li><li>those attributes are <strong><em>always on the starting tag</em></strong></li><li>those attributes <strong><em>come</em></strong> more often <strong><em>in two parts</em></strong>:<ul><li>an <strong><em>attribute name</em></strong>: a text <em>without</em> space</li><li>an <strong><em>attribute value</em></strong>: a text that can contain space</li></ul></li><li>we always write it that way: <code>attribute-name=&quot;the content on my property&quot;</code>  <ul><li>Notice the <strong><em>equal sign</em> right after the attribute name</strong></li><li>The <strong>equal sign <em>shouldn’t be separate by space</em></strong>  (<code>attribute-name = &quot;the content on my property&quot;</code> is wrong)</li><li>The <strong>content</strong> always come <strong>surrounded by double quotes</strong></li></ul></li></ul><h3 id="The-image-src-attribute"><a href="#The-image-src-attribute" class="headerlink" title="The image src attribute"></a>The image src attribute</h3><p><strong>The <code>src</code> attribute stands for <em>source</em></strong></p><p>Some information like the one for an image, can’t be included in the HTML document.<br>We need to tell the browser where to find them.  </p><p>The <code>src</code> attribute is simply that: where we can find the file containing the data of my image!</p><h4 id="Beware-of-spaces-and-letter-case"><a href="#Beware-of-spaces-and-letter-case" class="headerlink" title="Beware of spaces and letter case"></a>Beware of spaces and letter case</h4><figure class="image-container">  <img src="/en/2018/05-html-basic-part-2/wolf-vs-wolf.svg" class="" width="460" height="180" title="two wolfs" alt="picture, which are written one in lowercase &amp; the other in uppercase ">   <figcaption class="image-container__caption">Don't mess with the wolves</figcaption></figure><p>The browser takes a deep care of respecting what you write.<br><strong>He will even make a difference between <a href="https://en.wikipedia.org/wiki/Letter_case">lowercase and uppercase</a></strong> so a file named <code>WOLF.jpg</code> and <code>wolf.jpg</code> are not similar to him.<br>In the same ways, spaces can be a tricky thing so <strong><em>as a rule of thumb</em></strong>:</p><ul><li><strong>always name your files in lowercase</strong></li><li><strong>replace spaces by <code>-</code> in the name</strong></li></ul><p><em>example:</em></p><p><code>My long Image name.jpg</code> is better written <code>my-long-image-name.jpg</code></p><h2 id="The-page-title"><a href="#The-page-title" class="headerlink" title="The page title"></a>The page title</h2><figure class="image-container">  <img src="/en/2018/05-html-basic-part-2/website-title.svg" class="" width="220" height="160" title="The browser tab is named “wolf story” " alt="The browser tab is named “wolf story”">   <figcaption class="image-container__caption">There is a title here</figcaption></figure><p>The browser let’s us specify the text that appear in the tab.<br>We call it the page title.</p><p>In order to do this we need some adjustments:</p><figure class="highlight html"><figcaption><span>03-page-title.html</span><a href="/downloads/code/05-html-basic-part-2/03-page-title.html">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Wolf Story<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>The Boy Who Cried Wolf<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;wolf-cover.png&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>He just cried wolf while playing with his toys:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a bunch of sheep<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a shepherd<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a dinosaur<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a wolf<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Why-lt-html-gt-lt-head-gt-amp-lt-body-gt"><a href="#Why-lt-html-gt-lt-head-gt-amp-lt-body-gt" class="headerlink" title="Why &lt;html&gt;, &lt;head&gt; &amp; &lt;body&gt;?"></a>Why &lt;html&gt;, &lt;head&gt; &amp; &lt;body&gt;?</h3><figure class="image-container">  <img src="/en/2018/05-html-basic-part-2/head-and-body.svg" class="" width="380" height="280" title="a HTML file with a brain, having a “wolf story” book open in front of him " alt="a HTML file with a brain, having a “wolf story” book open in front of him">   <figcaption class="image-container__caption">You can't see no brain… But read my story!</figcaption></figure><p>Developers are poet 🌈 But like poetry there is some conventions: like keeping things simple &amp; stupid 👷‍♀<br>If something is organized with <code>parent ➡️ children</code> relations, then we should apply it everywhere, no exceptions allowed.</p><h4 id="lt-html-gt"><a href="#lt-html-gt" class="headerlink" title="&lt;html&gt;"></a>&lt;html&gt;</h4><p>Before, we used to just put our content, floating inside the HTML file.  </p><p>Now we put a single parent for everything: the <code>&lt;html&gt;</code> element, just to make sure that nobody’s left without a parent.<br>And we called it <code>&lt;html&gt;</code> because it’s what we’re writing right?</p><h4 id="lt-head-gt"><a href="#lt-head-gt" class="headerlink" title="&lt;head&gt;"></a>&lt;head&gt;</h4><p>In the <code>&lt;head&gt;</code> we will keep <strong>everything that’s invisible inside the webpage.</strong>  </p><p>Look at it as your thought &amp; identity.<br>Important but less obvious than the rest.</p><h4 id="lt-body-gt"><a href="#lt-body-gt" class="headerlink" title="&lt;body&gt;"></a>&lt;body&gt;</h4><p>In the <code>&lt;body&gt;</code> we will keep <strong>everything that’s visible</strong>.<br>Our content 📘</p><h2 id="wrapping-up"><a href="#wrapping-up" class="headerlink" title="wrapping up"></a>wrapping up</h2><p>We have seen:</p><ul><li>More HTML elements and their associated semantic</li><li>That we can nest HTML elements inside each other</li><li>That HTML elements can have attributes</li><li>How to write everything in a clean way</li><li>A more pertinent organization of the HTML page</li></ul><p>It’s still ugly, but before digging into that (<a href="https://en.wikipedia.org/wiki/Cascading_Style_Sheets">CSS</a>), we will make some short improvements in the story… in <a href="/en/2018/06-html-basic-part-3/" title="the part 3!">the part 3!</a></p>]]></content>
    
    
    <summary type="html">Learn more about writing HTML: nesting HTML element and achieving a more complex web-page</summary>
    
    
    
    <category term="web" scheme="https://hiswe.github.io/categories/web/"/>
    
    
    <category term="beginner" scheme="https://hiswe.github.io/tags/beginner/"/>
    
    <category term="html" scheme="https://hiswe.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>html basic (part 1)</title>
    <link href="https://hiswe.github.io/en/2018/04-html-basic-part-1/"/>
    <id>https://hiswe.github.io/en/2018/04-html-basic-part-1/</id>
    <published>2018-02-20T08:57:44.000Z</published>
    <updated>2021-04-25T10:07:36.783Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>As seen in <a href="/en/2018/03-basic-web-understanding/" title="basic web understanding">basic web understanding</a> the HTML file is the backbone of a web-page.<br>The purpose of this post is to have a better understanding of those, and how you can write a simple one!</p><span id="more"></span><p>Like on the basic understanding, I will omit some stuff to keep it simple.<br>As more posts will be published, we will clarify those 🤓</p><h2 id="Why-HTML"><a href="#Why-HTML" class="headerlink" title="Why HTML?"></a>Why HTML?</h2><p>Every device (computer, mobile phone, TV…) has a web-browser. So it’s the most universal language you can learn!</p><p>With it you can make:</p><ul><li>blog</li><li>sales sites</li><li>video games</li><li>books</li><li>and a lot more!</li></ul><p>And it also can be read by people with disabilities!</p><h2 id="What-is-an-HTML-file"><a href="#What-is-an-HTML-file" class="headerlink" title="What is an HTML file?"></a>What is an HTML file?</h2><figure class="image-container">  <img src="/en/2018/04-html-basic-part-1/browser-guessing-files.svg" class="" width="400" height="500" title="different steps of understanding it is an HTML file " alt="different steps of understanding it is an HTML file">   <figcaption class="image-container__caption">Getting to know each other</figcaption></figure><p>It’s a <strong>text file</strong>.</p><p>So we can just write some text on it and it will do the thing!</p><p>But for the browser to understand it’s reading an HTML file we need two things:</p><ul><li>the <strong>right file extension:</strong> <strong><em>.html</em></strong></li><li>a <strong>small text at the top of the file</strong> to indicate the content is really HTML.<br> This will be <code>&lt;!DOCTYPE html&gt;</code>  </li></ul><h3 id="Hey-if-it’s-a-text-file-I-can-use-Microsoft-Word"><a href="#Hey-if-it’s-a-text-file-I-can-use-Microsoft-Word" class="headerlink" title="Hey! if it’s a text file, I can use Microsoft Word!"></a>Hey! if it’s a text file, I can use Microsoft Word!</h3><figure class="image-container">  <img src="/en/2018/04-html-basic-part-1/browser-dont-understand-word.svg" class="" width="400" height="190" title="A Word file speaking an incomprehensible language to a browser " alt="A Word file speaking an incomprehensible language to a browser">   <figcaption class="image-container__caption">Guy, I can't understand you</figcaption></figure><p>In short: <strong>you can’t use Microsoft Word</strong></p><h4 id="If-you’re-interested-about-the-reasons"><a href="#If-you’re-interested-about-the-reasons" class="headerlink" title="If you’re interested about the reasons:"></a>If you’re interested about the reasons:</h4><p><strong>Microsoft Word</strong> (let’s call it Word for now on) <strong>produces <em>docx</em> files <em>not HTML</em></strong> files.</p><p>And <strong>your browser can’t understand Docx</strong> files.<br>Even if, when looking at word document <strong>it looks like only text, it isn’t.</strong>  </p><p>Word in its files stores a lots of other information! the text in itself but also the font styles you use (which font, the size, if it’s bold or not), the images you use, etc.</p><h3 id="Let’s-use-a-proper-text-editor"><a href="#Let’s-use-a-proper-text-editor" class="headerlink" title="Let’s use a proper text editor"></a>Let’s use a proper text editor</h3><p>So we need another solution.<br>Luckily there is a lot of alternative, and some are already on your computer!</p><h4 id="On-mac-TextEdit"><a href="#On-mac-TextEdit" class="headerlink" title="On mac: TextEdit"></a>On mac: TextEdit</h4><ul><li>don’t forget to have the <code>format &gt; Make Plain Text</code> option checked</li></ul><div class="video-wrapper">  <video src="/en/2018/04-html-basic-part-1/textedit-create-html-file.mp4" controls muted></div><h4 id="On-Windows-Notepad"><a href="#On-Windows-Notepad" class="headerlink" title="On Windows: Notepad"></a>On Windows: Notepad</h4><ul><li>don’t forget to set <code>save as type</code> to <code>All Files (*.*)</code></li></ul><figure class="image-container">  <img src="/en/2018/04-html-basic-part-1/notepad@2x.png" class="" width="978" height="556" title="A screenshot of the Notepad application " alt="A screenshot of the Notepad application">   <figcaption class="image-container__caption">You need to specify ”save as type: All Files”</figcaption></figure><h3 id="What-are-the-better-alternatives-and-they-are-free"><a href="#What-are-the-better-alternatives-and-they-are-free" class="headerlink" title="What are the better alternatives (and they are free):"></a>What are the better alternatives (and they are free):</h3><figure class="image-container">  <img src="/en/2018/04-html-basic-part-1/visual-studio-and-atom.svg" class="" width="430" height="180" title="Atom &amp; Visual Studio Code " alt="Atom &amp; Visual Studio Code">   <figcaption class="image-container__caption">We're ok on every computers!</figcaption></figure><ul><li><a href="https://code.visualstudio.com/">Visual Studio Code</a></li><li><a href="https://atom.io/">Atom</a></li><li>and a lot more…</li></ul><p>So you can download and use one of them 👍</p><h2 id="Let’s-begin"><a href="#Let’s-begin" class="headerlink" title="Let’s begin!"></a>Let’s begin!</h2><figure class="image-container">  <img src="/en/2018/04-html-basic-part-1/baby-html.svg" class="" width="150" height="160" title="A baby HTML file " alt="A baby HTML file">   <figcaption class="image-container__caption">น่ารัก</figcaption></figure><p>Make a new file named <code>my-first-webpage.html</code> and save it somewhere.<br>You can now type:</p><figure class="highlight html"><figcaption><span>my-first-webpage.html</span><a href="/downloads/code/04-html-basic-part-1/my-first-webpage.html">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><br>The Boy Who Cried Wolf<br><br>He just cried wolf while playing with his toys.<br></code></pre></td></tr></table></figure><p>And open it with your web browser! (or click on the <code>view raw</code> to have the final result)</p><h3 id="Why-is-everything-on-the-same-line"><a href="#Why-is-everything-on-the-same-line" class="headerlink" title="Why is everything on the same line?"></a>Why is everything on the same line?</h3><figure class="image-container">  <img src="/en/2018/04-html-basic-part-1/browser-rendering-text.svg" class="" width="430" height="400" title="The browser rendering the previous example " alt="The browser rendering the previous example">   <figcaption class="image-container__caption">Hey, just doing my job…</figcaption></figure><p>You wanted to have a formatted article, right?<br>It means for a better reading experience having some:</p><ul><li><a href="https://en.wikipedia.org/wiki/Headline">headlines</a> </li><li><a href="https://en.wikipedia.org/wiki/Paragraph">paragraph</a></li><li>Maybe some text formatting like bold and italic</li></ul><p><strong>Where in Word you can click a button to this, in HTML you have to write it for the web browser to understand.</strong>  </p><p>Because right now, you <strong>only wrote two lines of text</strong>, and <strong><em>for him it’s just some text</em>: he merges multiple spaces and ignore carriage return</strong> 😇 (and believe me, he’s doing this for your own good)</p><h3 id="Let’s-tell-the-browser-we-want-a-headline-and-paragraph"><a href="#Let’s-tell-the-browser-we-want-a-headline-and-paragraph" class="headerlink" title="Let’s tell the browser we want a headline and paragraph!"></a>Let’s tell the browser we want a headline and paragraph!</h3><figure class="image-container">  <img src="/en/2018/04-html-basic-part-1/browser-rendering-html.svg" class="" width="430" height="450" title="The browser rendering the example below " alt="The browser rendering the example below">   <figcaption class="image-container__caption">Ah OK! you want a heading & a paragraph!</figcaption></figure><p>We need to update our example like this:</p><figure class="highlight html"><figcaption><span>my-improved-webpage.html</span><a href="/downloads/code/04-html-basic-part-1/my-improved-webpage.html">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>The Boy Who Cried Wolf<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>He just cried wolf while playing with his toys.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>After saving, <em>reload your browser</em> aaand… It’s done! 🥇<br>It’s still kind of ugly but we will address that on another post talking about <a href="https://en.wikipedia.org/wiki/Cascading_Style_Sheets">CSS</a>.</p><h3 id="But-what-happened-HTML-elements"><a href="#But-what-happened-HTML-elements" class="headerlink" title="But what happened? HTML elements"></a>But what happened? HTML elements</h3><p><strong>We just told the browser which type of content we want</strong> 😊</p><h4 id="The-anatomy-of-an-HTML-element"><a href="#The-anatomy-of-an-HTML-element" class="headerlink" title="The anatomy of an HTML element"></a>The anatomy of an HTML element</h4><figure class="image-container">  <img src="/en/2018/04-html-basic-part-1/html-element-anatomy.svg" class="" width="500" height="280" title="Two detailed HTML elements " alt="Two detailed HTML elements">   <figcaption class="image-container__caption">X-Ray vision of HTML elements</figcaption></figure><p>An HTML Element is a <em>group having a semantic value</em> (like heading, paragraph, list…)<br>It’s composed most of the time by:</p><ul><li>a <strong>starting tag</strong> (<code>&lt;h1&gt;</code> &amp; <code>&lt;p&gt;</code> in our example) always written by the <strong>tag’s name of the  surrounded by angle brackets</strong></li><li>the <strong>content</strong> (your different texts)</li><li>a <strong>closing tag</strong> (<code>&lt;/h1&gt;</code> &amp; <code>&lt;/p&gt;</code> in our example) like the starting tag <em>but</em>:<br>⚠️ <strong>add an additional</strong> <code>/</code> <strong>after the first angle bracket!</strong></li></ul><p>you can see more on this <a href="https://en.wikipedia.org/wiki/HTML_element#Syntax">wikipedia article</a></p><h4 id="Starting-and-closing-tags"><a href="#Starting-and-closing-tags" class="headerlink" title="Starting and closing tags"></a>Starting and closing tags</h4><p>That’s how you tell the browser where an HTML element begin and stop.<br>Without it, as clever as the browser is, he can’t guess what you have in your mind when writing your HTML page.</p><p><strong><em>Writing properly an HTML element is the most important thing to understand about HTML!</em></strong></p><h4 id="h1-amp-p"><a href="#h1-amp-p" class="headerlink" title="h1 &amp; p"></a>h1 &amp; p</h4><p>As told previously, any HTML carry a <em>semantic value</em>, so: </p><ul><li><code>h1</code> stands for __h__eading of <strong>1</strong><sup>st</sup> level </li><li><code>p</code> stands for __p__aragraph</li></ul><p>You can view an <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element">extensive list of HTML elements here</a></p><h2 id="Wrapping-up"><a href="#Wrapping-up" class="headerlink" title="Wrapping up"></a>Wrapping up</h2><p>Writing an HTML page is easy!<br>Now you know how to:</p><ul><li>use a <strong>proper text editor</strong> to create and edit a HTML document</li><li>what is a <strong>HTML element</strong></li></ul><p>But we have more to see on <a href="/en/2018/05-html-basic-part-2/" title="the second part">the second part</a>  to make it a little bit more complex ⚙️</p>]]></content>
    
    
    <summary type="html">Learn some basic things about writing HTML, like using a proper text editor and knowing what is a HTML element</summary>
    
    
    
    <category term="web" scheme="https://hiswe.github.io/categories/web/"/>
    
    
    <category term="beginner" scheme="https://hiswe.github.io/tags/beginner/"/>
    
    <category term="html" scheme="https://hiswe.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>basic web understanding</title>
    <link href="https://hiswe.github.io/en/2018/03-basic-web-understanding/"/>
    <id>https://hiswe.github.io/en/2018/03-basic-web-understanding/</id>
    <published>2018-02-07T11:56:47.000Z</published>
    <updated>2021-04-25T10:07:36.781Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>The purpose of this post is to provide you with a basic understanding of what makes it possible to see a website by typing its address.<br>It’s a simplification of what happens in reality, but the main ideas are here 🙂</p><span id="more"></span><h2 id="Terminology"><a href="#Terminology" class="headerlink" title="Terminology"></a>Terminology</h2><h3 id="Internet"><a href="#Internet" class="headerlink" title="Internet"></a>Internet</h3><p>It’s a way of making <strong>devices talking to each other</strong>. </p><p><a href="https://en.wikipedia.org/wiki/Internet">an extensive article about internet</a></p><h3 id="Many-devices"><a href="#Many-devices" class="headerlink" title="Many devices"></a>Many devices</h3><p>Even if they are all computers we can differentiate two types of devices:</p><h4 id="The-client"><a href="#The-client" class="headerlink" title="The client"></a>The client</h4><figure class="image-container">  <img src="/en/2018/03-basic-web-understanding/computer-and-phone.svg" class="" width="350" height="200" title="a computer &amp; a phone " alt="a computer &amp; a phone">   <figcaption class="image-container__caption">clients: your everyday devices!</figcaption></figure><p>It’s <strong>your device</strong> (laptop or smartphone…). </p><a href="https://en.wikipedia.org/wiki/Client_(computing)" title="" target="">an extensive article about the client</a><p>It has one or many <strong>browsers installed on it</strong> to easily access the internet.</p><h4 id="The-server"><a href="#The-server" class="headerlink" title="The server"></a>The server</h4><figure class="image-container">  <img src="/en/2018/03-basic-web-understanding/server.svg" class="" width="220" height="160" title="a server">   <figcaption class="image-container__caption">server: the ones always there to help you! (they never sleep 😶)</figcaption></figure><p>It’s a <strong>computer</strong> specialized in <strong>answering request</strong>.<br>It has some special software running on it to behave that way.<br>Usually you don’t own one.</p><a href="https://en.wikipedia.org/wiki/Server_(computing)" title="" target="">an extensive article about the server</a><p>On a small note, Internet is about making computers talk to each other.<br>So you can transform your own computer in a server if you want by installing those specific software!</p><h3 id="The-Browser"><a href="#The-Browser" class="headerlink" title="The Browser"></a>The Browser</h3><figure class="image-container">  <img src="/en/2018/03-basic-web-understanding/browser.svg" class="" width="200" height="130" title="a web browser " alt="a web browser">   <figcaption class="image-container__caption">The browser: making your web easier since 1990</figcaption></figure><p>A <a href="https://en.wikipedia.org/wiki/Web_browser">browser</a>: It’s the software you use to access an internet page.<br>Some common browsers are:</p><ul><li><a href="https://www.google.com/chrome/browser/desktop/index.html">Google Chrome</a></li><li><a href="https://www.mozilla.org/en-US/firefox/new/">Firefox</a></li><li><a href="https://www.microsoft.com/en-us/windows/microsoft-edge">Microsoft Edge</a></li><li><a href="https://support.apple.com/downloads/safari">Apple Safari</a></li></ul><p>It will do a lot for you so that you can have a graphical representation of what you’re asking for.<br>Yep, it seems obvious but that’s the main thing about computers: how with <a href="https://en.wikipedia.org/wiki/Bit">bits</a> you can have an interactive display ✨ </p><h2 id="How-does-it-works"><a href="#How-does-it-works" class="headerlink" title="How does it works"></a>How does it works</h2><figure class="image-container">  <img src="/en/2018/03-basic-web-understanding/browser-ask-server.svg" class="" width="525" height="200" title="a web browser asking resources to a server " alt="a web browser asking resources to a server">   <figcaption class="image-container__caption">“Hey server! what do you have there?”</figcaption></figure><p>When you type an address in the browser, the browser will ask the server what is at that location for him to get.</p><p>Most of the time you want to get a web-page, but it can be anything: an image, sound, video, pdf documents…</p><h3 id="getting-a-web-page"><a href="#getting-a-web-page" class="headerlink" title="getting a web-page"></a>getting a web-page</h3><figure class="image-container">  <img src="/en/2018/03-basic-web-understanding/server-give-html.svg" class="" width="525" height="200" title="the server giving a HTML file " alt="the server giving a HTML file">   <figcaption class="image-container__caption">Here is the html you asked for!</figcaption></figure><p>A <strong>web-page</strong> is just a <strong>text file!</strong> we call it __html file__… You can read <a href="https://en.wikipedia.org/wiki/HTML">a lot more about HTML</a></p><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>So HTML is a text file but a very specific kind of text file.<br>It’s: </p><ul><li>all the information you want to have but written in a specific way </li><li>all the information that the web-page need to be more friendly and helpful</li></ul><h3 id="CSS-Javascript-and-other-resources"><a href="#CSS-Javascript-and-other-resources" class="headerlink" title="CSS, Javascript and other resources"></a>CSS, Javascript and other resources</h3><figure class="image-container">  <img src="/en/2018/03-basic-web-understanding/server-give-css-and-js.svg" class="" width="525" height="200" title="the server giving a CSS &amp; a JS file " alt="the server giving a CSS &amp; a JS file">   <figcaption class="image-container__caption">You also need CSS & JS</figcaption></figure><p>The latter part is the HTML file telling the browser to ask the server for more files.<br>Beside images/videos, there are also 2 domains where it needs more specific information: </p><ul><li>for having a <strong>nice presentation</strong>: those are the <strong>CSS</strong> text files</li><li>for being <strong>interactive</strong>: those are the <strong>Javascript</strong> text files</li></ul><h3 id="The-browser-magic"><a href="#The-browser-magic" class="headerlink" title="The browser magic"></a>The browser magic</h3><figure class="image-container">  <img src="/en/2018/03-basic-web-understanding/webbrowser-rendering.svg" class="" width="480" height="400" title="the browser rendering a web-page " alt="the browser rendering a web-page">   <figcaption class="image-container__caption">It's awesome! A beautiful web-page!</figcaption></figure><p>And now, using all those text files, your browser will do the magic and finally show you an interactive display of the information you wanted to see!</p><h2 id="So…"><a href="#So…" class="headerlink" title="So…"></a>So…</h2><figure class="image-container">  <img src="/en/2018/03-basic-web-understanding/browser-love.svg" class="" width="260" height="140" title="the browser surrounded by heart " alt="the browser surrounded by heart">   <figcaption class="image-container__caption">Love! Love! Love!</figcaption></figure><p><strong>Love your browser and keep it up to date</strong> 😎</p><p>You know now that : </p><ul><li>a website is mainly text files</li><li>They are given to you by the server</li><li>The main text file for a website is the HTML file</li></ul><p>I will go into more details for all those files (HTML, CSS &amp; Javascript) with comings posts.  </p><p><em>[UPDATE]</em> <a href="/en/2018/04-html-basic-part-1/" title="here is the the first part of HTML document!">here is the the first part of HTML document!</a> </p><p>Thanks to <a href="https://github.com/xpac27">xpac27</a> for the corrections!</p>]]></content>
    
    
    <summary type="html">Learn how you have a nice web-page after typing an address in your web-browser</summary>
    
    
    
    <category term="web" scheme="https://hiswe.github.io/categories/web/"/>
    
    
    <category term="beginner" scheme="https://hiswe.github.io/tags/beginner/"/>
    
  </entry>
  
  <entry>
    <title>Creating vector images</title>
    <link href="https://hiswe.github.io/en/2016/02-vector-creation-basics/"/>
    <id>https://hiswe.github.io/en/2016/02-vector-creation-basics/</id>
    <published>2016-02-06T15:14:44.000Z</published>
    <updated>2021-04-25T10:07:36.767Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This will be a short tutorial about how to create simple vector drawings.</p><p>This small guide will cover 2 softwares:</p><ul><li><a href="http://www.adobe.com/products/illustrator.html" title="" target="">Adobe Illustrator</a> (AI – left)</li><li><a href="https://affinity.serif.com/designer/" title="" target="">Affinity Designer</a> (AD – right)</li></ul><p>Talking about different softwares is, I think, a good way to understand that they do the same thing: creating vectors.<br>Choosing one upon another is more a matter of personal preference. </p><span id="more"></span><h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h3><p>Knowing about what is a vector drawing of course :)<br>I have made a small introduction <a href="/en/2016/01-vector-basics/" title="here">here</a></p><h3 id="What-is-it-NOT-about"><a href="#What-is-it-NOT-about" class="headerlink" title="What is it NOT about"></a>What is it NOT about</h3><p>Softwares are just tools.<br>So it won’t improve your drawing/design skills in any way.<br>It will just allow you to express whatever you’re able to do in another way.</p><h3 id="Keyboard-shortcuts"><a href="#Keyboard-shortcuts" class="headerlink" title="Keyboard shortcuts"></a>Keyboard shortcuts</h3><p>For working right, you really need to learn some basic keyboard shortcuts.<br>This will greatly improve your experience with the software and make things more natural.  </p><p>Of course you don’t have to remember everything :) Just the most common ones.</p><h4 id="Mac-PC"><a href="#Mac-PC" class="headerlink" title="Mac/PC"></a>Mac/PC</h4><p>In Illustrator (as AD is mac only) when I will talk about the key <code>CMD</code> you should replace it with <code>CTRL</code></p><h4 id="doing-undoing"><a href="#doing-undoing" class="headerlink" title="doing/undoing"></a>doing/undoing</h4><p>Like in every software you can achieve those actions by pressing:</p><p><em>undo</em>: <code>CMD</code> + <code>Z</code><br><em>redo</em>: <code>SHIFT</code> + <code>CMD</code> + <code>Z</code></p><h2 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h2><p>The folks from Affinity organized AD in almost the same way as AI.<br>There is some differences of course, but globally things are the same.</p><dl class="split">  <dt class="split__title split__title--first">Illustrator</dt>  <dd class="split__content split__content--first">    <img src="/en/2016/02-vector-creation-basics/zoning-illustrator.svg" class="" title="Illustrator zoning">  </dd>  <dt  class="split__title split__title--second">Affinity Designer</dt>  <dd class="split__content split__content--second">    <img src="/en/2016/02-vector-creation-basics/zoning-designer.svg" class="" title="Designer zoning">  </dd></dl><h3 id="Context-properties…"><a href="#Context-properties…" class="headerlink" title="Context properties…"></a>Context properties…</h3><p>…will change with the tools you use or the selection you have.<br>It will provide the most common options you should need a this moment</p><h3 id="Toolbar"><a href="#Toolbar" class="headerlink" title="Toolbar"></a>Toolbar</h3><p>It’s the same things as real tools, they are needed to do stuff.<br><em>One very important thing is</em> every tools has multiple powers.<br>Those are unlocked by pressing additional keys (<code>CMD</code>  <code>ALT</code> <code>SHIFT</code>) while using them.</p><p>Of course, using a tool, is clicking on it to select it.</p><h4 id="More-tools"><a href="#More-tools" class="headerlink" title="More tools!"></a>More tools!</h4><p>When you see an arrow in the tool square, It means that by making a <strong>long press on this tool</strong>, you can <strong>access other tools!</strong></p><!-- **MORE TOOLS IMAGE** --><h3 id="Artboard-s"><a href="#Artboard-s" class="headerlink" title="Artboard(s)"></a>Artboard(s)</h3><p>This will be your main working zone. Details will be provided later on.</p><h3 id="Panels"><a href="#Panels" class="headerlink" title="Panels"></a>Panels</h3><p>A lot of stuff are placed here.<br>It can be colors, layers and so on.<br>Every panel can be grouped with <code>tabs</code>.</p><!-- **TABS IMAGE** --><p>And every panel as some options:</p><!-- **OPTION ICON** --><p>You can check it every time you want. Be curious :P</p><h3 id="Information-Keyboards-modifications-help"><a href="#Information-Keyboards-modifications-help" class="headerlink" title="Information / Keyboards modifications help"></a>Information / Keyboards modifications help</h3><dl class="split">  <dt class="split__title split__title--first">Illustrator</dt>  <dd class="split__content split__content--first">    <ul><li>At the bottom, there is different information about the zoom level, which artboard are you working on and the current tool used.  </li><li>When you use <strong>modification keys</strong> (see <a href="/#toolbar">Toolbar</a>) the current tool will change to reflect what you are going to do</li></ul>  </dd>  <dt  class="split__title split__title--second">Affinity Designer</dt>  <dd class="split__content split__content--second">    <ul><li>Every time a small description of what and how you can achieve with the tool you have selected.  </li><li>They also list all the <strong>modification keys</strong> you can use, and how they will change the behavior of the current tool.</li></ul>  </dd></dl><h2 id="Moving"><a href="#Moving" class="headerlink" title="Moving"></a>Moving</h2><p>Working is always getting on different parts of your artwork.<br>With a virtual paper, you have new ways to navigate inside your design.</p><h3 id="Hand-amp-magnifying-glass"><a href="#Hand-amp-magnifying-glass" class="headerlink" title="Hand &amp; magnifying glass"></a>Hand &amp; magnifying glass</h3><dl class="split">  <dt class="split__title split__title--first">Illustrator</dt>  <dd class="split__content split__content--first">    <img src="/en/2016/02-vector-creation-basics/move-zoom-illustrator.gif" class="" title="Illustrator moving and zooming tool">  </dd>  <dt  class="split__title split__title--second">Affinity Designer</dt>  <dd class="split__content split__content--second">    <img src="/en/2016/02-vector-creation-basics/move-zoom-designer.gif" class="" title="Designer moving and zooming tool">  </dd></dl>   <p><em>move:</em> this is the <strong>hand tool</strong>. It will allow you to span around the working zone<br>This by doing <code>click &amp; drag</code></p><p><em>zoom:</em> this is the <strong>magnifying glass tool</strong>. It will allow you to be closer or farther of your design.<br><code>ALT</code> to unzoom.</p><h3 id="the-better-way"><a href="#the-better-way" class="headerlink" title="the better way"></a>the better way</h3><p>whatever tool you have selected those shortcuts works:</p><p><em>move:</em> <code>SPACE</code> + <code>click &amp; drag</code><br><em>zoom/unzoom</em> <code>CMD</code> + <code>+</code> / <code>CMD</code> + <code>-</code></p><h2 id="Artboard"><a href="#Artboard" class="headerlink" title="Artboard"></a>Artboard</h2><p>Those are your working area.<br>It’s like <strong>custom sized sheets of paper</strong> and you can have as many as you want.</p><p>I won’t cover it here, and stick to the default preset: 1 artboard.</p><h2 id="Creating-shapes"><a href="#Creating-shapes" class="headerlink" title="Creating shapes"></a>Creating shapes</h2><p>We will cover here only one tool to create <strong>custom shapes</strong>:  the <strong>pen tool.</strong><br><strong>Predefined shapes</strong> (like rectangles, ellipse and so on) usage is I think obvious.</p><p>There is of course other way to create shapes, but focusing on the <strong>pen tool</strong> is a good to way to know the core of making vector shapes.</p><h3 id="Making-the-shape"><a href="#Making-the-shape" class="headerlink" title="Making the shape"></a>Making the shape</h3><ul><li>Select the <code>pen tool</code></li></ul><dl class="split">  <dt class="split__title split__title--first">Illustrator</dt>  <dd class="split__content split__content--first">    <img src="/en/2016/02-vector-creation-basics/pen-tool-illustrator.gif" class="" title="Illustrator pen tool">  </dd>  <dt  class="split__title split__title--second">Affinity Designer</dt>  <dd class="split__content split__content--second">    <img src="/en/2016/02-vector-creation-basics/pen-tool-designer.gif" class="" title="Designer pen tool">  </dd></dl>   <ul><li>Then click on your artboard.  </li><li>Each click will make another point.  </li><li>If you <code>click &amp; drag</code>, then you will create a point with handlers.</li></ul><div class="video-wrapper">  <video src="/en/2016/02-vector-creation-basics/pen-tool.m4v" controls muted></div><p>To <em>close a path</em> click on the first point you have created (like in the above example).</p><h3 id="Editing-the-shape"><a href="#Editing-the-shape" class="headerlink" title="Editing the shape"></a>Editing the shape</h3><p>You may to edit your object in 2 ways:</p><ul><li>move, rotate or scale the <strong>whole object</strong></li><li>edit the shape in itself</li></ul><p>And there is 2 different tools to accomplish this:</p><dl class="split">  <dt class="split__title split__title--first">Illustrator</dt>  <dd class="split__content split__content--first">    <img src="/en/2016/02-vector-creation-basics/arrows-illustrator.gif" class="" title="Illustrator pen tool">   __Black arrow__: named *selection tool*  __White arrow__: named *direct selection tool*  </dd>  <dt  class="split__title split__title--second">Affinity Designer</dt>  <dd class="split__content split__content--second">    <img src="/en/2016/02-vector-creation-basics/arrows-designer.gif" class="" title="Designer pen tool"> __Black arrow__: named *move tool*  __White arrow__: named *node tool*  </dd></dl>  <h4 id="The-black-arrow"><a href="#The-black-arrow" class="headerlink" title="The black arrow"></a>The black arrow</h4><p>will allow you to <strong>select a whole path</strong>.<br>When a path is selected, you have a selection box around your object.  </p><div class="video-wrapper">  <video src="/en/2016/02-vector-creation-basics/black-arrow-tool.m4v" controls muted></div><ul><li><strong>moving:</strong> <code>click &amp; drag</code> from <em>inside</em> the shape<ul><li>multiple can be made by pressing <code>SHIFT</code> and click on the shapes you want</li></ul></li><li><strong>rotating:</strong>  <code>click &amp; drag</code> from a <em>little further</em> from a corner. <em>the icon should change appearance</em></li><li><strong>resizing:</strong>  <code>click &amp; drag</code> from any point of selection box</li><li><strong>constraint:</strong> each transforms can be constrains (move on determined angles, scales proportionally…) by pushing <code>SHIFT</code> <em>while dragging</em></li></ul><h4 id="The-white-arrow"><a href="#The-white-arrow" class="headerlink" title="The white arrow"></a>The white arrow</h4><p>will allow you to <strong>select a point</strong> in a path.<br>And also to modify the <strong>handlers of a point</strong> (if any).</p><div class="video-wrapper">  <video src="/en/2016/02-vector-creation-basics/white-arrow-tool.m4v" controls muted></div><p>You can move many points by selecting them with <code>SHIFT</code>.</p><p>There is some difference in behavior in AD an AD: </p><dl class="split">  <dt class="split__title split__title--first">In Illustrator</dt>  <dd class="split__content split__content--first">    <p>…selecting a shape with the <strong>white arrow</strong> will select all the points<br>So <strong>be aware of your selection</strong>.</p>  </dd>  <dt  class="split__title split__title--second">In Affinity Designer</dt>  <dd class="split__content split__content--second">    <p>…the <strong>white arrow</strong> allow also to modify a <code>stroke</code>.<br>Simply <code>Click &amp; drag</code> on a stroke to reshape it.</p>  </dd></dl>  <h4 id="pen-tool-the-return"><a href="#pen-tool-the-return" class="headerlink" title="pen tool (the return)"></a>pen tool (the return)</h4><p>The <strong>pen tool</strong> has also abilities of editing a shape thanks to the <strong>modification keys</strong><br>AD &amp; AI treats it differently:</p><dl class="split">  <dt class="split__title split__title--first">In Illustrator</dt>  <dd class="split__content split__content--first">    <p><strong>Adding a point:</strong><br><code>click</code> on a path<br><strong>Moving a point:</strong><br><code>CMD</code> for getting in <em>white arrow mode</em> (<code>SHIFT</code> for multiple selection)<br><strong>Removing a point:</strong><br><code>click</code> on a point<br><strong>Adding handlers to a point:</strong><br><code>ALT</code> + <code>click &amp; drag</code> on a point<br><strong>Removing handlers of a point:</strong><br><code>ALT</code> + <code>click</code> on a point<br><strong>Breaking handlers</strong><br>with selected point <code>ALT</code> + <code>click &amp; drag</code> on an handler</p>  </dd>  <dt  class="split__title split__title--second">In Affinity Designer</dt>  <dd class="split__content split__content--second">    <p><strong>Adding a point:</strong><br><code>CMD</code> + <code>click</code> <em>on a stroke</em> to add a point<br><strong>Moving a point:</strong><br><code>click  &amp; drag</code> <em>on a point</em> (<code>SHIFT</code> for multiple selection)<br><strong>Removing a point:</strong><br>select points by <code>click</code> then press <code>DEL</code><br><strong>Adding handlers to a point:</strong><br><code>click &amp; drag</code> on a point (have to be on <code>Mode: pen</code> in the <strong>context bar</strong>)<br><strong>Removing handlers of a point:</strong><br>selecting handlers and in the <strong>context bar</strong> click on <code>convert -&gt; the type you want</code><br><strong>Breaking handlers:</strong><br>while <code>dragging an handler</code> click on <code>ALT</code><br><strong>Reshaping a stroke:</strong><br><code>click &amp; drag</code> on a stroke</p>  </dd></dl>  <h2 id="Styling-shapes"><a href="#Styling-shapes" class="headerlink" title="Styling shapes"></a>Styling shapes</h2><h3 id="Colors"><a href="#Colors" class="headerlink" title="Colors"></a>Colors</h3><p><strong>After having a shape selected</strong>, fill &amp; border can be styled in the color panel:</p><dl class="split">  <dt class="split__title split__title--first">Illustrator</dt>  <dd class="split__content split__content--first">    <img src="/en/2016/02-vector-creation-basics/color-panel-illustrator.png" class="" title="Illustrator pen tool">  </dd>  <dt  class="split__title split__title--second">Affinity Designer</dt>  <dd class="split__content split__content--second">    <img src="/en/2016/02-vector-creation-basics/color-panel-designer.png" class="" title="Designer pen tool">  </dd></dl>  <ul><li><strong>What you are styling appears above the other one</strong>.  </li><li><code>click</code> to select between border &amp; fill.  </li><li><code>double click</code> to open a more detailed color panel.</li></ul><div class="video-wrapper">  <video src="/en/2016/02-vector-creation-basics/fill-stroke-color.m4v" controls muted></div><h3 id="Stroke"><a href="#Stroke" class="headerlink" title="Stroke"></a>Stroke</h3><p>You can also <strong>modify the size of the stroke</strong> by tweaking on the <strong>context properties</strong>.</p><dl class="split">  <dt class="split__title split__title--first">In Illustrator</dt>  <dd class="split__content split__content--first">    <p>All the stroke properties are put next to each another.<br>You can also access a stroke panel by clicking on the <em>stroke link</em></p>  </dd>  <dt  class="split__title split__title--second">In Affinity Designer</dt>  <dd class="split__content split__content--second">    <p>by clicking on the <strong>stroke line</strong>, a panel will open with all the options you need</p>  </dd></dl>  <h2 id="Exporting-an-artwork"><a href="#Exporting-an-artwork" class="headerlink" title="Exporting an artwork"></a>Exporting an artwork</h2><p>Because vector drawing drawings are computed, you can generate a lot of different files type with those, including JPG (pixel), PDF and SVG (one of the most interoperable vector format)</p><p><strong>Artboards helps you by cropping everything that’s outside their boundaries.</strong></p><dl class="split">  <dt class="split__title split__title--first">In Illustrator</dt>  <dd class="split__content split__content--first">    <ul><li><strong>In the menu</strong>: File -&gt; Export</li><li>Choose the format (JPEG is good for showing to anybody)</li><li><strong>check the Use Artboards checkbox</strong></li><li><code>click</code> export</li></ul>  </dd>  <dt  class="split__title split__title--second">In Affinity Designer</dt>  <dd class="split__content split__content--second">    <ul><li><strong>In the menu</strong>: File -&gt; Export</li><li>Choose the format</li><li><code>click</code> export</li></ul>  </dd></dl>  <h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>There is of course more to see like:</p><ul><li>layers</li><li>Combining shapes</li><li>effects</li><li>…</li></ul><p>Affinity provides a lot of great tutorials <a href="https://affinity.serif.com/tutorials/designer/">here</a></p>]]></content>
    
    
    <summary type="html">Learn how to make a vector image with Affinity Designer or Adobe Illustrator</summary>
    
    
    
    <category term="drawing" scheme="https://hiswe.github.io/categories/drawing/"/>
    
    
    <category term="affinity designer" scheme="https://hiswe.github.io/tags/affinity-designer/"/>
    
    <category term="vector" scheme="https://hiswe.github.io/tags/vector/"/>
    
    <category term="beginner" scheme="https://hiswe.github.io/tags/beginner/"/>
    
    <category term="adobe illustrator" scheme="https://hiswe.github.io/tags/adobe-illustrator/"/>
    
  </entry>
  
  <entry>
    <title>Vector basics</title>
    <link href="https://hiswe.github.io/en/2016/01-vector-basics/"/>
    <id>https://hiswe.github.io/en/2016/01-vector-basics/</id>
    <published>2016-01-30T17:51:23.000Z</published>
    <updated>2021-04-25T10:07:36.764Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><h3 id="vector-vs-pixels"><a href="#vector-vs-pixels" class="headerlink" title="vector vs pixels"></a>vector vs pixels</h3><p>Pixel images are composed of a grid of colored square (fig.01)</p><figure class="image-container">  <img src="/en/2016/01-vector-basics/pixel-example.png" class="" title="a pixel image and a zoom on it">  <figcaption class="image-container__caption">when zoomed, we see squares</figcaption></figure><p>Vector are defined by shapes that are rendered by the computer (fig.02) </p><figure class="image-container">  <img src="/en/2016/01-vector-basics/vector-example.jpg" class="" title="a vector image and a zoom on it">   <figcaption class="image-container__caption">vectors can be zoomed without quality loss</figcaption></figure><p>See <a href="https://en.wikipedia.org/wiki/Vector_graphics">wikipedia</a> for more details</p><h3 id="why-choose-vector"><a href="#why-choose-vector" class="headerlink" title="why choose vector?"></a>why choose vector?</h3><p>Vector are getting you a very clean render. Also it’s easily editable.<br>For some works like:</p><ul><li>Logo design</li><li>web-design</li><li>even illustrations</li></ul><p>that can be great advantages.</p><span id="more"></span><h2 id="what-is…"><a href="#what-is…" class="headerlink" title="what is…"></a>what is…</h2><h3 id="…a-shape"><a href="#…a-shape" class="headerlink" title="…a shape?"></a>…a shape?</h3><ul><li>it’s a whole composed of <code>many point</code></li><li>it can be left open or close</li><li>each points will be linked by a <code>stroke</code></li></ul><figure class="image-container">  <img src="/en/2016/01-vector-basics/shape-basic.svg" class="" title="an open and close path">   <figcaption class="image-container__caption">an open and close path</figcaption></figure><ul><li>path have a begin and an end (the red point)</li></ul><h3 id="…a-stroke-a-point"><a href="#…a-stroke-a-point" class="headerlink" title="…a stroke? a point?"></a>…a stroke? a point?</h3><ul><li>strokes are drawn automatically by the computer</li><li>a stroke link two consecutive points together</li></ul><figure class="image-container">  <img src="/en/2016/01-vector-basics/point-basic.svg" class="" title="different states of points">   <figcaption class="image-container__caption">point without and with handles</figcaption></figure><ul><li>points can have 0, 1 or 2 <code>handlers</code>.</li><li>on the left side of fig.04, there is a shape where all points doesn’t have handlers</li><li>on the right side, the points are at the same place, but they had handlers attached to them</li></ul><h3 id="…handlers"><a href="#…handlers" class="headerlink" title="…handlers?"></a>…handlers?</h3><ul><li><code>handlers</code> are what make your path curvy (instead of straight)</li><li>both handler can be :<ul><li><strong>aligned</strong> (fig.04 point A)</li><li><strong>broken</strong> (fig.04 point B)</li><li><strong>alone</strong> (fig.04 point C)</li></ul></li><li>and can be any sized</li></ul><h2 id="The-mystery-of-strokes"><a href="#The-mystery-of-strokes" class="headerlink" title="The mystery of strokes"></a>The mystery of strokes</h2><p>As said before, strokes are determine by the 2 points that are on its end.</p><ul><li>a stroke will always take the shortest path to link 2 points</li><li>handler are modifiers of this behavior </li><li>They “attract” the stroke (like some kind of “gravity force”)</li></ul><figure class="image-container">  <img src="/en/2016/01-vector-basics/handler-basic.svg" class="" title="handler explanation">   <figcaption class="image-container__caption">handler explanation</figcaption></figure><ul><li>So without handlers: no deviations</li><li>with handlers: deviations</li><li>the bigger the handler is, the more powerful the deviation will be</li></ul><h2 id="Styling"><a href="#Styling" class="headerlink" title="Styling"></a>Styling</h2><figure class="image-container">  <img src="/en/2016/01-vector-basics/shape-style.svg" class="" title="different path">   <figcaption class="image-container__caption">different path</figcaption></figure><ul><li>it accepts a <code>stroke</code> and and <code>fill</code> that can be styled differently (fig.06 left)</li><li>if the path is <em>open</em> the fill <em>only</em> will join the ends. (fig.06 middle)</li><li>shapes are always piled up (fig.06 right)</li></ul><h2 id="Softwares"><a href="#Softwares" class="headerlink" title="Softwares"></a>Softwares</h2><p>Here is a short list of softwares you can use for editing vector graphics:</p><ul><li><a href="https://affinity.serif.com/designer/">Affinity designer</a></li><li><a href="http://www.adobe.com/products/illustrator.html">Adobe Illustrator</a></li><li><a href="http://www.sketchapp.com/">Sketch</a></li><li><a href="http://www.inkscape.org/">Inkscape</a> (Free and Open Source)</li><li>…</li></ul><p>And many more of course :)</p>]]></content>
    
    
    <summary type="html">Learn what is a vector image and some basic concepts evolving around it</summary>
    
    
    
    <category term="drawing" scheme="https://hiswe.github.io/categories/drawing/"/>
    
    
    <category term="vector" scheme="https://hiswe.github.io/tags/vector/"/>
    
    <category term="beginner" scheme="https://hiswe.github.io/tags/beginner/"/>
    
  </entry>
  
</feed>
